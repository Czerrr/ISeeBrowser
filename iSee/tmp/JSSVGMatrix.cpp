/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"


#if ENABLE(SVG)

#include "Document.h"
#include "Frame.h"
#include "SVGDocumentExtensions.h"
#include "SVGElement.h"
#include "SVGAnimatedTemplate.h"
#include "JSSVGMatrix.h"

#include <wtf/GetPtr.h>


#include <kjs/Error.h>
#include <kjs/JSNumberCell.h>

using namespace JSC;

namespace WebCore {

ASSERT_CLASS_FITS_IN_CELL(JSSVGMatrix)

/* Hash table */

static const HashTableValue JSSVGMatrixTableValues[7] =
{
    { "a", (intptr_t)JSSVGMatrix::AAttrNum, DontDelete, 0 },
    { "b", (intptr_t)JSSVGMatrix::BAttrNum, DontDelete, 0 },
    { "c", (intptr_t)JSSVGMatrix::CAttrNum, DontDelete, 0 },
    { "d", (intptr_t)JSSVGMatrix::DAttrNum, DontDelete, 0 },
    { "e", (intptr_t)JSSVGMatrix::EAttrNum, DontDelete, 0 },
    { "f", (intptr_t)JSSVGMatrix::FAttrNum, DontDelete, 0 },
    { 0, 0, 0, 0 }
};

static const HashTable JSSVGMatrixTable = { 15, JSSVGMatrixTableValues, 0 };

/* Hash table for prototype */

static const HashTableValue JSSVGMatrixPrototypeTableValues[12] =
{
    { "multiply", (intptr_t)jsSVGMatrixPrototypeFunctionMultiply, DontDelete|Function, 1 },
    { "inverse", (intptr_t)jsSVGMatrixPrototypeFunctionInverse, DontDelete|Function, 0 },
    { "translate", (intptr_t)jsSVGMatrixPrototypeFunctionTranslate, DontDelete|Function, 2 },
    { "scale", (intptr_t)jsSVGMatrixPrototypeFunctionScale, DontDelete|Function, 1 },
    { "scaleNonUniform", (intptr_t)jsSVGMatrixPrototypeFunctionScaleNonUniform, DontDelete|Function, 2 },
    { "rotate", (intptr_t)jsSVGMatrixPrototypeFunctionRotate, DontDelete|Function, 1 },
    { "rotateFromVector", (intptr_t)jsSVGMatrixPrototypeFunctionRotateFromVector, DontDelete|Function, 2 },
    { "flipX", (intptr_t)jsSVGMatrixPrototypeFunctionFlipX, DontDelete|Function, 0 },
    { "flipY", (intptr_t)jsSVGMatrixPrototypeFunctionFlipY, DontDelete|Function, 0 },
    { "skewX", (intptr_t)jsSVGMatrixPrototypeFunctionSkewX, DontDelete|Function, 1 },
    { "skewY", (intptr_t)jsSVGMatrixPrototypeFunctionSkewY, DontDelete|Function, 1 },
    { 0, 0, 0, 0 }
};

static const HashTable JSSVGMatrixPrototypeTable = { 63, JSSVGMatrixPrototypeTableValues, 0 };

const ClassInfo JSSVGMatrixPrototype::s_info = { "SVGMatrixPrototype", 0, &JSSVGMatrixPrototypeTable, 0 };

JSObject* JSSVGMatrixPrototype::self(ExecState* exec)
{
    static const Identifier* prototypeIdentifier = new Identifier(exec, "[[JSSVGMatrix.prototype]]");
    return JSC::cacheGlobalObject<JSSVGMatrixPrototype>(exec, *prototypeIdentifier);
}

bool JSSVGMatrixPrototype::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticFunctionSlot<JSObject>(exec, &JSSVGMatrixPrototypeTable, this, propertyName, slot);
}

const ClassInfo JSSVGMatrix::s_info = { "SVGMatrix", 0, &JSSVGMatrixTable , 0 };

JSSVGMatrix::JSSVGMatrix(JSObject* prototype, JSSVGPODTypeWrapper<AffineTransform>* impl, SVGElement* context)
    : DOMObject(prototype)
    , m_context(context)
    , m_impl(impl)
{
}

JSSVGMatrix::~JSSVGMatrix()
{
    ScriptInterpreter::forgetDOMObject(m_impl.get());

}

bool JSSVGMatrix::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSSVGMatrix, Base>(exec, &JSSVGMatrixTable, this, propertyName, slot);
}

JSValue* JSSVGMatrix::getValueProperty(ExecState* exec, int token) const
{
    switch (token) {
    case AAttrNum: {
        AffineTransform imp(*impl());
        return jsNumber(exec, imp.a());
    }
    case BAttrNum: {
        AffineTransform imp(*impl());
        return jsNumber(exec, imp.b());
    }
    case CAttrNum: {
        AffineTransform imp(*impl());
        return jsNumber(exec, imp.c());
    }
    case DAttrNum: {
        AffineTransform imp(*impl());
        return jsNumber(exec, imp.d());
    }
    case EAttrNum: {
        AffineTransform imp(*impl());
        return jsNumber(exec, imp.e());
    }
    case FAttrNum: {
        AffineTransform imp(*impl());
        return jsNumber(exec, imp.f());
    }
    }
    return 0;
}

void JSSVGMatrix::put(ExecState* exec, const Identifier& propertyName, JSValue* value, PutPropertySlot& slot)
{
    lookupPut<JSSVGMatrix, Base>(exec, propertyName, value, &JSSVGMatrixTable, this, slot);
}

void JSSVGMatrix::putValueProperty(ExecState* exec, int token, JSValue* value)
{
    switch (token) {
    case AAttrNum: {
        AffineTransform imp(*impl());
        imp.setA(value->toNumber(exec));
        m_impl->commitChange(imp, context());
        break;
    }
    case BAttrNum: {
        AffineTransform imp(*impl());
        imp.setB(value->toNumber(exec));
        m_impl->commitChange(imp, context());
        break;
    }
    case CAttrNum: {
        AffineTransform imp(*impl());
        imp.setC(value->toNumber(exec));
        m_impl->commitChange(imp, context());
        break;
    }
    case DAttrNum: {
        AffineTransform imp(*impl());
        imp.setD(value->toNumber(exec));
        m_impl->commitChange(imp, context());
        break;
    }
    case EAttrNum: {
        AffineTransform imp(*impl());
        imp.setE(value->toNumber(exec));
        m_impl->commitChange(imp, context());
        break;
    }
    case FAttrNum: {
        AffineTransform imp(*impl());
        imp.setF(value->toNumber(exec));
        m_impl->commitChange(imp, context());
        break;
    }
    }
}

JSValue* jsSVGMatrixPrototypeFunctionMultiply(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGMatrix::s_info))
        return throwError(exec, TypeError);
    JSSVGMatrix* castedThisObj = static_cast<JSSVGMatrix*>(thisValue);
    return castedThisObj->multiply(exec, args);
}

JSValue* jsSVGMatrixPrototypeFunctionInverse(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGMatrix::s_info))
        return throwError(exec, TypeError);
    JSSVGMatrix* castedThisObj = static_cast<JSSVGMatrix*>(thisValue);
    return castedThisObj->inverse(exec, args);
}

JSValue* jsSVGMatrixPrototypeFunctionTranslate(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGMatrix::s_info))
        return throwError(exec, TypeError);
    JSSVGMatrix* castedThisObj = static_cast<JSSVGMatrix*>(thisValue);
    return castedThisObj->translate(exec, args);
}

JSValue* jsSVGMatrixPrototypeFunctionScale(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGMatrix::s_info))
        return throwError(exec, TypeError);
    JSSVGMatrix* castedThisObj = static_cast<JSSVGMatrix*>(thisValue);
    return castedThisObj->scale(exec, args);
}

JSValue* jsSVGMatrixPrototypeFunctionScaleNonUniform(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGMatrix::s_info))
        return throwError(exec, TypeError);
    JSSVGMatrix* castedThisObj = static_cast<JSSVGMatrix*>(thisValue);
    return castedThisObj->scaleNonUniform(exec, args);
}

JSValue* jsSVGMatrixPrototypeFunctionRotate(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGMatrix::s_info))
        return throwError(exec, TypeError);
    JSSVGMatrix* castedThisObj = static_cast<JSSVGMatrix*>(thisValue);
    return castedThisObj->rotate(exec, args);
}

JSValue* jsSVGMatrixPrototypeFunctionRotateFromVector(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGMatrix::s_info))
        return throwError(exec, TypeError);
    JSSVGMatrix* castedThisObj = static_cast<JSSVGMatrix*>(thisValue);
    return castedThisObj->rotateFromVector(exec, args);
}

JSValue* jsSVGMatrixPrototypeFunctionFlipX(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGMatrix::s_info))
        return throwError(exec, TypeError);
    JSSVGMatrix* castedThisObj = static_cast<JSSVGMatrix*>(thisValue);
    return castedThisObj->flipX(exec, args);
}

JSValue* jsSVGMatrixPrototypeFunctionFlipY(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGMatrix::s_info))
        return throwError(exec, TypeError);
    JSSVGMatrix* castedThisObj = static_cast<JSSVGMatrix*>(thisValue);
    return castedThisObj->flipY(exec, args);
}

JSValue* jsSVGMatrixPrototypeFunctionSkewX(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGMatrix::s_info))
        return throwError(exec, TypeError);
    JSSVGMatrix* castedThisObj = static_cast<JSSVGMatrix*>(thisValue);
    return castedThisObj->skewX(exec, args);
}

JSValue* jsSVGMatrixPrototypeFunctionSkewY(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGMatrix::s_info))
        return throwError(exec, TypeError);
    JSSVGMatrix* castedThisObj = static_cast<JSSVGMatrix*>(thisValue);
    return castedThisObj->skewY(exec, args);
}

JSC::JSValue* toJS(JSC::ExecState* exec, JSSVGPODTypeWrapper<AffineTransform>* obj, SVGElement* context)
{
    return cacheSVGDOMObject<JSSVGPODTypeWrapper<AffineTransform>, JSSVGMatrix, JSSVGMatrixPrototype>(exec, obj, context);
}
AffineTransform toSVGMatrix(JSC::JSValue* val)
{
    return val->isObject(&JSSVGMatrix::s_info) ? (AffineTransform) *static_cast<JSSVGMatrix*>(val)->impl() : AffineTransform();
}

}

#endif // ENABLE(SVG)
