/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"


#if ENABLE(SVG)

#include "Document.h"
#include "Frame.h"
#include "SVGDocumentExtensions.h"
#include "SVGElement.h"
#include "SVGAnimatedTemplate.h"
#include "JSSVGSVGElement.h"

#include <wtf/GetPtr.h>

#include "CSSMutableStyleDeclaration.h"
#include "CSSStyleDeclaration.h"
#include "CSSValue.h"
#include "FloatRect.h"
#include "JSCSSStyleDeclaration.h"
#include "JSCSSValue.h"
#include "JSNodeList.h"
#include "JSSVGAngle.h"
#include "JSSVGAnimatedBoolean.h"
#include "JSSVGAnimatedLength.h"
#include "JSSVGAnimatedPreserveAspectRatio.h"
#include "JSSVGAnimatedRect.h"
#include "JSSVGAnimatedString.h"
#include "JSSVGElement.h"
#include "JSSVGLength.h"
#include "JSSVGMatrix.h"
#include "JSSVGNumber.h"
#include "JSSVGPoint.h"
#include "JSSVGRect.h"
#include "JSSVGStringList.h"
#include "JSSVGTransform.h"
#include "KURL.h"
#include "NameNodeList.h"
#include "NodeList.h"
#include "SVGAngle.h"
#include "SVGElement.h"
#include "SVGLength.h"
#include "SVGSVGElement.h"
#include "SVGStringList.h"
#include "SVGTransform.h"

#include <kjs/Error.h>
#include <kjs/JSNumberCell.h>
#include <kjs/JSString.h>

using namespace JSC;

namespace WebCore {

ASSERT_CLASS_FITS_IN_CELL(JSSVGSVGElement)

/* Hash table */

static const HashTableValue JSSVGSVGElementTableValues[28] =
{
    { "x", (intptr_t)JSSVGSVGElement::XAttrNum, DontDelete|ReadOnly, 0 },
    { "y", (intptr_t)JSSVGSVGElement::YAttrNum, DontDelete|ReadOnly, 0 },
    { "width", (intptr_t)JSSVGSVGElement::WidthAttrNum, DontDelete|ReadOnly, 0 },
    { "height", (intptr_t)JSSVGSVGElement::HeightAttrNum, DontDelete|ReadOnly, 0 },
    { "contentScriptType", (intptr_t)JSSVGSVGElement::ContentScriptTypeAttrNum, DontDelete, 0 },
    { "contentStyleType", (intptr_t)JSSVGSVGElement::ContentStyleTypeAttrNum, DontDelete, 0 },
    { "viewport", (intptr_t)JSSVGSVGElement::ViewportAttrNum, DontDelete|ReadOnly, 0 },
    { "pixelUnitToMillimeterX", (intptr_t)JSSVGSVGElement::PixelUnitToMillimeterXAttrNum, DontDelete|ReadOnly, 0 },
    { "pixelUnitToMillimeterY", (intptr_t)JSSVGSVGElement::PixelUnitToMillimeterYAttrNum, DontDelete|ReadOnly, 0 },
    { "screenPixelToMillimeterX", (intptr_t)JSSVGSVGElement::ScreenPixelToMillimeterXAttrNum, DontDelete|ReadOnly, 0 },
    { "screenPixelToMillimeterY", (intptr_t)JSSVGSVGElement::ScreenPixelToMillimeterYAttrNum, DontDelete|ReadOnly, 0 },
    { "useCurrentView", (intptr_t)JSSVGSVGElement::UseCurrentViewAttrNum, DontDelete, 0 },
    { "currentScale", (intptr_t)JSSVGSVGElement::CurrentScaleAttrNum, DontDelete, 0 },
    { "currentTranslate", (intptr_t)JSSVGSVGElement::CurrentTranslateAttrNum, DontDelete|ReadOnly, 0 },
    { "requiredFeatures", (intptr_t)JSSVGSVGElement::RequiredFeaturesAttrNum, DontDelete|ReadOnly, 0 },
    { "requiredExtensions", (intptr_t)JSSVGSVGElement::RequiredExtensionsAttrNum, DontDelete|ReadOnly, 0 },
    { "systemLanguage", (intptr_t)JSSVGSVGElement::SystemLanguageAttrNum, DontDelete|ReadOnly, 0 },
    { "xmllang", (intptr_t)JSSVGSVGElement::XmllangAttrNum, DontDelete, 0 },
    { "xmlspace", (intptr_t)JSSVGSVGElement::XmlspaceAttrNum, DontDelete, 0 },
    { "externalResourcesRequired", (intptr_t)JSSVGSVGElement::ExternalResourcesRequiredAttrNum, DontDelete|ReadOnly, 0 },
    { "className", (intptr_t)JSSVGSVGElement::ClassNameAttrNum, DontDelete|ReadOnly, 0 },
    { "style", (intptr_t)JSSVGSVGElement::StyleAttrNum, DontDelete|ReadOnly, 0 },
    { "nearestViewportElement", (intptr_t)JSSVGSVGElement::NearestViewportElementAttrNum, DontDelete|ReadOnly, 0 },
    { "farthestViewportElement", (intptr_t)JSSVGSVGElement::FarthestViewportElementAttrNum, DontDelete|ReadOnly, 0 },
    { "viewBox", (intptr_t)JSSVGSVGElement::ViewBoxAttrNum, DontDelete|ReadOnly, 0 },
    { "preserveAspectRatio", (intptr_t)JSSVGSVGElement::PreserveAspectRatioAttrNum, DontDelete|ReadOnly, 0 },
    { "zoomAndPan", (intptr_t)JSSVGSVGElement::ZoomAndPanAttrNum, DontDelete, 0 },
    { 0, 0, 0, 0 }
};

static const HashTable JSSVGSVGElementTable = { 1023, JSSVGSVGElementTableValues, 0 };

/* Hash table for prototype */

static const HashTableValue JSSVGSVGElementPrototypeTableValues[32] =
{
    { "SVG_ZOOMANDPAN_UNKNOWN", (intptr_t)0, DontDelete|ReadOnly, 0 },
    { "SVG_ZOOMANDPAN_DISABLE", (intptr_t)1, DontDelete|ReadOnly, 0 },
    { "SVG_ZOOMANDPAN_MAGNIFY", (intptr_t)2, DontDelete|ReadOnly, 0 },
    { "suspendRedraw", (intptr_t)jsSVGSVGElementPrototypeFunctionSuspendRedraw, DontDelete|Function, 1 },
    { "unsuspendRedraw", (intptr_t)jsSVGSVGElementPrototypeFunctionUnsuspendRedraw, DontDelete|Function, 1 },
    { "unsuspendRedrawAll", (intptr_t)jsSVGSVGElementPrototypeFunctionUnsuspendRedrawAll, DontDelete|Function, 0 },
    { "forceRedraw", (intptr_t)jsSVGSVGElementPrototypeFunctionForceRedraw, DontDelete|Function, 0 },
    { "pauseAnimations", (intptr_t)jsSVGSVGElementPrototypeFunctionPauseAnimations, DontDelete|Function, 0 },
    { "unpauseAnimations", (intptr_t)jsSVGSVGElementPrototypeFunctionUnpauseAnimations, DontDelete|Function, 0 },
    { "animationsPaused", (intptr_t)jsSVGSVGElementPrototypeFunctionAnimationsPaused, DontDelete|Function, 0 },
    { "getCurrentTime", (intptr_t)jsSVGSVGElementPrototypeFunctionGetCurrentTime, DontDelete|Function, 0 },
    { "setCurrentTime", (intptr_t)jsSVGSVGElementPrototypeFunctionSetCurrentTime, DontDelete|Function, 1 },
    { "getIntersectionList", (intptr_t)jsSVGSVGElementPrototypeFunctionGetIntersectionList, DontDelete|Function, 2 },
    { "getEnclosureList", (intptr_t)jsSVGSVGElementPrototypeFunctionGetEnclosureList, DontDelete|Function, 2 },
    { "checkIntersection", (intptr_t)jsSVGSVGElementPrototypeFunctionCheckIntersection, DontDelete|Function, 2 },
    { "checkEnclosure", (intptr_t)jsSVGSVGElementPrototypeFunctionCheckEnclosure, DontDelete|Function, 2 },
    { "deselectAll", (intptr_t)jsSVGSVGElementPrototypeFunctionDeselectAll, DontDelete|Function, 0 },
    { "createSVGNumber", (intptr_t)jsSVGSVGElementPrototypeFunctionCreateSVGNumber, DontDelete|Function, 0 },
    { "createSVGLength", (intptr_t)jsSVGSVGElementPrototypeFunctionCreateSVGLength, DontDelete|Function, 0 },
    { "createSVGAngle", (intptr_t)jsSVGSVGElementPrototypeFunctionCreateSVGAngle, DontDelete|Function, 0 },
    { "createSVGPoint", (intptr_t)jsSVGSVGElementPrototypeFunctionCreateSVGPoint, DontDelete|Function, 0 },
    { "createSVGMatrix", (intptr_t)jsSVGSVGElementPrototypeFunctionCreateSVGMatrix, DontDelete|Function, 0 },
    { "createSVGRect", (intptr_t)jsSVGSVGElementPrototypeFunctionCreateSVGRect, DontDelete|Function, 0 },
    { "createSVGTransform", (intptr_t)jsSVGSVGElementPrototypeFunctionCreateSVGTransform, DontDelete|Function, 0 },
    { "createSVGTransformFromMatrix", (intptr_t)jsSVGSVGElementPrototypeFunctionCreateSVGTransformFromMatrix, DontDelete|Function, 1 },
    { "hasExtension", (intptr_t)jsSVGSVGElementPrototypeFunctionHasExtension, DontDelete|Function, 1 },
    { "getPresentationAttribute", (intptr_t)jsSVGSVGElementPrototypeFunctionGetPresentationAttribute, DontDelete|Function, 1 },
    { "getBBox", (intptr_t)jsSVGSVGElementPrototypeFunctionGetBBox, DontDelete|Function, 0 },
    { "getCTM", (intptr_t)jsSVGSVGElementPrototypeFunctionGetCTM, DontDelete|Function, 0 },
    { "getScreenCTM", (intptr_t)jsSVGSVGElementPrototypeFunctionGetScreenCTM, DontDelete|Function, 0 },
    { "getTransformToElement", (intptr_t)jsSVGSVGElementPrototypeFunctionGetTransformToElement, DontDelete|Function, 1 },
    { 0, 0, 0, 0 }
};

static const HashTable JSSVGSVGElementPrototypeTable = { 2047, JSSVGSVGElementPrototypeTableValues, 0 };

const ClassInfo JSSVGSVGElementPrototype::s_info = { "SVGSVGElementPrototype", 0, &JSSVGSVGElementPrototypeTable, 0 };

JSObject* JSSVGSVGElementPrototype::self(ExecState* exec)
{
    static const Identifier* prototypeIdentifier = new Identifier(exec, "[[JSSVGSVGElement.prototype]]");
    return JSC::cacheGlobalObject<JSSVGSVGElementPrototype>(exec, *prototypeIdentifier);
}

bool JSSVGSVGElementPrototype::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticPropertySlot<JSSVGSVGElementPrototype, JSObject>(exec, &JSSVGSVGElementPrototypeTable, this, propertyName, slot);
}

JSValue* JSSVGSVGElementPrototype::getValueProperty(ExecState* exec, int token) const
{
    // The token is the numeric value of its associated constant
    return jsNumber(exec, token);
}

const ClassInfo JSSVGSVGElement::s_info = { "SVGSVGElement", &JSSVGElement::s_info, &JSSVGSVGElementTable , 0 };

JSSVGSVGElement::JSSVGSVGElement(JSObject* prototype, SVGSVGElement* impl)
    : JSSVGElement(prototype, impl)
{
}

bool JSSVGSVGElement::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSSVGSVGElement, Base>(exec, &JSSVGSVGElementTable, this, propertyName, slot);
}

JSValue* JSSVGSVGElement::getValueProperty(ExecState* exec, int token) const
{
    switch (token) {
    case XAttrNum: {
        SVGSVGElement* imp = static_cast<SVGSVGElement*>(impl());
        RefPtr<SVGAnimatedLength> obj = imp->xAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case YAttrNum: {
        SVGSVGElement* imp = static_cast<SVGSVGElement*>(impl());
        RefPtr<SVGAnimatedLength> obj = imp->yAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case WidthAttrNum: {
        SVGSVGElement* imp = static_cast<SVGSVGElement*>(impl());
        RefPtr<SVGAnimatedLength> obj = imp->widthAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case HeightAttrNum: {
        SVGSVGElement* imp = static_cast<SVGSVGElement*>(impl());
        RefPtr<SVGAnimatedLength> obj = imp->heightAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case ContentScriptTypeAttrNum: {
        SVGSVGElement* imp = static_cast<SVGSVGElement*>(impl());
        return jsString(exec, imp->contentScriptType());
    }
    case ContentStyleTypeAttrNum: {
        SVGSVGElement* imp = static_cast<SVGSVGElement*>(impl());
        return jsString(exec, imp->contentStyleType());
    }
    case ViewportAttrNum: {
        SVGSVGElement* imp = static_cast<SVGSVGElement*>(impl());
        return toJS(exec, JSSVGStaticPODTypeWrapper<FloatRect>::create(imp->viewport()).get(), imp);
    }
    case PixelUnitToMillimeterXAttrNum: {
        SVGSVGElement* imp = static_cast<SVGSVGElement*>(impl());
        return jsNumber(exec, imp->pixelUnitToMillimeterX());
    }
    case PixelUnitToMillimeterYAttrNum: {
        SVGSVGElement* imp = static_cast<SVGSVGElement*>(impl());
        return jsNumber(exec, imp->pixelUnitToMillimeterY());
    }
    case ScreenPixelToMillimeterXAttrNum: {
        SVGSVGElement* imp = static_cast<SVGSVGElement*>(impl());
        return jsNumber(exec, imp->screenPixelToMillimeterX());
    }
    case ScreenPixelToMillimeterYAttrNum: {
        SVGSVGElement* imp = static_cast<SVGSVGElement*>(impl());
        return jsNumber(exec, imp->screenPixelToMillimeterY());
    }
    case UseCurrentViewAttrNum: {
        SVGSVGElement* imp = static_cast<SVGSVGElement*>(impl());
        return jsBoolean(imp->useCurrentView());
    }
    case CurrentScaleAttrNum: {
        SVGSVGElement* imp = static_cast<SVGSVGElement*>(impl());
        return jsNumber(exec, imp->currentScale());
    }
    case CurrentTranslateAttrNum: {
        SVGSVGElement* imp = static_cast<SVGSVGElement*>(impl());
        return toJS(exec, JSSVGStaticPODTypeWrapperWithParent<FloatPoint, SVGSVGElement>::create(imp, &SVGSVGElement::currentTranslate, &SVGSVGElement::setCurrentTranslate).get(), imp);
    }
    case RequiredFeaturesAttrNum: {
        SVGSVGElement* imp = static_cast<SVGSVGElement*>(impl());
        return toJS(exec, WTF::getPtr(imp->requiredFeatures()), imp);
    }
    case RequiredExtensionsAttrNum: {
        SVGSVGElement* imp = static_cast<SVGSVGElement*>(impl());
        return toJS(exec, WTF::getPtr(imp->requiredExtensions()), imp);
    }
    case SystemLanguageAttrNum: {
        SVGSVGElement* imp = static_cast<SVGSVGElement*>(impl());
        return toJS(exec, WTF::getPtr(imp->systemLanguage()), imp);
    }
    case XmllangAttrNum: {
        SVGSVGElement* imp = static_cast<SVGSVGElement*>(impl());
        return jsString(exec, imp->xmllang());
    }
    case XmlspaceAttrNum: {
        SVGSVGElement* imp = static_cast<SVGSVGElement*>(impl());
        return jsString(exec, imp->xmlspace());
    }
    case ExternalResourcesRequiredAttrNum: {
        SVGSVGElement* imp = static_cast<SVGSVGElement*>(impl());
        RefPtr<SVGAnimatedBoolean> obj = imp->externalResourcesRequiredAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case ClassNameAttrNum: {
        SVGSVGElement* imp = static_cast<SVGSVGElement*>(impl());
        RefPtr<SVGAnimatedString> obj = imp->classNameAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case StyleAttrNum: {
        SVGSVGElement* imp = static_cast<SVGSVGElement*>(impl());
        return toJS(exec, WTF::getPtr(imp->style()));
    }
    case NearestViewportElementAttrNum: {
        SVGSVGElement* imp = static_cast<SVGSVGElement*>(impl());
        return toJS(exec, WTF::getPtr(imp->nearestViewportElement()));
    }
    case FarthestViewportElementAttrNum: {
        SVGSVGElement* imp = static_cast<SVGSVGElement*>(impl());
        return toJS(exec, WTF::getPtr(imp->farthestViewportElement()));
    }
    case ViewBoxAttrNum: {
        SVGSVGElement* imp = static_cast<SVGSVGElement*>(impl());
        RefPtr<SVGAnimatedRect> obj = imp->viewBoxAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case PreserveAspectRatioAttrNum: {
        SVGSVGElement* imp = static_cast<SVGSVGElement*>(impl());
        RefPtr<SVGAnimatedPreserveAspectRatio> obj = imp->preserveAspectRatioAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case ZoomAndPanAttrNum: {
        SVGSVGElement* imp = static_cast<SVGSVGElement*>(impl());
        return jsNumber(exec, imp->zoomAndPan());
    }
    }
    return 0;
}

void JSSVGSVGElement::put(ExecState* exec, const Identifier& propertyName, JSValue* value, PutPropertySlot& slot)
{
    lookupPut<JSSVGSVGElement, Base>(exec, propertyName, value, &JSSVGSVGElementTable, this, slot);
}

void JSSVGSVGElement::putValueProperty(ExecState* exec, int token, JSValue* value)
{
    switch (token) {
    case ContentScriptTypeAttrNum: {
        SVGSVGElement* imp = static_cast<SVGSVGElement*>(impl());
        imp->setContentScriptType(value->toString(exec));
        break;
    }
    case ContentStyleTypeAttrNum: {
        SVGSVGElement* imp = static_cast<SVGSVGElement*>(impl());
        imp->setContentStyleType(value->toString(exec));
        break;
    }
    case UseCurrentViewAttrNum: {
        SVGSVGElement* imp = static_cast<SVGSVGElement*>(impl());
        imp->setUseCurrentView(value->toBoolean(exec));
        break;
    }
    case CurrentScaleAttrNum: {
        SVGSVGElement* imp = static_cast<SVGSVGElement*>(impl());
        imp->setCurrentScale(value->toFloat(exec));
        break;
    }
    case XmllangAttrNum: {
        SVGSVGElement* imp = static_cast<SVGSVGElement*>(impl());
        imp->setXmllang(value->toString(exec));
        break;
    }
    case XmlspaceAttrNum: {
        SVGSVGElement* imp = static_cast<SVGSVGElement*>(impl());
        imp->setXmlspace(value->toString(exec));
        break;
    }
    case ZoomAndPanAttrNum: {
        SVGSVGElement* imp = static_cast<SVGSVGElement*>(impl());
        imp->setZoomAndPan(value->toInt32(exec));
        break;
    }
    }
}

JSValue* jsSVGSVGElementPrototypeFunctionSuspendRedraw(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGSVGElement::s_info))
        return throwError(exec, TypeError);
    JSSVGSVGElement* castedThisObj = static_cast<JSSVGSVGElement*>(thisValue);
    SVGSVGElement* imp = static_cast<SVGSVGElement*>(castedThisObj->impl());
    unsigned maxWaitMilliseconds = args.at(exec, 0)->toInt32(exec);


    JSC::JSValue* result = jsNumber(exec, imp->suspendRedraw(maxWaitMilliseconds));
    return result;
}

JSValue* jsSVGSVGElementPrototypeFunctionUnsuspendRedraw(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGSVGElement::s_info))
        return throwError(exec, TypeError);
    JSSVGSVGElement* castedThisObj = static_cast<JSSVGSVGElement*>(thisValue);
    SVGSVGElement* imp = static_cast<SVGSVGElement*>(castedThisObj->impl());
    ExceptionCode ec = 0;
    unsigned suspendHandleId = args.at(exec, 0)->toInt32(exec);

    imp->unsuspendRedraw(suspendHandleId, ec);
    setDOMException(exec, ec);
    return jsUndefined();
}

JSValue* jsSVGSVGElementPrototypeFunctionUnsuspendRedrawAll(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGSVGElement::s_info))
        return throwError(exec, TypeError);
    JSSVGSVGElement* castedThisObj = static_cast<JSSVGSVGElement*>(thisValue);
    SVGSVGElement* imp = static_cast<SVGSVGElement*>(castedThisObj->impl());

    imp->unsuspendRedrawAll();
    return jsUndefined();
}

JSValue* jsSVGSVGElementPrototypeFunctionForceRedraw(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGSVGElement::s_info))
        return throwError(exec, TypeError);
    JSSVGSVGElement* castedThisObj = static_cast<JSSVGSVGElement*>(thisValue);
    SVGSVGElement* imp = static_cast<SVGSVGElement*>(castedThisObj->impl());

    imp->forceRedraw();
    return jsUndefined();
}

JSValue* jsSVGSVGElementPrototypeFunctionPauseAnimations(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGSVGElement::s_info))
        return throwError(exec, TypeError);
    JSSVGSVGElement* castedThisObj = static_cast<JSSVGSVGElement*>(thisValue);
    SVGSVGElement* imp = static_cast<SVGSVGElement*>(castedThisObj->impl());

    imp->pauseAnimations();
    return jsUndefined();
}

JSValue* jsSVGSVGElementPrototypeFunctionUnpauseAnimations(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGSVGElement::s_info))
        return throwError(exec, TypeError);
    JSSVGSVGElement* castedThisObj = static_cast<JSSVGSVGElement*>(thisValue);
    SVGSVGElement* imp = static_cast<SVGSVGElement*>(castedThisObj->impl());

    imp->unpauseAnimations();
    return jsUndefined();
}

JSValue* jsSVGSVGElementPrototypeFunctionAnimationsPaused(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGSVGElement::s_info))
        return throwError(exec, TypeError);
    JSSVGSVGElement* castedThisObj = static_cast<JSSVGSVGElement*>(thisValue);
    SVGSVGElement* imp = static_cast<SVGSVGElement*>(castedThisObj->impl());


    JSC::JSValue* result = jsBoolean(imp->animationsPaused());
    return result;
}

JSValue* jsSVGSVGElementPrototypeFunctionGetCurrentTime(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGSVGElement::s_info))
        return throwError(exec, TypeError);
    JSSVGSVGElement* castedThisObj = static_cast<JSSVGSVGElement*>(thisValue);
    SVGSVGElement* imp = static_cast<SVGSVGElement*>(castedThisObj->impl());


    JSC::JSValue* result = jsNumber(exec, imp->getCurrentTime());
    return result;
}

JSValue* jsSVGSVGElementPrototypeFunctionSetCurrentTime(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGSVGElement::s_info))
        return throwError(exec, TypeError);
    JSSVGSVGElement* castedThisObj = static_cast<JSSVGSVGElement*>(thisValue);
    SVGSVGElement* imp = static_cast<SVGSVGElement*>(castedThisObj->impl());
    float seconds = args.at(exec, 0)->toFloat(exec);

    imp->setCurrentTime(seconds);
    return jsUndefined();
}

JSValue* jsSVGSVGElementPrototypeFunctionGetIntersectionList(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGSVGElement::s_info))
        return throwError(exec, TypeError);
    JSSVGSVGElement* castedThisObj = static_cast<JSSVGSVGElement*>(thisValue);
    SVGSVGElement* imp = static_cast<SVGSVGElement*>(castedThisObj->impl());
    FloatRect rect = toSVGRect(args.at(exec, 0));
    SVGElement* referenceElement = toSVGElement(args.at(exec, 1));


    JSC::JSValue* result = toJS(exec, WTF::getPtr(imp->getIntersectionList(rect, referenceElement)));
    return result;
}

JSValue* jsSVGSVGElementPrototypeFunctionGetEnclosureList(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGSVGElement::s_info))
        return throwError(exec, TypeError);
    JSSVGSVGElement* castedThisObj = static_cast<JSSVGSVGElement*>(thisValue);
    SVGSVGElement* imp = static_cast<SVGSVGElement*>(castedThisObj->impl());
    FloatRect rect = toSVGRect(args.at(exec, 0));
    SVGElement* referenceElement = toSVGElement(args.at(exec, 1));


    JSC::JSValue* result = toJS(exec, WTF::getPtr(imp->getEnclosureList(rect, referenceElement)));
    return result;
}

JSValue* jsSVGSVGElementPrototypeFunctionCheckIntersection(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGSVGElement::s_info))
        return throwError(exec, TypeError);
    JSSVGSVGElement* castedThisObj = static_cast<JSSVGSVGElement*>(thisValue);
    SVGSVGElement* imp = static_cast<SVGSVGElement*>(castedThisObj->impl());
    SVGElement* element = toSVGElement(args.at(exec, 0));
    FloatRect rect = toSVGRect(args.at(exec, 1));


    JSC::JSValue* result = jsBoolean(imp->checkIntersection(element, rect));
    return result;
}

JSValue* jsSVGSVGElementPrototypeFunctionCheckEnclosure(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGSVGElement::s_info))
        return throwError(exec, TypeError);
    JSSVGSVGElement* castedThisObj = static_cast<JSSVGSVGElement*>(thisValue);
    SVGSVGElement* imp = static_cast<SVGSVGElement*>(castedThisObj->impl());
    SVGElement* element = toSVGElement(args.at(exec, 0));
    FloatRect rect = toSVGRect(args.at(exec, 1));


    JSC::JSValue* result = jsBoolean(imp->checkEnclosure(element, rect));
    return result;
}

JSValue* jsSVGSVGElementPrototypeFunctionDeselectAll(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGSVGElement::s_info))
        return throwError(exec, TypeError);
    JSSVGSVGElement* castedThisObj = static_cast<JSSVGSVGElement*>(thisValue);
    SVGSVGElement* imp = static_cast<SVGSVGElement*>(castedThisObj->impl());

    imp->deselectAll();
    return jsUndefined();
}

JSValue* jsSVGSVGElementPrototypeFunctionCreateSVGNumber(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGSVGElement::s_info))
        return throwError(exec, TypeError);
    JSSVGSVGElement* castedThisObj = static_cast<JSSVGSVGElement*>(thisValue);
    SVGSVGElement* imp = static_cast<SVGSVGElement*>(castedThisObj->impl());


    JSC::JSValue* result = toJS(exec, JSSVGStaticPODTypeWrapper<float>::create(imp->createSVGNumber()).get(), imp);
    return result;
}

JSValue* jsSVGSVGElementPrototypeFunctionCreateSVGLength(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGSVGElement::s_info))
        return throwError(exec, TypeError);
    JSSVGSVGElement* castedThisObj = static_cast<JSSVGSVGElement*>(thisValue);
    SVGSVGElement* imp = static_cast<SVGSVGElement*>(castedThisObj->impl());


    JSC::JSValue* result = toJS(exec, JSSVGStaticPODTypeWrapper<SVGLength>::create(imp->createSVGLength()).get(), imp);
    return result;
}

JSValue* jsSVGSVGElementPrototypeFunctionCreateSVGAngle(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGSVGElement::s_info))
        return throwError(exec, TypeError);
    JSSVGSVGElement* castedThisObj = static_cast<JSSVGSVGElement*>(thisValue);
    SVGSVGElement* imp = static_cast<SVGSVGElement*>(castedThisObj->impl());


    JSC::JSValue* result = toJS(exec, WTF::getPtr(imp->createSVGAngle()), imp);
    return result;
}

JSValue* jsSVGSVGElementPrototypeFunctionCreateSVGPoint(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGSVGElement::s_info))
        return throwError(exec, TypeError);
    JSSVGSVGElement* castedThisObj = static_cast<JSSVGSVGElement*>(thisValue);
    SVGSVGElement* imp = static_cast<SVGSVGElement*>(castedThisObj->impl());


    JSC::JSValue* result = toJS(exec, JSSVGStaticPODTypeWrapper<FloatPoint>::create(imp->createSVGPoint()).get(), imp);
    return result;
}

JSValue* jsSVGSVGElementPrototypeFunctionCreateSVGMatrix(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGSVGElement::s_info))
        return throwError(exec, TypeError);
    JSSVGSVGElement* castedThisObj = static_cast<JSSVGSVGElement*>(thisValue);
    SVGSVGElement* imp = static_cast<SVGSVGElement*>(castedThisObj->impl());


    JSC::JSValue* result = toJS(exec, JSSVGStaticPODTypeWrapper<AffineTransform>::create(imp->createSVGMatrix()).get(), imp);
    return result;
}

JSValue* jsSVGSVGElementPrototypeFunctionCreateSVGRect(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGSVGElement::s_info))
        return throwError(exec, TypeError);
    JSSVGSVGElement* castedThisObj = static_cast<JSSVGSVGElement*>(thisValue);
    SVGSVGElement* imp = static_cast<SVGSVGElement*>(castedThisObj->impl());


    JSC::JSValue* result = toJS(exec, JSSVGStaticPODTypeWrapper<FloatRect>::create(imp->createSVGRect()).get(), imp);
    return result;
}

JSValue* jsSVGSVGElementPrototypeFunctionCreateSVGTransform(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGSVGElement::s_info))
        return throwError(exec, TypeError);
    JSSVGSVGElement* castedThisObj = static_cast<JSSVGSVGElement*>(thisValue);
    SVGSVGElement* imp = static_cast<SVGSVGElement*>(castedThisObj->impl());


    JSC::JSValue* result = toJS(exec, JSSVGStaticPODTypeWrapper<SVGTransform>::create(imp->createSVGTransform()).get(), imp);
    return result;
}

JSValue* jsSVGSVGElementPrototypeFunctionCreateSVGTransformFromMatrix(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGSVGElement::s_info))
        return throwError(exec, TypeError);
    JSSVGSVGElement* castedThisObj = static_cast<JSSVGSVGElement*>(thisValue);
    SVGSVGElement* imp = static_cast<SVGSVGElement*>(castedThisObj->impl());
    AffineTransform matrix = toSVGMatrix(args.at(exec, 0));


    JSC::JSValue* result = toJS(exec, JSSVGStaticPODTypeWrapper<SVGTransform>::create(imp->createSVGTransformFromMatrix(matrix)).get(), imp);
    return result;
}

JSValue* jsSVGSVGElementPrototypeFunctionHasExtension(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGSVGElement::s_info))
        return throwError(exec, TypeError);
    JSSVGSVGElement* castedThisObj = static_cast<JSSVGSVGElement*>(thisValue);
    SVGSVGElement* imp = static_cast<SVGSVGElement*>(castedThisObj->impl());
    const UString& extension = args.at(exec, 0)->toString(exec);


    JSC::JSValue* result = jsBoolean(imp->hasExtension(extension));
    return result;
}

JSValue* jsSVGSVGElementPrototypeFunctionGetPresentationAttribute(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGSVGElement::s_info))
        return throwError(exec, TypeError);
    JSSVGSVGElement* castedThisObj = static_cast<JSSVGSVGElement*>(thisValue);
    SVGSVGElement* imp = static_cast<SVGSVGElement*>(castedThisObj->impl());
    const UString& name = args.at(exec, 0)->toString(exec);


    JSC::JSValue* result = toJS(exec, WTF::getPtr(imp->getPresentationAttribute(name)));
    return result;
}

JSValue* jsSVGSVGElementPrototypeFunctionGetBBox(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGSVGElement::s_info))
        return throwError(exec, TypeError);
    JSSVGSVGElement* castedThisObj = static_cast<JSSVGSVGElement*>(thisValue);
    SVGSVGElement* imp = static_cast<SVGSVGElement*>(castedThisObj->impl());


    JSC::JSValue* result = toJS(exec, JSSVGStaticPODTypeWrapper<FloatRect>::create(imp->getBBox()).get(), imp);
    return result;
}

JSValue* jsSVGSVGElementPrototypeFunctionGetCTM(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGSVGElement::s_info))
        return throwError(exec, TypeError);
    JSSVGSVGElement* castedThisObj = static_cast<JSSVGSVGElement*>(thisValue);
    SVGSVGElement* imp = static_cast<SVGSVGElement*>(castedThisObj->impl());


    JSC::JSValue* result = toJS(exec, JSSVGStaticPODTypeWrapper<AffineTransform>::create(imp->getCTM()).get(), imp);
    return result;
}

JSValue* jsSVGSVGElementPrototypeFunctionGetScreenCTM(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGSVGElement::s_info))
        return throwError(exec, TypeError);
    JSSVGSVGElement* castedThisObj = static_cast<JSSVGSVGElement*>(thisValue);
    SVGSVGElement* imp = static_cast<SVGSVGElement*>(castedThisObj->impl());


    JSC::JSValue* result = toJS(exec, JSSVGStaticPODTypeWrapper<AffineTransform>::create(imp->getScreenCTM()).get(), imp);
    return result;
}

JSValue* jsSVGSVGElementPrototypeFunctionGetTransformToElement(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGSVGElement::s_info))
        return throwError(exec, TypeError);
    JSSVGSVGElement* castedThisObj = static_cast<JSSVGSVGElement*>(thisValue);
    SVGSVGElement* imp = static_cast<SVGSVGElement*>(castedThisObj->impl());
    ExceptionCode ec = 0;
    SVGElement* element = toSVGElement(args.at(exec, 0));


    JSC::JSValue* result = toJS(exec, JSSVGStaticPODTypeWrapper<AffineTransform>::create(imp->getTransformToElement(element, ec)).get(), imp);
    setDOMException(exec, ec);
    return result;
}


}

#endif // ENABLE(SVG)
