/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#ifndef JSDOMWindow_h
#define JSDOMWindow_h

#include "JSDOMWindowBase.h"
#include "DOMWindow.h"
namespace WebCore {

class DOMWindow;

class JSDOMWindowShell;

class JSDOMWindow : public JSDOMWindowBase {
    typedef JSDOMWindowBase Base;
public:
    JSDOMWindow(DOMWindow*, JSDOMWindowShell*);
    virtual bool getOwnPropertySlot(JSC::ExecState*, const JSC::Identifier& propertyName, JSC::PropertySlot&);
    JSC::JSValue* getValueProperty(JSC::ExecState*, int token) const;
    bool customGetOwnPropertySlot(JSC::ExecState*, const JSC::Identifier&, JSC::PropertySlot&);
    virtual void put(JSC::ExecState*, const JSC::Identifier& propertyName, JSC::JSValue*, JSC::PutPropertySlot&);
    void putValueProperty(JSC::ExecState*, int, JSC::JSValue*);
    bool customPut(JSC::ExecState*, const JSC::Identifier&, JSC::JSValue*, JSC::PutPropertySlot&);
    virtual const JSC::ClassInfo* classInfo() const { return &s_info; }
    static const JSC::ClassInfo s_info;

    virtual void mark();

    virtual bool deleteProperty(JSC::ExecState*, const JSC::Identifier&);
    virtual void getPropertyNames(JSC::ExecState*, JSC::PropertyNameArray&);
    bool customGetPropertyNames(JSC::ExecState*, JSC::PropertyNameArray&);
    virtual bool getPropertyAttributes(JSC::ExecState*, const JSC::Identifier&, unsigned& attributes) const;
    virtual void defineGetter(JSC::ExecState*, const JSC::Identifier& propertyName, JSC::JSObject* getterFunction);
    virtual void defineSetter(JSC::ExecState*, const JSC::Identifier& propertyName, JSC::JSObject* setterFunction);
    virtual JSC::JSValue* lookupGetter(JSC::ExecState*, const JSC::Identifier& propertyName);
    virtual JSC::JSValue* lookupSetter(JSC::ExecState*, const JSC::Identifier& propertyName);
    enum {
        // Attributes
        ScreenAttrNum, HistoryAttrNum, LocationbarAttrNum, MenubarAttrNum, 
        PersonalbarAttrNum, ScrollbarsAttrNum, StatusbarAttrNum, ToolbarAttrNum, 
        NavigatorAttrNum, ClientInformationAttrNum, LocationAttrNum, FrameElementAttrNum, 
        OffscreenBufferingAttrNum, OuterHeightAttrNum, OuterWidthAttrNum, InnerHeightAttrNum, 
        InnerWidthAttrNum, ScreenXAttrNum, ScreenYAttrNum, ScreenLeftAttrNum, 
        ScreenTopAttrNum, ScrollXAttrNum, ScrollYAttrNum, PageXOffsetAttrNum, 
        PageYOffsetAttrNum, ClosedAttrNum, LengthAttrNum, NameAttrNum, 
        StatusAttrNum, DefaultStatusAttrNum, DefaultstatusAttrNum, SelfAttrNum, 
        WindowAttrNum, FramesAttrNum, OpenerAttrNum, ParentAttrNum, 
        TopAttrNum, DocumentAttrNum, DevicePixelRatioAttrNum, ConsoleAttrNum, 
        StyleSheetConstructorAttrNum, CSSStyleSheetConstructorAttrNum, CSSValueConstructorAttrNum, CSSPrimitiveValueConstructorAttrNum, 
        CSSValueListConstructorAttrNum, CSSRuleConstructorAttrNum, CSSCharsetRuleConstructorAttrNum, CSSFontFaceRuleConstructorAttrNum, 
        CSSImportRuleConstructorAttrNum, CSSMediaRuleConstructorAttrNum, CSSPageRuleConstructorAttrNum, CSSStyleRuleConstructorAttrNum, 
        CSSVariablesRuleConstructorAttrNum, CSSVariablesDeclarationConstructorAttrNum, CSSStyleDeclarationConstructorAttrNum, MediaListConstructorAttrNum, 
        CounterConstructorAttrNum, CSSRuleListConstructorAttrNum, RectConstructorAttrNum, StyleSheetListConstructorAttrNum, 
        DOMExceptionConstructorAttrNum, DOMImplementationConstructorAttrNum, DocumentFragmentConstructorAttrNum, DocumentConstructorAttrNum, 
        NodeConstructorAttrNum, NodeListConstructorAttrNum, NamedNodeMapConstructorAttrNum, CharacterDataConstructorAttrNum, 
        AttrConstructorAttrNum, ElementConstructorAttrNum, TextConstructorAttrNum, CommentConstructorAttrNum, 
        CDATASectionConstructorAttrNum, DocumentTypeConstructorAttrNum, NotationConstructorAttrNum, EntityConstructorAttrNum, 
        EntityReferenceConstructorAttrNum, ProcessingInstructionConstructorAttrNum, HTMLDocumentConstructorAttrNum, HTMLElementConstructorAttrNum, 
        HTMLAnchorElementConstructorAttrNum, HTMLAppletElementConstructorAttrNum, HTMLAreaElementConstructorAttrNum, HTMLBRElementConstructorAttrNum, 
        HTMLBaseElementConstructorAttrNum, HTMLBaseFontElementConstructorAttrNum, HTMLBlockquoteElementConstructorAttrNum, HTMLBodyElementConstructorAttrNum, 
        HTMLButtonElementConstructorAttrNum, HTMLCanvasElementConstructorAttrNum, HTMLDListElementConstructorAttrNum, HTMLDirectoryElementConstructorAttrNum, 
        HTMLDivElementConstructorAttrNum, HTMLEmbedElementConstructorAttrNum, HTMLFieldSetElementConstructorAttrNum, HTMLFontElementConstructorAttrNum, 
        HTMLFormElementConstructorAttrNum, HTMLFrameElementConstructorAttrNum, HTMLFrameSetElementConstructorAttrNum, HTMLHRElementConstructorAttrNum, 
        HTMLHeadElementConstructorAttrNum, HTMLHeadingElementConstructorAttrNum, HTMLHtmlElementConstructorAttrNum, HTMLIFrameElementConstructorAttrNum, 
        HTMLImageElementConstructorAttrNum, HTMLInputElementConstructorAttrNum, HTMLIsIndexElementConstructorAttrNum, HTMLLIElementConstructorAttrNum, 
        HTMLLabelElementConstructorAttrNum, HTMLLegendElementConstructorAttrNum, HTMLLinkElementConstructorAttrNum, HTMLMapElementConstructorAttrNum, 
        HTMLMarqueeElementConstructorAttrNum, HTMLMenuElementConstructorAttrNum, HTMLMetaElementConstructorAttrNum, HTMLModElementConstructorAttrNum, 
        HTMLOListElementConstructorAttrNum, HTMLObjectElementConstructorAttrNum, HTMLOptGroupElementConstructorAttrNum, HTMLOptionElementConstructorAttrNum, 
        HTMLParagraphElementConstructorAttrNum, HTMLParamElementConstructorAttrNum, HTMLPreElementConstructorAttrNum, HTMLQuoteElementConstructorAttrNum, 
        HTMLScriptElementConstructorAttrNum, HTMLSelectElementConstructorAttrNum, HTMLStyleElementConstructorAttrNum, HTMLTableCaptionElementConstructorAttrNum, 
        HTMLTableCellElementConstructorAttrNum, HTMLTableColElementConstructorAttrNum, HTMLTableElementConstructorAttrNum, HTMLTableRowElementConstructorAttrNum, 
        HTMLTableSectionElementConstructorAttrNum, HTMLTextAreaElementConstructorAttrNum, HTMLTitleElementConstructorAttrNum, HTMLUListElementConstructorAttrNum, 
        HTMLCollectionConstructorAttrNum, CanvasRenderingContext2DConstructorAttrNum, TextMetricsConstructorAttrNum, EventConstructorAttrNum, 
        KeyboardEventConstructorAttrNum, MouseEventConstructorAttrNum, MutationEventConstructorAttrNum, OverflowEventConstructorAttrNum, 
        ProgressEventConstructorAttrNum, TextEventConstructorAttrNum, UIEventConstructorAttrNum, WheelEventConstructorAttrNum, 
        MessageEventConstructorAttrNum, EventExceptionConstructorAttrNum, ClipboardConstructorAttrNum, FileConstructorAttrNum, 
        FileListConstructorAttrNum, NodeFilterConstructorAttrNum, RangeConstructorAttrNum, RangeExceptionConstructorAttrNum, 
        XMLDocumentConstructorAttrNum, DOMParserConstructorAttrNum, XMLSerializerConstructorAttrNum, XMLHttpRequestUploadConstructorAttrNum, 
        XMLHttpRequestExceptionConstructorAttrNum, XPathEvaluatorConstructorAttrNum, XPathResultConstructorAttrNum, XPathExceptionConstructorAttrNum, 
    };

    // Custom attributes
    void setLocation(JSC::ExecState*, JSC::JSValue*);

    // Custom functions
    JSC::JSValue* postMessage(JSC::ExecState*, const JSC::ArgList&);
    DOMWindow* impl() const
    {
        return static_cast<DOMWindow*>(Base::impl());
    }
};

DOMWindow* toDOMWindow(JSC::JSValue*);

class JSDOMWindowPrototype : public JSC::JSObject {
public:
    static JSC::JSObject* self();
    void* operator new(size_t);
    virtual const JSC::ClassInfo* classInfo() const { return &s_info; }
    static const JSC::ClassInfo s_info;
    bool getOwnPropertySlot(JSC::ExecState*, const JSC::Identifier&, JSC::PropertySlot&);
    JSDOMWindowPrototype() : JSC::JSObject(JSDOMWindowBase::commonJSGlobalData()->nullProtoStructureID) { }
};

// Functions

JSC::JSValue* jsDOMWindowPrototypeFunctionGetSelection(JSC::ExecState*, JSC::JSObject*, JSC::JSValue*, const JSC::ArgList&);
JSC::JSValue* jsDOMWindowPrototypeFunctionFocus(JSC::ExecState*, JSC::JSObject*, JSC::JSValue*, const JSC::ArgList&);
JSC::JSValue* jsDOMWindowPrototypeFunctionBlur(JSC::ExecState*, JSC::JSObject*, JSC::JSValue*, const JSC::ArgList&);
JSC::JSValue* jsDOMWindowPrototypeFunctionClose(JSC::ExecState*, JSC::JSObject*, JSC::JSValue*, const JSC::ArgList&);
JSC::JSValue* jsDOMWindowPrototypeFunctionPrint(JSC::ExecState*, JSC::JSObject*, JSC::JSValue*, const JSC::ArgList&);
JSC::JSValue* jsDOMWindowPrototypeFunctionStop(JSC::ExecState*, JSC::JSObject*, JSC::JSValue*, const JSC::ArgList&);
JSC::JSValue* jsDOMWindowPrototypeFunctionAlert(JSC::ExecState*, JSC::JSObject*, JSC::JSValue*, const JSC::ArgList&);
JSC::JSValue* jsDOMWindowPrototypeFunctionConfirm(JSC::ExecState*, JSC::JSObject*, JSC::JSValue*, const JSC::ArgList&);
JSC::JSValue* jsDOMWindowPrototypeFunctionPrompt(JSC::ExecState*, JSC::JSObject*, JSC::JSValue*, const JSC::ArgList&);
JSC::JSValue* jsDOMWindowPrototypeFunctionFind(JSC::ExecState*, JSC::JSObject*, JSC::JSValue*, const JSC::ArgList&);
JSC::JSValue* jsDOMWindowPrototypeFunctionScrollBy(JSC::ExecState*, JSC::JSObject*, JSC::JSValue*, const JSC::ArgList&);
JSC::JSValue* jsDOMWindowPrototypeFunctionScrollTo(JSC::ExecState*, JSC::JSObject*, JSC::JSValue*, const JSC::ArgList&);
JSC::JSValue* jsDOMWindowPrototypeFunctionScroll(JSC::ExecState*, JSC::JSObject*, JSC::JSValue*, const JSC::ArgList&);
JSC::JSValue* jsDOMWindowPrototypeFunctionMoveBy(JSC::ExecState*, JSC::JSObject*, JSC::JSValue*, const JSC::ArgList&);
JSC::JSValue* jsDOMWindowPrototypeFunctionMoveTo(JSC::ExecState*, JSC::JSObject*, JSC::JSValue*, const JSC::ArgList&);
JSC::JSValue* jsDOMWindowPrototypeFunctionResizeBy(JSC::ExecState*, JSC::JSObject*, JSC::JSValue*, const JSC::ArgList&);
JSC::JSValue* jsDOMWindowPrototypeFunctionResizeTo(JSC::ExecState*, JSC::JSObject*, JSC::JSValue*, const JSC::ArgList&);
JSC::JSValue* jsDOMWindowPrototypeFunctionGetComputedStyle(JSC::ExecState*, JSC::JSObject*, JSC::JSValue*, const JSC::ArgList&);
JSC::JSValue* jsDOMWindowPrototypeFunctionGetMatchedCSSRules(JSC::ExecState*, JSC::JSObject*, JSC::JSValue*, const JSC::ArgList&);
JSC::JSValue* jsDOMWindowPrototypeFunctionOpenDatabase(JSC::ExecState*, JSC::JSObject*, JSC::JSValue*, const JSC::ArgList&);
JSC::JSValue* jsDOMWindowPrototypeFunctionPostMessage(JSC::ExecState*, JSC::JSObject*, JSC::JSValue*, const JSC::ArgList&);
} // namespace WebCore

#endif
