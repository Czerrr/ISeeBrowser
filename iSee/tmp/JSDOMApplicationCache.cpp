/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"


#if ENABLE(OFFLINE_WEB_APPLICATIONS)

#include "JSDOMApplicationCache.h"

#include <wtf/GetPtr.h>

#include "DOMApplicationCache.h"
#include "ExceptionCode.h"
#include "KURL.h"

#include <kjs/Error.h>
#include <kjs/JSNumberCell.h>
#include <kjs/JSString.h>

using namespace JSC;

namespace WebCore {

ASSERT_CLASS_FITS_IN_CELL(JSDOMApplicationCache)

/* Hash table */

static const HashTableValue JSDOMApplicationCacheTableValues[10] =
{
    { "status", (intptr_t)JSDOMApplicationCache::StatusAttrNum, DontDelete|ReadOnly, 0 },
    { "length", (intptr_t)JSDOMApplicationCache::LengthAttrNum, DontDelete|ReadOnly, 0 },
    { "onchecking", (intptr_t)JSDOMApplicationCache::OncheckingAttrNum, DontDelete, 0 },
    { "onerror", (intptr_t)JSDOMApplicationCache::OnerrorAttrNum, DontDelete, 0 },
    { "onnoupdate", (intptr_t)JSDOMApplicationCache::OnnoupdateAttrNum, DontDelete, 0 },
    { "ondownloading", (intptr_t)JSDOMApplicationCache::OndownloadingAttrNum, DontDelete, 0 },
    { "onprogress", (intptr_t)JSDOMApplicationCache::OnprogressAttrNum, DontDelete, 0 },
    { "onupdateready", (intptr_t)JSDOMApplicationCache::OnupdatereadyAttrNum, DontDelete, 0 },
    { "oncached", (intptr_t)JSDOMApplicationCache::OncachedAttrNum, DontDelete, 0 },
    { 0, 0, 0, 0 }
};

static const HashTable JSDOMApplicationCacheTable = { 63, JSDOMApplicationCacheTableValues, 0 };

/* Hash table for prototype */

static const HashTableValue JSDOMApplicationCachePrototypeTableValues[14] =
{
    { "UNCACHED", (intptr_t)0, DontDelete|ReadOnly, 0 },
    { "IDLE", (intptr_t)1, DontDelete|ReadOnly, 0 },
    { "CHECKING", (intptr_t)2, DontDelete|ReadOnly, 0 },
    { "DOWNLOADING", (intptr_t)3, DontDelete|ReadOnly, 0 },
    { "UPDATEREADY", (intptr_t)4, DontDelete|ReadOnly, 0 },
    { "update", (intptr_t)jsDOMApplicationCachePrototypeFunctionUpdate, DontDelete|Function, 0 },
    { "swapCache", (intptr_t)jsDOMApplicationCachePrototypeFunctionSwapCache, DontDelete|Function, 0 },
    { "item", (intptr_t)jsDOMApplicationCachePrototypeFunctionItem, DontDelete|Function, 1 },
    { "add", (intptr_t)jsDOMApplicationCachePrototypeFunctionAdd, DontDelete|Function, 1 },
    { "remove", (intptr_t)jsDOMApplicationCachePrototypeFunctionRemove, DontDelete|Function, 1 },
    { "addEventListener", (intptr_t)jsDOMApplicationCachePrototypeFunctionAddEventListener, DontDelete|Function, 3 },
    { "removeEventListener", (intptr_t)jsDOMApplicationCachePrototypeFunctionRemoveEventListener, DontDelete|Function, 3 },
    { "dispatchEvent", (intptr_t)jsDOMApplicationCachePrototypeFunctionDispatchEvent, DontDelete|Function, 1 },
    { 0, 0, 0, 0 }
};

static const HashTable JSDOMApplicationCachePrototypeTable = { 255, JSDOMApplicationCachePrototypeTableValues, 0 };

const ClassInfo JSDOMApplicationCachePrototype::s_info = { "DOMApplicationCachePrototype", 0, &JSDOMApplicationCachePrototypeTable, 0 };

JSObject* JSDOMApplicationCachePrototype::self(ExecState* exec)
{
    static const Identifier* prototypeIdentifier = new Identifier(exec, "[[JSDOMApplicationCache.prototype]]");
    return JSC::cacheGlobalObject<JSDOMApplicationCachePrototype>(exec, *prototypeIdentifier);
}

bool JSDOMApplicationCachePrototype::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticPropertySlot<JSDOMApplicationCachePrototype, JSObject>(exec, &JSDOMApplicationCachePrototypeTable, this, propertyName, slot);
}

JSValue* JSDOMApplicationCachePrototype::getValueProperty(ExecState* exec, int token) const
{
    // The token is the numeric value of its associated constant
    return jsNumber(exec, token);
}

const ClassInfo JSDOMApplicationCache::s_info = { "DOMApplicationCache", 0, &JSDOMApplicationCacheTable , 0 };

JSDOMApplicationCache::JSDOMApplicationCache(JSObject* prototype, DOMApplicationCache* impl)
    : DOMObject(prototype)
    , m_impl(impl)
{
}

JSDOMApplicationCache::~JSDOMApplicationCache()
{
    ScriptInterpreter::forgetDOMObject(m_impl.get());

}

bool JSDOMApplicationCache::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSDOMApplicationCache, Base>(exec, &JSDOMApplicationCacheTable, this, propertyName, slot);
}

JSValue* JSDOMApplicationCache::getValueProperty(ExecState* exec, int token) const
{
    switch (token) {
    case StatusAttrNum: {
        DOMApplicationCache* imp = static_cast<DOMApplicationCache*>(impl());
        return jsNumber(exec, imp->status());
    }
    case LengthAttrNum: {
        DOMApplicationCache* imp = static_cast<DOMApplicationCache*>(impl());
        return jsNumber(exec, imp->length());
    }
    case OncheckingAttrNum: {
        return onchecking(exec);
    }
    case OnerrorAttrNum: {
        return onerror(exec);
    }
    case OnnoupdateAttrNum: {
        return onnoupdate(exec);
    }
    case OndownloadingAttrNum: {
        return ondownloading(exec);
    }
    case OnprogressAttrNum: {
        return onprogress(exec);
    }
    case OnupdatereadyAttrNum: {
        return onupdateready(exec);
    }
    case OncachedAttrNum: {
        return oncached(exec);
    }
    }
    return 0;
}

void JSDOMApplicationCache::put(ExecState* exec, const Identifier& propertyName, JSValue* value, PutPropertySlot& slot)
{
    lookupPut<JSDOMApplicationCache, Base>(exec, propertyName, value, &JSDOMApplicationCacheTable, this, slot);
}

void JSDOMApplicationCache::putValueProperty(ExecState* exec, int token, JSValue* value)
{
    switch (token) {
    case OncheckingAttrNum: {
        setOnchecking(exec, value);
        break;
    }
    case OnerrorAttrNum: {
        setOnerror(exec, value);
        break;
    }
    case OnnoupdateAttrNum: {
        setOnnoupdate(exec, value);
        break;
    }
    case OndownloadingAttrNum: {
        setOndownloading(exec, value);
        break;
    }
    case OnprogressAttrNum: {
        setOnprogress(exec, value);
        break;
    }
    case OnupdatereadyAttrNum: {
        setOnupdateready(exec, value);
        break;
    }
    case OncachedAttrNum: {
        setOncached(exec, value);
        break;
    }
    }
}

JSValue* jsDOMApplicationCachePrototypeFunctionUpdate(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSDOMApplicationCache::s_info))
        return throwError(exec, TypeError);
    JSDOMApplicationCache* castedThisObj = static_cast<JSDOMApplicationCache*>(thisValue);
    DOMApplicationCache* imp = static_cast<DOMApplicationCache*>(castedThisObj->impl());
    ExceptionCode ec = 0;

    imp->update(ec);
    setDOMException(exec, ec);
    return jsUndefined();
}

JSValue* jsDOMApplicationCachePrototypeFunctionSwapCache(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSDOMApplicationCache::s_info))
        return throwError(exec, TypeError);
    JSDOMApplicationCache* castedThisObj = static_cast<JSDOMApplicationCache*>(thisValue);
    DOMApplicationCache* imp = static_cast<DOMApplicationCache*>(castedThisObj->impl());
    ExceptionCode ec = 0;

    imp->swapCache(ec);
    setDOMException(exec, ec);
    return jsUndefined();
}

JSValue* jsDOMApplicationCachePrototypeFunctionItem(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSDOMApplicationCache::s_info))
        return throwError(exec, TypeError);
    JSDOMApplicationCache* castedThisObj = static_cast<JSDOMApplicationCache*>(thisValue);
    DOMApplicationCache* imp = static_cast<DOMApplicationCache*>(castedThisObj->impl());
    ExceptionCode ec = 0;
    int index = args.at(exec, 0)->toInt32(exec);
    if (index < 0) {
        setDOMException(exec, INDEX_SIZE_ERR);
        return jsUndefined();
    }


    JSC::JSValue* result = jsString(exec, imp->item(index, ec));
    setDOMException(exec, ec);
    return result;
}

JSValue* jsDOMApplicationCachePrototypeFunctionAdd(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSDOMApplicationCache::s_info))
        return throwError(exec, TypeError);
    JSDOMApplicationCache* castedThisObj = static_cast<JSDOMApplicationCache*>(thisValue);
    return castedThisObj->add(exec, args);
}

JSValue* jsDOMApplicationCachePrototypeFunctionRemove(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSDOMApplicationCache::s_info))
        return throwError(exec, TypeError);
    JSDOMApplicationCache* castedThisObj = static_cast<JSDOMApplicationCache*>(thisValue);
    return castedThisObj->remove(exec, args);
}

JSValue* jsDOMApplicationCachePrototypeFunctionAddEventListener(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSDOMApplicationCache::s_info))
        return throwError(exec, TypeError);
    JSDOMApplicationCache* castedThisObj = static_cast<JSDOMApplicationCache*>(thisValue);
    return castedThisObj->addEventListener(exec, args);
}

JSValue* jsDOMApplicationCachePrototypeFunctionRemoveEventListener(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSDOMApplicationCache::s_info))
        return throwError(exec, TypeError);
    JSDOMApplicationCache* castedThisObj = static_cast<JSDOMApplicationCache*>(thisValue);
    return castedThisObj->removeEventListener(exec, args);
}

JSValue* jsDOMApplicationCachePrototypeFunctionDispatchEvent(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSDOMApplicationCache::s_info))
        return throwError(exec, TypeError);
    JSDOMApplicationCache* castedThisObj = static_cast<JSDOMApplicationCache*>(thisValue);
    return castedThisObj->dispatchEvent(exec, args);
}

JSC::JSValue* toJS(JSC::ExecState* exec, DOMApplicationCache* obj)
{
    return cacheDOMObject<DOMApplicationCache, JSDOMApplicationCache, JSDOMApplicationCachePrototype>(exec, obj);
}
DOMApplicationCache* toDOMApplicationCache(JSC::JSValue* val)
{
    return val->isObject(&JSDOMApplicationCache::s_info) ? static_cast<JSDOMApplicationCache*>(val)->impl() : 0;
}

}

#endif // ENABLE(OFFLINE_WEB_APPLICATIONS)
