/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"


#if ENABLE(SVG)

#include "Document.h"
#include "Frame.h"
#include "SVGDocumentExtensions.h"
#include "SVGElement.h"
#include "SVGAnimatedTemplate.h"
#include "JSSVGAnimatedBoolean.h"

#include <wtf/GetPtr.h>



using namespace JSC;

namespace WebCore {

ASSERT_CLASS_FITS_IN_CELL(JSSVGAnimatedBoolean)

/* Hash table */

static const HashTableValue JSSVGAnimatedBooleanTableValues[3] =
{
    { "baseVal", (intptr_t)JSSVGAnimatedBoolean::BaseValAttrNum, DontDelete, 0 },
    { "animVal", (intptr_t)JSSVGAnimatedBoolean::AnimValAttrNum, DontDelete|ReadOnly, 0 },
    { 0, 0, 0, 0 }
};

static const HashTable JSSVGAnimatedBooleanTable = { 1, JSSVGAnimatedBooleanTableValues, 0 };

/* Hash table for prototype */

static const HashTableValue JSSVGAnimatedBooleanPrototypeTableValues[1] =
{
    { 0, 0, 0, 0 }
};

static const HashTable JSSVGAnimatedBooleanPrototypeTable = { 0, JSSVGAnimatedBooleanPrototypeTableValues, 0 };

const ClassInfo JSSVGAnimatedBooleanPrototype::s_info = { "SVGAnimatedBooleanPrototype", 0, &JSSVGAnimatedBooleanPrototypeTable, 0 };

JSObject* JSSVGAnimatedBooleanPrototype::self(ExecState* exec)
{
    static const Identifier* prototypeIdentifier = new Identifier(exec, "[[JSSVGAnimatedBoolean.prototype]]");
    return JSC::cacheGlobalObject<JSSVGAnimatedBooleanPrototype>(exec, *prototypeIdentifier);
}

const ClassInfo JSSVGAnimatedBoolean::s_info = { "SVGAnimatedBoolean", 0, &JSSVGAnimatedBooleanTable , 0 };

JSSVGAnimatedBoolean::JSSVGAnimatedBoolean(JSObject* prototype, SVGAnimatedBoolean* impl, SVGElement* context)
    : DOMObject(prototype)
    , m_context(context)
    , m_impl(impl)
{
}

JSSVGAnimatedBoolean::~JSSVGAnimatedBoolean()
{
    ScriptInterpreter::forgetDOMObject(m_impl.get());

}

bool JSSVGAnimatedBoolean::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSSVGAnimatedBoolean, Base>(exec, &JSSVGAnimatedBooleanTable, this, propertyName, slot);
}

JSValue* JSSVGAnimatedBoolean::getValueProperty(ExecState* exec, int token) const
{
    switch (token) {
    case BaseValAttrNum: {
        SVGAnimatedBoolean* imp = static_cast<SVGAnimatedBoolean*>(impl());
        return jsBoolean(imp->baseVal());
    }
    case AnimValAttrNum: {
        SVGAnimatedBoolean* imp = static_cast<SVGAnimatedBoolean*>(impl());
        return jsBoolean(imp->animVal());
    }
    }
    return 0;
}

void JSSVGAnimatedBoolean::put(ExecState* exec, const Identifier& propertyName, JSValue* value, PutPropertySlot& slot)
{
    lookupPut<JSSVGAnimatedBoolean, Base>(exec, propertyName, value, &JSSVGAnimatedBooleanTable, this, slot);
}

void JSSVGAnimatedBoolean::putValueProperty(ExecState* exec, int token, JSValue* value)
{
    switch (token) {
    case BaseValAttrNum: {
        SVGAnimatedBoolean* imp = static_cast<SVGAnimatedBoolean*>(impl());
        imp->setBaseVal(value->toBoolean(exec));
        if (context())
            context()->svgAttributeChanged(impl()->associatedAttributeName());
        break;
    }
    }
}

JSC::JSValue* toJS(JSC::ExecState* exec, SVGAnimatedBoolean* obj, SVGElement* context)
{
    return cacheSVGDOMObject<SVGAnimatedBoolean, JSSVGAnimatedBoolean, JSSVGAnimatedBooleanPrototype>(exec, obj, context);
}
SVGAnimatedBoolean* toSVGAnimatedBoolean(JSC::JSValue* val)
{
    return val->isObject(&JSSVGAnimatedBoolean::s_info) ? static_cast<JSSVGAnimatedBoolean*>(val)->impl() : 0;
}

}

#endif // ENABLE(SVG)
