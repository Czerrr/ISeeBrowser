/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"


#if ENABLE(SVG)

#include "Document.h"
#include "Frame.h"
#include "SVGDocumentExtensions.h"
#include "SVGElement.h"
#include "SVGAnimatedTemplate.h"
#include "JSSVGGradientElement.h"

#include <wtf/GetPtr.h>

#include "CSSMutableStyleDeclaration.h"
#include "CSSStyleDeclaration.h"
#include "CSSValue.h"
#include "JSCSSStyleDeclaration.h"
#include "JSCSSValue.h"
#include "JSSVGAnimatedBoolean.h"
#include "JSSVGAnimatedEnumeration.h"
#include "JSSVGAnimatedString.h"
#include "JSSVGAnimatedTransformList.h"
#include "SVGGradientElement.h"

#include <kjs/Error.h>
#include <kjs/JSNumberCell.h>

using namespace JSC;

namespace WebCore {

ASSERT_CLASS_FITS_IN_CELL(JSSVGGradientElement)

/* Hash table */

static const HashTableValue JSSVGGradientElementTableValues[9] =
{
    { "gradientUnits", (intptr_t)JSSVGGradientElement::GradientUnitsAttrNum, DontDelete|ReadOnly, 0 },
    { "gradientTransform", (intptr_t)JSSVGGradientElement::GradientTransformAttrNum, DontDelete|ReadOnly, 0 },
    { "spreadMethod", (intptr_t)JSSVGGradientElement::SpreadMethodAttrNum, DontDelete|ReadOnly, 0 },
    { "href", (intptr_t)JSSVGGradientElement::HrefAttrNum, DontDelete|ReadOnly, 0 },
    { "externalResourcesRequired", (intptr_t)JSSVGGradientElement::ExternalResourcesRequiredAttrNum, DontDelete|ReadOnly, 0 },
    { "className", (intptr_t)JSSVGGradientElement::ClassNameAttrNum, DontDelete|ReadOnly, 0 },
    { "style", (intptr_t)JSSVGGradientElement::StyleAttrNum, DontDelete|ReadOnly, 0 },
    { "constructor", (intptr_t)JSSVGGradientElement::ConstructorAttrNum, DontEnum, 0 },
    { 0, 0, 0, 0 }
};

static const HashTable JSSVGGradientElementTable = { 15, JSSVGGradientElementTableValues, 0 };

/* Hash table for constructor */

static const HashTableValue JSSVGGradientElementConstructorTableValues[5] =
{
    { "SVG_SPREADMETHOD_UNKNOWN", (intptr_t)0, DontDelete|ReadOnly, 0 },
    { "SVG_SPREADMETHOD_PAD", (intptr_t)1, DontDelete|ReadOnly, 0 },
    { "SVG_SPREADMETHOD_REFLECT", (intptr_t)2, DontDelete|ReadOnly, 0 },
    { "SVG_SPREADMETHOD_REPEAT", (intptr_t)3, DontDelete|ReadOnly, 0 },
    { 0, 0, 0, 0 }
};

static const HashTable JSSVGGradientElementConstructorTable = { 7, JSSVGGradientElementConstructorTableValues, 0 };

class JSSVGGradientElementConstructor : public DOMObject {
public:
    JSSVGGradientElementConstructor(ExecState* exec)
        : DOMObject(exec->lexicalGlobalObject()->objectPrototype())
    {
        putDirect(exec->propertyNames().prototype, JSSVGGradientElementPrototype::self(exec), None);
    }
    virtual bool getOwnPropertySlot(ExecState*, const Identifier&, PropertySlot&);
    JSValue* getValueProperty(ExecState*, int token) const;
    virtual const ClassInfo* classInfo() const { return &s_info; }
    static const ClassInfo s_info;

    virtual bool implementsHasInstance() const { return true; }
};

const ClassInfo JSSVGGradientElementConstructor::s_info = { "SVGGradientElementConstructor", 0, &JSSVGGradientElementConstructorTable, 0 };

bool JSSVGGradientElementConstructor::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSSVGGradientElementConstructor, DOMObject>(exec, &JSSVGGradientElementConstructorTable, this, propertyName, slot);
}

JSValue* JSSVGGradientElementConstructor::getValueProperty(ExecState* exec, int token) const
{
    // The token is the numeric value of its associated constant
    return jsNumber(exec, token);
}

/* Hash table for prototype */

static const HashTableValue JSSVGGradientElementPrototypeTableValues[6] =
{
    { "SVG_SPREADMETHOD_UNKNOWN", (intptr_t)0, DontDelete|ReadOnly, 0 },
    { "SVG_SPREADMETHOD_PAD", (intptr_t)1, DontDelete|ReadOnly, 0 },
    { "SVG_SPREADMETHOD_REFLECT", (intptr_t)2, DontDelete|ReadOnly, 0 },
    { "SVG_SPREADMETHOD_REPEAT", (intptr_t)3, DontDelete|ReadOnly, 0 },
    { "getPresentationAttribute", (intptr_t)jsSVGGradientElementPrototypeFunctionGetPresentationAttribute, DontDelete|Function, 1 },
    { 0, 0, 0, 0 }
};

static const HashTable JSSVGGradientElementPrototypeTable = { 31, JSSVGGradientElementPrototypeTableValues, 0 };

const ClassInfo JSSVGGradientElementPrototype::s_info = { "SVGGradientElementPrototype", 0, &JSSVGGradientElementPrototypeTable, 0 };

JSObject* JSSVGGradientElementPrototype::self(ExecState* exec)
{
    static const Identifier* prototypeIdentifier = new Identifier(exec, "[[JSSVGGradientElement.prototype]]");
    return JSC::cacheGlobalObject<JSSVGGradientElementPrototype>(exec, *prototypeIdentifier);
}

bool JSSVGGradientElementPrototype::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticPropertySlot<JSSVGGradientElementPrototype, JSObject>(exec, &JSSVGGradientElementPrototypeTable, this, propertyName, slot);
}

JSValue* JSSVGGradientElementPrototype::getValueProperty(ExecState* exec, int token) const
{
    // The token is the numeric value of its associated constant
    return jsNumber(exec, token);
}

const ClassInfo JSSVGGradientElement::s_info = { "SVGGradientElement", &JSSVGElement::s_info, &JSSVGGradientElementTable , 0 };

JSSVGGradientElement::JSSVGGradientElement(JSObject* prototype, SVGGradientElement* impl)
    : JSSVGElement(prototype, impl)
{
}

bool JSSVGGradientElement::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSSVGGradientElement, Base>(exec, &JSSVGGradientElementTable, this, propertyName, slot);
}

JSValue* JSSVGGradientElement::getValueProperty(ExecState* exec, int token) const
{
    switch (token) {
    case GradientUnitsAttrNum: {
        SVGGradientElement* imp = static_cast<SVGGradientElement*>(impl());
        RefPtr<SVGAnimatedEnumeration> obj = imp->gradientUnitsAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case GradientTransformAttrNum: {
        SVGGradientElement* imp = static_cast<SVGGradientElement*>(impl());
        RefPtr<SVGAnimatedTransformList> obj = imp->gradientTransformAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case SpreadMethodAttrNum: {
        SVGGradientElement* imp = static_cast<SVGGradientElement*>(impl());
        RefPtr<SVGAnimatedEnumeration> obj = imp->spreadMethodAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case HrefAttrNum: {
        SVGGradientElement* imp = static_cast<SVGGradientElement*>(impl());
        RefPtr<SVGAnimatedString> obj = imp->hrefAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case ExternalResourcesRequiredAttrNum: {
        SVGGradientElement* imp = static_cast<SVGGradientElement*>(impl());
        RefPtr<SVGAnimatedBoolean> obj = imp->externalResourcesRequiredAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case ClassNameAttrNum: {
        SVGGradientElement* imp = static_cast<SVGGradientElement*>(impl());
        RefPtr<SVGAnimatedString> obj = imp->classNameAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case StyleAttrNum: {
        SVGGradientElement* imp = static_cast<SVGGradientElement*>(impl());
        return toJS(exec, WTF::getPtr(imp->style()));
    }
    case ConstructorAttrNum:
        return getConstructor(exec);
    }
    return 0;
}

JSValue* JSSVGGradientElement::getConstructor(ExecState* exec)
{
    static const Identifier* constructorIdentifier = new Identifier(exec, "[[SVGGradientElement.constructor]]");
    return JSC::cacheGlobalObject<JSSVGGradientElementConstructor>(exec, *constructorIdentifier);
}

JSValue* jsSVGGradientElementPrototypeFunctionGetPresentationAttribute(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGGradientElement::s_info))
        return throwError(exec, TypeError);
    JSSVGGradientElement* castedThisObj = static_cast<JSSVGGradientElement*>(thisValue);
    SVGGradientElement* imp = static_cast<SVGGradientElement*>(castedThisObj->impl());
    const UString& name = args.at(exec, 0)->toString(exec);


    JSC::JSValue* result = toJS(exec, WTF::getPtr(imp->getPresentationAttribute(name)));
    return result;
}


}

#endif // ENABLE(SVG)
