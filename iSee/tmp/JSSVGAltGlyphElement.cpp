/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"


#if ENABLE(SVG) && ENABLE(SVG_FONTS)

#include "Document.h"
#include "Frame.h"
#include "SVGDocumentExtensions.h"
#include "SVGElement.h"
#include "SVGAnimatedTemplate.h"
#include "JSSVGAltGlyphElement.h"

#include <wtf/GetPtr.h>

#include "JSSVGAnimatedString.h"
#include "KURL.h"
#include "SVGAltGlyphElement.h"

#include <kjs/JSString.h>

using namespace JSC;

namespace WebCore {

ASSERT_CLASS_FITS_IN_CELL(JSSVGAltGlyphElement)

/* Hash table */

static const HashTableValue JSSVGAltGlyphElementTableValues[4] =
{
    { "glyphRef", (intptr_t)JSSVGAltGlyphElement::GlyphRefAttrNum, DontDelete, 0 },
    { "format", (intptr_t)JSSVGAltGlyphElement::FormatAttrNum, DontDelete, 0 },
    { "href", (intptr_t)JSSVGAltGlyphElement::HrefAttrNum, DontDelete|ReadOnly, 0 },
    { 0, 0, 0, 0 }
};

static const HashTable JSSVGAltGlyphElementTable = { 3, JSSVGAltGlyphElementTableValues, 0 };

/* Hash table for prototype */

static const HashTableValue JSSVGAltGlyphElementPrototypeTableValues[1] =
{
    { 0, 0, 0, 0 }
};

static const HashTable JSSVGAltGlyphElementPrototypeTable = { 0, JSSVGAltGlyphElementPrototypeTableValues, 0 };

const ClassInfo JSSVGAltGlyphElementPrototype::s_info = { "SVGAltGlyphElementPrototype", 0, &JSSVGAltGlyphElementPrototypeTable, 0 };

JSObject* JSSVGAltGlyphElementPrototype::self(ExecState* exec)
{
    static const Identifier* prototypeIdentifier = new Identifier(exec, "[[JSSVGAltGlyphElement.prototype]]");
    return JSC::cacheGlobalObject<JSSVGAltGlyphElementPrototype>(exec, *prototypeIdentifier);
}

const ClassInfo JSSVGAltGlyphElement::s_info = { "SVGAltGlyphElement", &JSSVGTextPositioningElement::s_info, &JSSVGAltGlyphElementTable , 0 };

JSSVGAltGlyphElement::JSSVGAltGlyphElement(JSObject* prototype, SVGAltGlyphElement* impl)
    : JSSVGTextPositioningElement(prototype, impl)
{
}

bool JSSVGAltGlyphElement::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSSVGAltGlyphElement, Base>(exec, &JSSVGAltGlyphElementTable, this, propertyName, slot);
}

JSValue* JSSVGAltGlyphElement::getValueProperty(ExecState* exec, int token) const
{
    switch (token) {
    case GlyphRefAttrNum: {
        SVGAltGlyphElement* imp = static_cast<SVGAltGlyphElement*>(impl());
        return jsString(exec, imp->glyphRef());
    }
    case FormatAttrNum: {
        SVGAltGlyphElement* imp = static_cast<SVGAltGlyphElement*>(impl());
        return jsString(exec, imp->format());
    }
    case HrefAttrNum: {
        SVGAltGlyphElement* imp = static_cast<SVGAltGlyphElement*>(impl());
        RefPtr<SVGAnimatedString> obj = imp->hrefAnimated();
        return toJS(exec, obj.get(), imp);
    }
    }
    return 0;
}

void JSSVGAltGlyphElement::put(ExecState* exec, const Identifier& propertyName, JSValue* value, PutPropertySlot& slot)
{
    lookupPut<JSSVGAltGlyphElement, Base>(exec, propertyName, value, &JSSVGAltGlyphElementTable, this, slot);
}

void JSSVGAltGlyphElement::putValueProperty(ExecState* exec, int token, JSValue* value)
{
    switch (token) {
    case GlyphRefAttrNum: {
        SVGAltGlyphElement* imp = static_cast<SVGAltGlyphElement*>(impl());
        ExceptionCode ec = 0;
        imp->setGlyphRef(value->toString(exec), ec);
        setDOMException(exec, ec);
        break;
    }
    case FormatAttrNum: {
        SVGAltGlyphElement* imp = static_cast<SVGAltGlyphElement*>(impl());
        ExceptionCode ec = 0;
        imp->setFormat(value->toString(exec), ec);
        setDOMException(exec, ec);
        break;
    }
    }
}


}

#endif // ENABLE(SVG) && ENABLE(SVG_FONTS)
