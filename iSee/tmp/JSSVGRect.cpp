/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"


#if ENABLE(SVG)

#include "Document.h"
#include "Frame.h"
#include "SVGDocumentExtensions.h"
#include "SVGElement.h"
#include "SVGAnimatedTemplate.h"
#include "JSSVGRect.h"

#include <wtf/GetPtr.h>


#include <kjs/JSNumberCell.h>

using namespace JSC;

namespace WebCore {

ASSERT_CLASS_FITS_IN_CELL(JSSVGRect)

/* Hash table */

static const HashTableValue JSSVGRectTableValues[5] =
{
    { "x", (intptr_t)JSSVGRect::XAttrNum, DontDelete, 0 },
    { "y", (intptr_t)JSSVGRect::YAttrNum, DontDelete, 0 },
    { "width", (intptr_t)JSSVGRect::WidthAttrNum, DontDelete, 0 },
    { "height", (intptr_t)JSSVGRect::HeightAttrNum, DontDelete, 0 },
    { 0, 0, 0, 0 }
};

static const HashTable JSSVGRectTable = { 15, JSSVGRectTableValues, 0 };

/* Hash table for prototype */

static const HashTableValue JSSVGRectPrototypeTableValues[1] =
{
    { 0, 0, 0, 0 }
};

static const HashTable JSSVGRectPrototypeTable = { 0, JSSVGRectPrototypeTableValues, 0 };

const ClassInfo JSSVGRectPrototype::s_info = { "SVGRectPrototype", 0, &JSSVGRectPrototypeTable, 0 };

JSObject* JSSVGRectPrototype::self(ExecState* exec)
{
    static const Identifier* prototypeIdentifier = new Identifier(exec, "[[JSSVGRect.prototype]]");
    return JSC::cacheGlobalObject<JSSVGRectPrototype>(exec, *prototypeIdentifier);
}

const ClassInfo JSSVGRect::s_info = { "SVGRect", 0, &JSSVGRectTable , 0 };

JSSVGRect::JSSVGRect(JSObject* prototype, JSSVGPODTypeWrapper<FloatRect>* impl, SVGElement* context)
    : DOMObject(prototype)
    , m_context(context)
    , m_impl(impl)
{
}

JSSVGRect::~JSSVGRect()
{
    JSSVGDynamicPODTypeWrapperCache<FloatRect, SVGAnimatedRect>::forgetWrapper(m_impl.get());
    ScriptInterpreter::forgetDOMObject(m_impl.get());

}

bool JSSVGRect::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSSVGRect, Base>(exec, &JSSVGRectTable, this, propertyName, slot);
}

JSValue* JSSVGRect::getValueProperty(ExecState* exec, int token) const
{
    switch (token) {
    case XAttrNum: {
        FloatRect imp(*impl());
        return jsNumber(exec, imp.x());
    }
    case YAttrNum: {
        FloatRect imp(*impl());
        return jsNumber(exec, imp.y());
    }
    case WidthAttrNum: {
        FloatRect imp(*impl());
        return jsNumber(exec, imp.width());
    }
    case HeightAttrNum: {
        FloatRect imp(*impl());
        return jsNumber(exec, imp.height());
    }
    }
    return 0;
}

void JSSVGRect::put(ExecState* exec, const Identifier& propertyName, JSValue* value, PutPropertySlot& slot)
{
    lookupPut<JSSVGRect, Base>(exec, propertyName, value, &JSSVGRectTable, this, slot);
}

void JSSVGRect::putValueProperty(ExecState* exec, int token, JSValue* value)
{
    switch (token) {
    case XAttrNum: {
        FloatRect imp(*impl());
        imp.setX(value->toFloat(exec));
        m_impl->commitChange(imp, context());
        break;
    }
    case YAttrNum: {
        FloatRect imp(*impl());
        imp.setY(value->toFloat(exec));
        m_impl->commitChange(imp, context());
        break;
    }
    case WidthAttrNum: {
        FloatRect imp(*impl());
        imp.setWidth(value->toFloat(exec));
        m_impl->commitChange(imp, context());
        break;
    }
    case HeightAttrNum: {
        FloatRect imp(*impl());
        imp.setHeight(value->toFloat(exec));
        m_impl->commitChange(imp, context());
        break;
    }
    }
}

JSC::JSValue* toJS(JSC::ExecState* exec, JSSVGPODTypeWrapper<FloatRect>* obj, SVGElement* context)
{
    return cacheSVGDOMObject<JSSVGPODTypeWrapper<FloatRect>, JSSVGRect, JSSVGRectPrototype>(exec, obj, context);
}
FloatRect toSVGRect(JSC::JSValue* val)
{
    return val->isObject(&JSSVGRect::s_info) ? (FloatRect) *static_cast<JSSVGRect*>(val)->impl() : FloatRect();
}

}

#endif // ENABLE(SVG)
