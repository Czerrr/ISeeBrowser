/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"


#if ENABLE(SVG)

#include "Document.h"
#include "Frame.h"
#include "SVGDocumentExtensions.h"
#include "SVGElement.h"
#include "SVGAnimatedTemplate.h"
#include "JSSVGFilterPrimitiveStandardAttributes.h"

#include <wtf/GetPtr.h>

#include "JSSVGAnimatedLength.h"
#include "JSSVGAnimatedString.h"
#include "SVGFilterPrimitiveStandardAttributes.h"


using namespace JSC;

namespace WebCore {

ASSERT_CLASS_FITS_IN_CELL(JSSVGFilterPrimitiveStandardAttributes)

/* Hash table */

static const HashTableValue JSSVGFilterPrimitiveStandardAttributesTableValues[6] =
{
    { "x", (intptr_t)JSSVGFilterPrimitiveStandardAttributes::XAttrNum, DontDelete|ReadOnly, 0 },
    { "y", (intptr_t)JSSVGFilterPrimitiveStandardAttributes::YAttrNum, DontDelete|ReadOnly, 0 },
    { "width", (intptr_t)JSSVGFilterPrimitiveStandardAttributes::WidthAttrNum, DontDelete|ReadOnly, 0 },
    { "height", (intptr_t)JSSVGFilterPrimitiveStandardAttributes::HeightAttrNum, DontDelete|ReadOnly, 0 },
    { "result", (intptr_t)JSSVGFilterPrimitiveStandardAttributes::ResultAttrNum, DontDelete|ReadOnly, 0 },
    { 0, 0, 0, 0 }
};

static const HashTable JSSVGFilterPrimitiveStandardAttributesTable = { 15, JSSVGFilterPrimitiveStandardAttributesTableValues, 0 };

/* Hash table for prototype */

static const HashTableValue JSSVGFilterPrimitiveStandardAttributesPrototypeTableValues[1] =
{
    { 0, 0, 0, 0 }
};

static const HashTable JSSVGFilterPrimitiveStandardAttributesPrototypeTable = { 0, JSSVGFilterPrimitiveStandardAttributesPrototypeTableValues, 0 };

const ClassInfo JSSVGFilterPrimitiveStandardAttributesPrototype::s_info = { "SVGFilterPrimitiveStandardAttributesPrototype", 0, &JSSVGFilterPrimitiveStandardAttributesPrototypeTable, 0 };

JSObject* JSSVGFilterPrimitiveStandardAttributesPrototype::self(ExecState* exec)
{
    static const Identifier* prototypeIdentifier = new Identifier(exec, "[[JSSVGFilterPrimitiveStandardAttributes.prototype]]");
    return JSC::cacheGlobalObject<JSSVGFilterPrimitiveStandardAttributesPrototype>(exec, *prototypeIdentifier);
}

const ClassInfo JSSVGFilterPrimitiveStandardAttributes::s_info = { "SVGFilterPrimitiveStandardAttributes", &JSSVGStylable::s_info, &JSSVGFilterPrimitiveStandardAttributesTable , 0 };

JSSVGFilterPrimitiveStandardAttributes::JSSVGFilterPrimitiveStandardAttributes(JSObject* prototype, SVGFilterPrimitiveStandardAttributes* impl, SVGElement* context)
    : JSSVGStylable(prototype, impl, context)
{
}

bool JSSVGFilterPrimitiveStandardAttributes::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSSVGFilterPrimitiveStandardAttributes, Base>(exec, &JSSVGFilterPrimitiveStandardAttributesTable, this, propertyName, slot);
}

JSValue* JSSVGFilterPrimitiveStandardAttributes::getValueProperty(ExecState* exec, int token) const
{
    switch (token) {
    case XAttrNum: {
        SVGFilterPrimitiveStandardAttributes* imp = static_cast<SVGFilterPrimitiveStandardAttributes*>(impl());
        RefPtr<SVGAnimatedLength> obj = imp->xAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case YAttrNum: {
        SVGFilterPrimitiveStandardAttributes* imp = static_cast<SVGFilterPrimitiveStandardAttributes*>(impl());
        RefPtr<SVGAnimatedLength> obj = imp->yAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case WidthAttrNum: {
        SVGFilterPrimitiveStandardAttributes* imp = static_cast<SVGFilterPrimitiveStandardAttributes*>(impl());
        RefPtr<SVGAnimatedLength> obj = imp->widthAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case HeightAttrNum: {
        SVGFilterPrimitiveStandardAttributes* imp = static_cast<SVGFilterPrimitiveStandardAttributes*>(impl());
        RefPtr<SVGAnimatedLength> obj = imp->heightAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case ResultAttrNum: {
        SVGFilterPrimitiveStandardAttributes* imp = static_cast<SVGFilterPrimitiveStandardAttributes*>(impl());
        RefPtr<SVGAnimatedString> obj = imp->resultAnimated();
        return toJS(exec, obj.get(), imp);
    }
    }
    return 0;
}


}

#endif // ENABLE(SVG)
