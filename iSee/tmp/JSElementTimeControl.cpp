/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"


#if ENABLE(SVG)

#include "JSElementTimeControl.h"

#include <wtf/GetPtr.h>

#include "ElementTimeControl.h"

#include <kjs/Error.h>

using namespace JSC;

namespace WebCore {

ASSERT_CLASS_FITS_IN_CELL(JSElementTimeControl)

/* Hash table for prototype */

static const HashTableValue JSElementTimeControlPrototypeTableValues[5] =
{
    { "beginElement", (intptr_t)jsElementTimeControlPrototypeFunctionBeginElement, DontDelete|Function, 0 },
    { "beginElementAt", (intptr_t)jsElementTimeControlPrototypeFunctionBeginElementAt, DontDelete|Function, 1 },
    { "endElement", (intptr_t)jsElementTimeControlPrototypeFunctionEndElement, DontDelete|Function, 0 },
    { "endElementAt", (intptr_t)jsElementTimeControlPrototypeFunctionEndElementAt, DontDelete|Function, 1 },
    { 0, 0, 0, 0 }
};

static const HashTable JSElementTimeControlPrototypeTable = { 63, JSElementTimeControlPrototypeTableValues, 0 };

const ClassInfo JSElementTimeControlPrototype::s_info = { "ElementTimeControlPrototype", 0, &JSElementTimeControlPrototypeTable, 0 };

JSObject* JSElementTimeControlPrototype::self(ExecState* exec)
{
    static const Identifier* prototypeIdentifier = new Identifier(exec, "[[JSElementTimeControl.prototype]]");
    return JSC::cacheGlobalObject<JSElementTimeControlPrototype>(exec, *prototypeIdentifier);
}

bool JSElementTimeControlPrototype::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticFunctionSlot<JSObject>(exec, &JSElementTimeControlPrototypeTable, this, propertyName, slot);
}

const ClassInfo JSElementTimeControl::s_info = { "ElementTimeControl", 0, 0 , 0 };

JSElementTimeControl::JSElementTimeControl(JSObject* prototype, ElementTimeControl* impl)
    : DOMObject(prototype)
    , m_impl(impl)
{
}

JSElementTimeControl::~JSElementTimeControl()
{
    ScriptInterpreter::forgetDOMObject(m_impl.get());

}

JSValue* jsElementTimeControlPrototypeFunctionBeginElement(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSElementTimeControl::s_info))
        return throwError(exec, TypeError);
    JSElementTimeControl* castedThisObj = static_cast<JSElementTimeControl*>(thisValue);
    ElementTimeControl* imp = static_cast<ElementTimeControl*>(castedThisObj->impl());
    ExceptionCode ec = 0;


    JSC::JSValue* result = jsBoolean(imp->beginElement(ec));
    setDOMException(exec, ec);
    return result;
}

JSValue* jsElementTimeControlPrototypeFunctionBeginElementAt(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSElementTimeControl::s_info))
        return throwError(exec, TypeError);
    JSElementTimeControl* castedThisObj = static_cast<JSElementTimeControl*>(thisValue);
    ElementTimeControl* imp = static_cast<ElementTimeControl*>(castedThisObj->impl());
    ExceptionCode ec = 0;
    float offset = args.at(exec, 0)->toFloat(exec);


    JSC::JSValue* result = jsBoolean(imp->beginElementAt(offset, ec));
    setDOMException(exec, ec);
    return result;
}

JSValue* jsElementTimeControlPrototypeFunctionEndElement(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSElementTimeControl::s_info))
        return throwError(exec, TypeError);
    JSElementTimeControl* castedThisObj = static_cast<JSElementTimeControl*>(thisValue);
    ElementTimeControl* imp = static_cast<ElementTimeControl*>(castedThisObj->impl());
    ExceptionCode ec = 0;


    JSC::JSValue* result = jsBoolean(imp->endElement(ec));
    setDOMException(exec, ec);
    return result;
}

JSValue* jsElementTimeControlPrototypeFunctionEndElementAt(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSElementTimeControl::s_info))
        return throwError(exec, TypeError);
    JSElementTimeControl* castedThisObj = static_cast<JSElementTimeControl*>(thisValue);
    ElementTimeControl* imp = static_cast<ElementTimeControl*>(castedThisObj->impl());
    ExceptionCode ec = 0;
    float offset = args.at(exec, 0)->toFloat(exec);


    JSC::JSValue* result = jsBoolean(imp->endElementAt(offset, ec));
    setDOMException(exec, ec);
    return result;
}

JSC::JSValue* toJS(JSC::ExecState* exec, ElementTimeControl* obj)
{
    return cacheDOMObject<ElementTimeControl, JSElementTimeControl, JSElementTimeControlPrototype>(exec, obj);
}
ElementTimeControl* toElementTimeControl(JSC::JSValue* val)
{
    return val->isObject(&JSElementTimeControl::s_info) ? static_cast<JSElementTimeControl*>(val)->impl() : 0;
}

}

#endif // ENABLE(SVG)
