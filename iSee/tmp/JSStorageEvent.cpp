/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#include "JSStorageEvent.h"

#include <wtf/GetPtr.h>

#include "DOMWindow.h"
#include "JSDOMWindow.h"
#include "KURL.h"
#include "StorageEvent.h"

#include <kjs/Error.h>
#include <kjs/JSNumberCell.h>
#include <kjs/JSString.h>

using namespace JSC;

namespace WebCore {

ASSERT_CLASS_FITS_IN_CELL(JSStorageEvent)

/* Hash table */

static const HashTableValue JSStorageEventTableValues[7] =
{
    { "key", (intptr_t)JSStorageEvent::KeyAttrNum, DontDelete|ReadOnly, 0 },
    { "oldValue", (intptr_t)JSStorageEvent::OldValueAttrNum, DontDelete|ReadOnly, 0 },
    { "newValue", (intptr_t)JSStorageEvent::NewValueAttrNum, DontDelete|ReadOnly, 0 },
    { "uri", (intptr_t)JSStorageEvent::UriAttrNum, DontDelete|ReadOnly, 0 },
    { "source", (intptr_t)JSStorageEvent::SourceAttrNum, DontDelete|ReadOnly, 0 },
    { "constructor", (intptr_t)JSStorageEvent::ConstructorAttrNum, DontEnum, 0 },
    { 0, 0, 0, 0 }
};

static const HashTable JSStorageEventTable = { 31, JSStorageEventTableValues, 0 };

/* Hash table for constructor */

static const HashTableValue JSStorageEventConstructorTableValues[1] =
{
    { 0, 0, 0, 0 }
};

static const HashTable JSStorageEventConstructorTable = { 0, JSStorageEventConstructorTableValues, 0 };

class JSStorageEventConstructor : public DOMObject {
public:
    JSStorageEventConstructor(ExecState* exec)
        : DOMObject(exec->lexicalGlobalObject()->objectPrototype())
    {
        putDirect(exec->propertyNames().prototype, JSStorageEventPrototype::self(exec), None);
    }
    virtual bool getOwnPropertySlot(ExecState*, const Identifier&, PropertySlot&);
    JSValue* getValueProperty(ExecState*, int token) const;
    virtual const ClassInfo* classInfo() const { return &s_info; }
    static const ClassInfo s_info;

    virtual bool implementsHasInstance() const { return true; }
};

const ClassInfo JSStorageEventConstructor::s_info = { "StorageEventConstructor", 0, &JSStorageEventConstructorTable, 0 };

bool JSStorageEventConstructor::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSStorageEventConstructor, DOMObject>(exec, &JSStorageEventConstructorTable, this, propertyName, slot);
}

JSValue* JSStorageEventConstructor::getValueProperty(ExecState* exec, int token) const
{
    // The token is the numeric value of its associated constant
    return jsNumber(exec, token);
}

/* Hash table for prototype */

static const HashTableValue JSStorageEventPrototypeTableValues[2] =
{
    { "initStorageEvent", (intptr_t)jsStorageEventPrototypeFunctionInitStorageEvent, DontDelete|Function, 8 },
    { 0, 0, 0, 0 }
};

static const HashTable JSStorageEventPrototypeTable = { 0, JSStorageEventPrototypeTableValues, 0 };

const ClassInfo JSStorageEventPrototype::s_info = { "StorageEventPrototype", 0, &JSStorageEventPrototypeTable, 0 };

JSObject* JSStorageEventPrototype::self(ExecState* exec)
{
    static const Identifier* prototypeIdentifier = new Identifier(exec, "[[JSStorageEvent.prototype]]");
    return JSC::cacheGlobalObject<JSStorageEventPrototype>(exec, *prototypeIdentifier);
}

bool JSStorageEventPrototype::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticFunctionSlot<JSObject>(exec, &JSStorageEventPrototypeTable, this, propertyName, slot);
}

const ClassInfo JSStorageEvent::s_info = { "StorageEvent", &JSEvent::s_info, &JSStorageEventTable , 0 };

JSStorageEvent::JSStorageEvent(JSObject* prototype, StorageEvent* impl)
    : JSEvent(prototype, impl)
{
}

bool JSStorageEvent::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSStorageEvent, Base>(exec, &JSStorageEventTable, this, propertyName, slot);
}

JSValue* JSStorageEvent::getValueProperty(ExecState* exec, int token) const
{
    switch (token) {
    case KeyAttrNum: {
        StorageEvent* imp = static_cast<StorageEvent*>(impl());
        return jsString(exec, imp->key());
    }
    case OldValueAttrNum: {
        StorageEvent* imp = static_cast<StorageEvent*>(impl());
        return jsStringOrNull(exec, imp->oldValue());
    }
    case NewValueAttrNum: {
        StorageEvent* imp = static_cast<StorageEvent*>(impl());
        return jsStringOrNull(exec, imp->newValue());
    }
    case UriAttrNum: {
        StorageEvent* imp = static_cast<StorageEvent*>(impl());
        return jsString(exec, imp->uri());
    }
    case SourceAttrNum: {
        StorageEvent* imp = static_cast<StorageEvent*>(impl());
        return toJS(exec, WTF::getPtr(imp->source()));
    }
    case ConstructorAttrNum:
        return getConstructor(exec);
    }
    return 0;
}

JSValue* JSStorageEvent::getConstructor(ExecState* exec)
{
    static const Identifier* constructorIdentifier = new Identifier(exec, "[[StorageEvent.constructor]]");
    return JSC::cacheGlobalObject<JSStorageEventConstructor>(exec, *constructorIdentifier);
}

JSValue* jsStorageEventPrototypeFunctionInitStorageEvent(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSStorageEvent::s_info))
        return throwError(exec, TypeError);
    JSStorageEvent* castedThisObj = static_cast<JSStorageEvent*>(thisValue);
    StorageEvent* imp = static_cast<StorageEvent*>(castedThisObj->impl());
    const UString& typeArg = args.at(exec, 0)->toString(exec);
    bool canBubbleArg = args.at(exec, 1)->toBoolean(exec);
    bool cancelableArg = args.at(exec, 2)->toBoolean(exec);
    const UString& keyArg = args.at(exec, 3)->toString(exec);
    const UString& oldValueArg = args.at(exec, 4)->toString(exec);
    const UString& newValueArg = args.at(exec, 5)->toString(exec);
    const UString& uriArg = args.at(exec, 6)->toString(exec);
    DOMWindow* sourceArg = toDOMWindow(args.at(exec, 7));

    imp->initStorageEvent(typeArg, canBubbleArg, cancelableArg, keyArg, oldValueArg, newValueArg, uriArg, sourceArg);
    return jsUndefined();
}


}
