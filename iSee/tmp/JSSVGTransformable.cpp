/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"


#if ENABLE(SVG)

#include "Document.h"
#include "Frame.h"
#include "SVGDocumentExtensions.h"
#include "SVGElement.h"
#include "SVGAnimatedTemplate.h"
#include "JSSVGTransformable.h"

#include <wtf/GetPtr.h>

#include "JSSVGAnimatedTransformList.h"
#include "SVGTransformable.h"


using namespace JSC;

namespace WebCore {

ASSERT_CLASS_FITS_IN_CELL(JSSVGTransformable)

/* Hash table */

static const HashTableValue JSSVGTransformableTableValues[2] =
{
    { "transform", (intptr_t)JSSVGTransformable::TransformAttrNum, DontDelete|ReadOnly, 0 },
    { 0, 0, 0, 0 }
};

static const HashTable JSSVGTransformableTable = { 0, JSSVGTransformableTableValues, 0 };

/* Hash table for prototype */

static const HashTableValue JSSVGTransformablePrototypeTableValues[1] =
{
    { 0, 0, 0, 0 }
};

static const HashTable JSSVGTransformablePrototypeTable = { 0, JSSVGTransformablePrototypeTableValues, 0 };

const ClassInfo JSSVGTransformablePrototype::s_info = { "SVGTransformablePrototype", 0, &JSSVGTransformablePrototypeTable, 0 };

JSObject* JSSVGTransformablePrototype::self(ExecState* exec)
{
    static const Identifier* prototypeIdentifier = new Identifier(exec, "[[JSSVGTransformable.prototype]]");
    return JSC::cacheGlobalObject<JSSVGTransformablePrototype>(exec, *prototypeIdentifier);
}

const ClassInfo JSSVGTransformable::s_info = { "SVGTransformable", &JSSVGLocatable::s_info, &JSSVGTransformableTable , 0 };

JSSVGTransformable::JSSVGTransformable(JSObject* prototype, SVGTransformable* impl, SVGElement* context)
    : JSSVGLocatable(prototype, impl, context)
{
}

bool JSSVGTransformable::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSSVGTransformable, Base>(exec, &JSSVGTransformableTable, this, propertyName, slot);
}

JSValue* JSSVGTransformable::getValueProperty(ExecState* exec, int token) const
{
    switch (token) {
    case TransformAttrNum: {
        SVGTransformable* imp = static_cast<SVGTransformable*>(impl());
        RefPtr<SVGAnimatedTransformList> obj = imp->transformAnimated();
        return toJS(exec, obj.get(), imp);
    }
    }
    return 0;
}


}

#endif // ENABLE(SVG)
