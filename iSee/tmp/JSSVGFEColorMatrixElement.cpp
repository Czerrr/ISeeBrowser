/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"


#if ENABLE(SVG) && ENABLE(SVG_FILTERS)

#include "Document.h"
#include "Frame.h"
#include "SVGDocumentExtensions.h"
#include "SVGElement.h"
#include "SVGAnimatedTemplate.h"
#include "JSSVGFEColorMatrixElement.h"

#include <wtf/GetPtr.h>

#include "CSSMutableStyleDeclaration.h"
#include "CSSStyleDeclaration.h"
#include "CSSValue.h"
#include "JSCSSStyleDeclaration.h"
#include "JSCSSValue.h"
#include "JSSVGAnimatedEnumeration.h"
#include "JSSVGAnimatedLength.h"
#include "JSSVGAnimatedNumberList.h"
#include "JSSVGAnimatedString.h"
#include "SVGFEColorMatrixElement.h"

#include <kjs/Error.h>
#include <kjs/JSNumberCell.h>

using namespace JSC;

namespace WebCore {

ASSERT_CLASS_FITS_IN_CELL(JSSVGFEColorMatrixElement)

/* Hash table */

static const HashTableValue JSSVGFEColorMatrixElementTableValues[12] =
{
    { "in1", (intptr_t)JSSVGFEColorMatrixElement::In1AttrNum, DontDelete|ReadOnly, 0 },
    { "type", (intptr_t)JSSVGFEColorMatrixElement::TypeAttrNum, DontDelete|ReadOnly, 0 },
    { "values", (intptr_t)JSSVGFEColorMatrixElement::ValuesAttrNum, DontDelete|ReadOnly, 0 },
    { "x", (intptr_t)JSSVGFEColorMatrixElement::XAttrNum, DontDelete|ReadOnly, 0 },
    { "y", (intptr_t)JSSVGFEColorMatrixElement::YAttrNum, DontDelete|ReadOnly, 0 },
    { "width", (intptr_t)JSSVGFEColorMatrixElement::WidthAttrNum, DontDelete|ReadOnly, 0 },
    { "height", (intptr_t)JSSVGFEColorMatrixElement::HeightAttrNum, DontDelete|ReadOnly, 0 },
    { "result", (intptr_t)JSSVGFEColorMatrixElement::ResultAttrNum, DontDelete|ReadOnly, 0 },
    { "className", (intptr_t)JSSVGFEColorMatrixElement::ClassNameAttrNum, DontDelete|ReadOnly, 0 },
    { "style", (intptr_t)JSSVGFEColorMatrixElement::StyleAttrNum, DontDelete|ReadOnly, 0 },
    { "constructor", (intptr_t)JSSVGFEColorMatrixElement::ConstructorAttrNum, DontEnum, 0 },
    { 0, 0, 0, 0 }
};

static const HashTable JSSVGFEColorMatrixElementTable = { 255, JSSVGFEColorMatrixElementTableValues, 0 };

/* Hash table for constructor */

static const HashTableValue JSSVGFEColorMatrixElementConstructorTableValues[6] =
{
    { "SVG_FECOLORMATRIX_TYPE_UNKNOWN", (intptr_t)0, DontDelete|ReadOnly, 0 },
    { "SVG_FECOLORMATRIX_TYPE_MATRIX", (intptr_t)1, DontDelete|ReadOnly, 0 },
    { "SVG_FECOLORMATRIX_TYPE_SATURATE", (intptr_t)2, DontDelete|ReadOnly, 0 },
    { "SVG_FECOLORMATRIX_TYPE_HUEROTATE", (intptr_t)3, DontDelete|ReadOnly, 0 },
    { "SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA", (intptr_t)4, DontDelete|ReadOnly, 0 },
    { 0, 0, 0, 0 }
};

static const HashTable JSSVGFEColorMatrixElementConstructorTable = { 63, JSSVGFEColorMatrixElementConstructorTableValues, 0 };

class JSSVGFEColorMatrixElementConstructor : public DOMObject {
public:
    JSSVGFEColorMatrixElementConstructor(ExecState* exec)
        : DOMObject(exec->lexicalGlobalObject()->objectPrototype())
    {
        putDirect(exec->propertyNames().prototype, JSSVGFEColorMatrixElementPrototype::self(exec), None);
    }
    virtual bool getOwnPropertySlot(ExecState*, const Identifier&, PropertySlot&);
    JSValue* getValueProperty(ExecState*, int token) const;
    virtual const ClassInfo* classInfo() const { return &s_info; }
    static const ClassInfo s_info;

    virtual bool implementsHasInstance() const { return true; }
};

const ClassInfo JSSVGFEColorMatrixElementConstructor::s_info = { "SVGFEColorMatrixElementConstructor", 0, &JSSVGFEColorMatrixElementConstructorTable, 0 };

bool JSSVGFEColorMatrixElementConstructor::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSSVGFEColorMatrixElementConstructor, DOMObject>(exec, &JSSVGFEColorMatrixElementConstructorTable, this, propertyName, slot);
}

JSValue* JSSVGFEColorMatrixElementConstructor::getValueProperty(ExecState* exec, int token) const
{
    // The token is the numeric value of its associated constant
    return jsNumber(exec, token);
}

/* Hash table for prototype */

static const HashTableValue JSSVGFEColorMatrixElementPrototypeTableValues[7] =
{
    { "SVG_FECOLORMATRIX_TYPE_UNKNOWN", (intptr_t)0, DontDelete|ReadOnly, 0 },
    { "SVG_FECOLORMATRIX_TYPE_MATRIX", (intptr_t)1, DontDelete|ReadOnly, 0 },
    { "SVG_FECOLORMATRIX_TYPE_SATURATE", (intptr_t)2, DontDelete|ReadOnly, 0 },
    { "SVG_FECOLORMATRIX_TYPE_HUEROTATE", (intptr_t)3, DontDelete|ReadOnly, 0 },
    { "SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA", (intptr_t)4, DontDelete|ReadOnly, 0 },
    { "getPresentationAttribute", (intptr_t)jsSVGFEColorMatrixElementPrototypeFunctionGetPresentationAttribute, DontDelete|Function, 1 },
    { 0, 0, 0, 0 }
};

static const HashTable JSSVGFEColorMatrixElementPrototypeTable = { 63, JSSVGFEColorMatrixElementPrototypeTableValues, 0 };

const ClassInfo JSSVGFEColorMatrixElementPrototype::s_info = { "SVGFEColorMatrixElementPrototype", 0, &JSSVGFEColorMatrixElementPrototypeTable, 0 };

JSObject* JSSVGFEColorMatrixElementPrototype::self(ExecState* exec)
{
    static const Identifier* prototypeIdentifier = new Identifier(exec, "[[JSSVGFEColorMatrixElement.prototype]]");
    return JSC::cacheGlobalObject<JSSVGFEColorMatrixElementPrototype>(exec, *prototypeIdentifier);
}

bool JSSVGFEColorMatrixElementPrototype::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticPropertySlot<JSSVGFEColorMatrixElementPrototype, JSObject>(exec, &JSSVGFEColorMatrixElementPrototypeTable, this, propertyName, slot);
}

JSValue* JSSVGFEColorMatrixElementPrototype::getValueProperty(ExecState* exec, int token) const
{
    // The token is the numeric value of its associated constant
    return jsNumber(exec, token);
}

const ClassInfo JSSVGFEColorMatrixElement::s_info = { "SVGFEColorMatrixElement", &JSSVGElement::s_info, &JSSVGFEColorMatrixElementTable , 0 };

JSSVGFEColorMatrixElement::JSSVGFEColorMatrixElement(JSObject* prototype, SVGFEColorMatrixElement* impl)
    : JSSVGElement(prototype, impl)
{
}

bool JSSVGFEColorMatrixElement::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSSVGFEColorMatrixElement, Base>(exec, &JSSVGFEColorMatrixElementTable, this, propertyName, slot);
}

JSValue* JSSVGFEColorMatrixElement::getValueProperty(ExecState* exec, int token) const
{
    switch (token) {
    case In1AttrNum: {
        SVGFEColorMatrixElement* imp = static_cast<SVGFEColorMatrixElement*>(impl());
        RefPtr<SVGAnimatedString> obj = imp->in1Animated();
        return toJS(exec, obj.get(), imp);
    }
    case TypeAttrNum: {
        SVGFEColorMatrixElement* imp = static_cast<SVGFEColorMatrixElement*>(impl());
        RefPtr<SVGAnimatedEnumeration> obj = imp->typeAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case ValuesAttrNum: {
        SVGFEColorMatrixElement* imp = static_cast<SVGFEColorMatrixElement*>(impl());
        RefPtr<SVGAnimatedNumberList> obj = imp->valuesAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case XAttrNum: {
        SVGFEColorMatrixElement* imp = static_cast<SVGFEColorMatrixElement*>(impl());
        RefPtr<SVGAnimatedLength> obj = imp->xAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case YAttrNum: {
        SVGFEColorMatrixElement* imp = static_cast<SVGFEColorMatrixElement*>(impl());
        RefPtr<SVGAnimatedLength> obj = imp->yAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case WidthAttrNum: {
        SVGFEColorMatrixElement* imp = static_cast<SVGFEColorMatrixElement*>(impl());
        RefPtr<SVGAnimatedLength> obj = imp->widthAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case HeightAttrNum: {
        SVGFEColorMatrixElement* imp = static_cast<SVGFEColorMatrixElement*>(impl());
        RefPtr<SVGAnimatedLength> obj = imp->heightAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case ResultAttrNum: {
        SVGFEColorMatrixElement* imp = static_cast<SVGFEColorMatrixElement*>(impl());
        RefPtr<SVGAnimatedString> obj = imp->resultAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case ClassNameAttrNum: {
        SVGFEColorMatrixElement* imp = static_cast<SVGFEColorMatrixElement*>(impl());
        RefPtr<SVGAnimatedString> obj = imp->classNameAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case StyleAttrNum: {
        SVGFEColorMatrixElement* imp = static_cast<SVGFEColorMatrixElement*>(impl());
        return toJS(exec, WTF::getPtr(imp->style()));
    }
    case ConstructorAttrNum:
        return getConstructor(exec);
    }
    return 0;
}

JSValue* JSSVGFEColorMatrixElement::getConstructor(ExecState* exec)
{
    static const Identifier* constructorIdentifier = new Identifier(exec, "[[SVGFEColorMatrixElement.constructor]]");
    return JSC::cacheGlobalObject<JSSVGFEColorMatrixElementConstructor>(exec, *constructorIdentifier);
}

JSValue* jsSVGFEColorMatrixElementPrototypeFunctionGetPresentationAttribute(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGFEColorMatrixElement::s_info))
        return throwError(exec, TypeError);
    JSSVGFEColorMatrixElement* castedThisObj = static_cast<JSSVGFEColorMatrixElement*>(thisValue);
    SVGFEColorMatrixElement* imp = static_cast<SVGFEColorMatrixElement*>(castedThisObj->impl());
    const UString& name = args.at(exec, 0)->toString(exec);


    JSC::JSValue* result = toJS(exec, WTF::getPtr(imp->getPresentationAttribute(name)));
    return result;
}


}

#endif // ENABLE(SVG) && ENABLE(SVG_FILTERS)
