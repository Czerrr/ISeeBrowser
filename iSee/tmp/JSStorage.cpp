/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#include "JSStorage.h"

#include <wtf/GetPtr.h>

#include "AtomicString.h"
#include "JSStorageCustom.h"
#include "KURL.h"
#include "Storage.h"

#include <kjs/Error.h>
#include <kjs/JSNumberCell.h>
#include <kjs/JSString.h>

using namespace JSC;

namespace WebCore {

ASSERT_CLASS_FITS_IN_CELL(JSStorage)

/* Hash table */

static const HashTableValue JSStorageTableValues[3] =
{
    { "length", (intptr_t)JSStorage::LengthAttrNum, DontDelete|DontEnum|ReadOnly, 0 },
    { "constructor", (intptr_t)JSStorage::ConstructorAttrNum, DontEnum, 0 },
    { 0, 0, 0, 0 }
};

static const HashTable JSStorageTable = { 15, JSStorageTableValues, 0 };

/* Hash table for constructor */

static const HashTableValue JSStorageConstructorTableValues[1] =
{
    { 0, 0, 0, 0 }
};

static const HashTable JSStorageConstructorTable = { 0, JSStorageConstructorTableValues, 0 };

class JSStorageConstructor : public DOMObject {
public:
    JSStorageConstructor(ExecState* exec)
        : DOMObject(exec->lexicalGlobalObject()->objectPrototype())
    {
        putDirect(exec->propertyNames().prototype, JSStoragePrototype::self(exec), None);
    }
    virtual bool getOwnPropertySlot(ExecState*, const Identifier&, PropertySlot&);
    JSValue* getValueProperty(ExecState*, int token) const;
    virtual const ClassInfo* classInfo() const { return &s_info; }
    static const ClassInfo s_info;

    virtual bool implementsHasInstance() const { return true; }
};

const ClassInfo JSStorageConstructor::s_info = { "StorageConstructor", 0, &JSStorageConstructorTable, 0 };

bool JSStorageConstructor::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSStorageConstructor, DOMObject>(exec, &JSStorageConstructorTable, this, propertyName, slot);
}

JSValue* JSStorageConstructor::getValueProperty(ExecState* exec, int token) const
{
    // The token is the numeric value of its associated constant
    return jsNumber(exec, token);
}

/* Hash table for prototype */

static const HashTableValue JSStoragePrototypeTableValues[6] =
{
    { "key", (intptr_t)jsStoragePrototypeFunctionKey, DontDelete|DontEnum|Function, 1 },
    { "getItem", (intptr_t)jsStoragePrototypeFunctionGetItem, DontDelete|DontEnum|Function, 1 },
    { "setItem", (intptr_t)jsStoragePrototypeFunctionSetItem, DontDelete|DontEnum|Function, 2 },
    { "removeItem", (intptr_t)jsStoragePrototypeFunctionRemoveItem, DontDelete|DontEnum|Function, 1 },
    { "clear", (intptr_t)jsStoragePrototypeFunctionClear, DontDelete|DontEnum|Function, 0 },
    { 0, 0, 0, 0 }
};

static const HashTable JSStoragePrototypeTable = { 31, JSStoragePrototypeTableValues, 0 };

const ClassInfo JSStoragePrototype::s_info = { "StoragePrototype", 0, &JSStoragePrototypeTable, 0 };

JSObject* JSStoragePrototype::self(ExecState* exec)
{
    static const Identifier* prototypeIdentifier = new Identifier(exec, "[[JSStorage.prototype]]");
    return JSC::cacheGlobalObject<JSStoragePrototype>(exec, *prototypeIdentifier);
}

bool JSStoragePrototype::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticFunctionSlot<JSObject>(exec, &JSStoragePrototypeTable, this, propertyName, slot);
}

const ClassInfo JSStorage::s_info = { "Storage", 0, &JSStorageTable , 0 };

JSStorage::JSStorage(JSObject* prototype, Storage* impl)
    : DOMObject(prototype)
    , m_impl(impl)
{
}

JSStorage::~JSStorage()
{
    ScriptInterpreter::forgetDOMObject(m_impl.get());

}

bool JSStorage::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    const HashEntry* entry = JSStorageTable.entry(exec, propertyName);
    if (entry) {
        slot.setStaticEntry(this, entry, staticValueGetter<JSStorage>);
        return true;
    }
    if (canGetItemsForName(exec, static_cast<Storage*>(impl()), propertyName)) {
        slot.setCustom(this, nameGetter);
        return true;
    }
    return getStaticValueSlot<JSStorage, Base>(exec, &JSStorageTable, this, propertyName, slot);
}

JSValue* JSStorage::getValueProperty(ExecState* exec, int token) const
{
    switch (token) {
    case LengthAttrNum: {
        Storage* imp = static_cast<Storage*>(impl());
        return jsNumber(exec, imp->length());
    }
    case ConstructorAttrNum:
        return getConstructor(exec);
    }
    return 0;
}

void JSStorage::put(ExecState* exec, const Identifier& propertyName, JSValue* value, PutPropertySlot& slot)
{
    if (customPut(exec, propertyName, value, slot))
        return;
    Base::put(exec, propertyName, value, slot);
}

void JSStorage::getPropertyNames(ExecState* exec, PropertyNameArray& propertyNames)
{
    if (customGetPropertyNames(exec, propertyNames))
        return;
     Base::getPropertyNames(exec, propertyNames);
}

JSValue* JSStorage::getConstructor(ExecState* exec)
{
    static const Identifier* constructorIdentifier = new Identifier(exec, "[[Storage.constructor]]");
    return JSC::cacheGlobalObject<JSStorageConstructor>(exec, *constructorIdentifier);
}

JSValue* jsStoragePrototypeFunctionKey(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSStorage::s_info))
        return throwError(exec, TypeError);
    JSStorage* castedThisObj = static_cast<JSStorage*>(thisValue);
    Storage* imp = static_cast<Storage*>(castedThisObj->impl());
    ExceptionCode ec = 0;
    unsigned index = args.at(exec, 0)->toInt32(exec);


    JSC::JSValue* result = jsString(exec, imp->key(index, ec));
    setDOMException(exec, ec);
    return result;
}

JSValue* jsStoragePrototypeFunctionGetItem(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSStorage::s_info))
        return throwError(exec, TypeError);
    JSStorage* castedThisObj = static_cast<JSStorage*>(thisValue);
    Storage* imp = static_cast<Storage*>(castedThisObj->impl());
    const UString& key = args.at(exec, 0)->toString(exec);


    JSC::JSValue* result = jsStringOrNull(exec, imp->getItem(key));
    return result;
}

JSValue* jsStoragePrototypeFunctionSetItem(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSStorage::s_info))
        return throwError(exec, TypeError);
    JSStorage* castedThisObj = static_cast<JSStorage*>(thisValue);
    Storage* imp = static_cast<Storage*>(castedThisObj->impl());
    ExceptionCode ec = 0;
    const UString& key = args.at(exec, 0)->toString(exec);
    const UString& data = args.at(exec, 1)->toString(exec);

    imp->setItem(key, data, ec);
    setDOMException(exec, ec);
    return jsUndefined();
}

JSValue* jsStoragePrototypeFunctionRemoveItem(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSStorage::s_info))
        return throwError(exec, TypeError);
    JSStorage* castedThisObj = static_cast<JSStorage*>(thisValue);
    Storage* imp = static_cast<Storage*>(castedThisObj->impl());
    const UString& key = args.at(exec, 0)->toString(exec);

    imp->removeItem(key);
    return jsUndefined();
}

JSValue* jsStoragePrototypeFunctionClear(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSStorage::s_info))
        return throwError(exec, TypeError);
    JSStorage* castedThisObj = static_cast<JSStorage*>(thisValue);
    Storage* imp = static_cast<Storage*>(castedThisObj->impl());

    imp->clear();
    return jsUndefined();
}

JSC::JSValue* toJS(JSC::ExecState* exec, Storage* obj)
{
    return cacheDOMObject<Storage, JSStorage, JSStoragePrototype>(exec, obj);
}
Storage* toStorage(JSC::JSValue* val)
{
    return val->isObject(&JSStorage::s_info) ? static_cast<JSStorage*>(val)->impl() : 0;
}

}
