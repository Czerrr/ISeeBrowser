/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#ifndef JSXMLHttpRequestUpload_h
#define JSXMLHttpRequestUpload_h

#include "JSDOMBinding.h"
#include <kjs/JSGlobalObject.h>
#include <kjs/ObjectPrototype.h>

namespace WebCore {

class XMLHttpRequestUpload;

class JSXMLHttpRequestUpload : public DOMObject {
    typedef DOMObject Base;
public:
    JSXMLHttpRequestUpload(JSC::JSObject* prototype, XMLHttpRequestUpload*);
    virtual ~JSXMLHttpRequestUpload();
    virtual bool getOwnPropertySlot(JSC::ExecState*, const JSC::Identifier& propertyName, JSC::PropertySlot&);
    JSC::JSValue* getValueProperty(JSC::ExecState*, int token) const;
    virtual void put(JSC::ExecState*, const JSC::Identifier& propertyName, JSC::JSValue*, JSC::PutPropertySlot&);
    void putValueProperty(JSC::ExecState*, int, JSC::JSValue*);
    virtual const JSC::ClassInfo* classInfo() const { return &s_info; }
    static const JSC::ClassInfo s_info;

    virtual void mark();

    static JSC::JSValue* getConstructor(JSC::ExecState*);
    enum {
        // Attributes
        OnabortAttrNum, OnerrorAttrNum, OnloadAttrNum, OnloadstartAttrNum, 
        OnprogressAttrNum, 

        // The Constructor Attribute
        ConstructorAttrNum
    };

    // Custom attributes
    JSC::JSValue* onabort(JSC::ExecState*) const;
    void setOnabort(JSC::ExecState*, JSC::JSValue*);
    JSC::JSValue* onerror(JSC::ExecState*) const;
    void setOnerror(JSC::ExecState*, JSC::JSValue*);
    JSC::JSValue* onload(JSC::ExecState*) const;
    void setOnload(JSC::ExecState*, JSC::JSValue*);
    JSC::JSValue* onloadstart(JSC::ExecState*) const;
    void setOnloadstart(JSC::ExecState*, JSC::JSValue*);
    JSC::JSValue* onprogress(JSC::ExecState*) const;
    void setOnprogress(JSC::ExecState*, JSC::JSValue*);

    // Custom functions
    JSC::JSValue* addEventListener(JSC::ExecState*, const JSC::ArgList&);
    JSC::JSValue* removeEventListener(JSC::ExecState*, const JSC::ArgList&);
    JSC::JSValue* dispatchEvent(JSC::ExecState*, const JSC::ArgList&);
    XMLHttpRequestUpload* impl() const { return m_impl.get(); }

private:
    RefPtr<XMLHttpRequestUpload> m_impl;
};

JSC::JSValue* toJS(JSC::ExecState*, XMLHttpRequestUpload*);
XMLHttpRequestUpload* toXMLHttpRequestUpload(JSC::JSValue*);

class JSXMLHttpRequestUploadPrototype : public JSC::JSObject {
public:
    static JSC::JSObject* self(JSC::ExecState*);
    virtual const JSC::ClassInfo* classInfo() const { return &s_info; }
    static const JSC::ClassInfo s_info;
    bool getOwnPropertySlot(JSC::ExecState*, const JSC::Identifier&, JSC::PropertySlot&);
    JSXMLHttpRequestUploadPrototype(JSC::ExecState* exec)
        : JSC::JSObject(exec->lexicalGlobalObject()->objectPrototype()) { }
};

// Functions

JSC::JSValue* jsXMLHttpRequestUploadPrototypeFunctionAddEventListener(JSC::ExecState*, JSC::JSObject*, JSC::JSValue*, const JSC::ArgList&);
JSC::JSValue* jsXMLHttpRequestUploadPrototypeFunctionRemoveEventListener(JSC::ExecState*, JSC::JSObject*, JSC::JSValue*, const JSC::ArgList&);
JSC::JSValue* jsXMLHttpRequestUploadPrototypeFunctionDispatchEvent(JSC::ExecState*, JSC::JSObject*, JSC::JSValue*, const JSC::ArgList&);
} // namespace WebCore

#endif
