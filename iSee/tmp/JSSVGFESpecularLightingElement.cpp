/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"


#if ENABLE(SVG) && ENABLE(SVG_FILTERS)

#include "Document.h"
#include "Frame.h"
#include "SVGDocumentExtensions.h"
#include "SVGElement.h"
#include "SVGAnimatedTemplate.h"
#include "JSSVGFESpecularLightingElement.h"

#include <wtf/GetPtr.h>

#include "CSSMutableStyleDeclaration.h"
#include "CSSStyleDeclaration.h"
#include "CSSValue.h"
#include "JSCSSStyleDeclaration.h"
#include "JSCSSValue.h"
#include "JSSVGAnimatedLength.h"
#include "JSSVGAnimatedNumber.h"
#include "JSSVGAnimatedString.h"
#include "SVGFESpecularLightingElement.h"

#include <kjs/Error.h>

using namespace JSC;

namespace WebCore {

ASSERT_CLASS_FITS_IN_CELL(JSSVGFESpecularLightingElement)

/* Hash table */

static const HashTableValue JSSVGFESpecularLightingElementTableValues[12] =
{
    { "in1", (intptr_t)JSSVGFESpecularLightingElement::In1AttrNum, DontDelete|ReadOnly, 0 },
    { "surfaceScale", (intptr_t)JSSVGFESpecularLightingElement::SurfaceScaleAttrNum, DontDelete|ReadOnly, 0 },
    { "specularConstant", (intptr_t)JSSVGFESpecularLightingElement::SpecularConstantAttrNum, DontDelete|ReadOnly, 0 },
    { "specularExponent", (intptr_t)JSSVGFESpecularLightingElement::SpecularExponentAttrNum, DontDelete|ReadOnly, 0 },
    { "x", (intptr_t)JSSVGFESpecularLightingElement::XAttrNum, DontDelete|ReadOnly, 0 },
    { "y", (intptr_t)JSSVGFESpecularLightingElement::YAttrNum, DontDelete|ReadOnly, 0 },
    { "width", (intptr_t)JSSVGFESpecularLightingElement::WidthAttrNum, DontDelete|ReadOnly, 0 },
    { "height", (intptr_t)JSSVGFESpecularLightingElement::HeightAttrNum, DontDelete|ReadOnly, 0 },
    { "result", (intptr_t)JSSVGFESpecularLightingElement::ResultAttrNum, DontDelete|ReadOnly, 0 },
    { "className", (intptr_t)JSSVGFESpecularLightingElement::ClassNameAttrNum, DontDelete|ReadOnly, 0 },
    { "style", (intptr_t)JSSVGFESpecularLightingElement::StyleAttrNum, DontDelete|ReadOnly, 0 },
    { 0, 0, 0, 0 }
};

static const HashTable JSSVGFESpecularLightingElementTable = { 1023, JSSVGFESpecularLightingElementTableValues, 0 };

/* Hash table for prototype */

static const HashTableValue JSSVGFESpecularLightingElementPrototypeTableValues[2] =
{
    { "getPresentationAttribute", (intptr_t)jsSVGFESpecularLightingElementPrototypeFunctionGetPresentationAttribute, DontDelete|Function, 1 },
    { 0, 0, 0, 0 }
};

static const HashTable JSSVGFESpecularLightingElementPrototypeTable = { 0, JSSVGFESpecularLightingElementPrototypeTableValues, 0 };

const ClassInfo JSSVGFESpecularLightingElementPrototype::s_info = { "SVGFESpecularLightingElementPrototype", 0, &JSSVGFESpecularLightingElementPrototypeTable, 0 };

JSObject* JSSVGFESpecularLightingElementPrototype::self(ExecState* exec)
{
    static const Identifier* prototypeIdentifier = new Identifier(exec, "[[JSSVGFESpecularLightingElement.prototype]]");
    return JSC::cacheGlobalObject<JSSVGFESpecularLightingElementPrototype>(exec, *prototypeIdentifier);
}

bool JSSVGFESpecularLightingElementPrototype::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticFunctionSlot<JSObject>(exec, &JSSVGFESpecularLightingElementPrototypeTable, this, propertyName, slot);
}

const ClassInfo JSSVGFESpecularLightingElement::s_info = { "SVGFESpecularLightingElement", &JSSVGElement::s_info, &JSSVGFESpecularLightingElementTable , 0 };

JSSVGFESpecularLightingElement::JSSVGFESpecularLightingElement(JSObject* prototype, SVGFESpecularLightingElement* impl)
    : JSSVGElement(prototype, impl)
{
}

bool JSSVGFESpecularLightingElement::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSSVGFESpecularLightingElement, Base>(exec, &JSSVGFESpecularLightingElementTable, this, propertyName, slot);
}

JSValue* JSSVGFESpecularLightingElement::getValueProperty(ExecState* exec, int token) const
{
    switch (token) {
    case In1AttrNum: {
        SVGFESpecularLightingElement* imp = static_cast<SVGFESpecularLightingElement*>(impl());
        RefPtr<SVGAnimatedString> obj = imp->in1Animated();
        return toJS(exec, obj.get(), imp);
    }
    case SurfaceScaleAttrNum: {
        SVGFESpecularLightingElement* imp = static_cast<SVGFESpecularLightingElement*>(impl());
        RefPtr<SVGAnimatedNumber> obj = imp->surfaceScaleAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case SpecularConstantAttrNum: {
        SVGFESpecularLightingElement* imp = static_cast<SVGFESpecularLightingElement*>(impl());
        RefPtr<SVGAnimatedNumber> obj = imp->specularConstantAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case SpecularExponentAttrNum: {
        SVGFESpecularLightingElement* imp = static_cast<SVGFESpecularLightingElement*>(impl());
        RefPtr<SVGAnimatedNumber> obj = imp->specularExponentAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case XAttrNum: {
        SVGFESpecularLightingElement* imp = static_cast<SVGFESpecularLightingElement*>(impl());
        RefPtr<SVGAnimatedLength> obj = imp->xAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case YAttrNum: {
        SVGFESpecularLightingElement* imp = static_cast<SVGFESpecularLightingElement*>(impl());
        RefPtr<SVGAnimatedLength> obj = imp->yAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case WidthAttrNum: {
        SVGFESpecularLightingElement* imp = static_cast<SVGFESpecularLightingElement*>(impl());
        RefPtr<SVGAnimatedLength> obj = imp->widthAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case HeightAttrNum: {
        SVGFESpecularLightingElement* imp = static_cast<SVGFESpecularLightingElement*>(impl());
        RefPtr<SVGAnimatedLength> obj = imp->heightAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case ResultAttrNum: {
        SVGFESpecularLightingElement* imp = static_cast<SVGFESpecularLightingElement*>(impl());
        RefPtr<SVGAnimatedString> obj = imp->resultAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case ClassNameAttrNum: {
        SVGFESpecularLightingElement* imp = static_cast<SVGFESpecularLightingElement*>(impl());
        RefPtr<SVGAnimatedString> obj = imp->classNameAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case StyleAttrNum: {
        SVGFESpecularLightingElement* imp = static_cast<SVGFESpecularLightingElement*>(impl());
        return toJS(exec, WTF::getPtr(imp->style()));
    }
    }
    return 0;
}

JSValue* jsSVGFESpecularLightingElementPrototypeFunctionGetPresentationAttribute(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGFESpecularLightingElement::s_info))
        return throwError(exec, TypeError);
    JSSVGFESpecularLightingElement* castedThisObj = static_cast<JSSVGFESpecularLightingElement*>(thisValue);
    SVGFESpecularLightingElement* imp = static_cast<SVGFESpecularLightingElement*>(castedThisObj->impl());
    const UString& name = args.at(exec, 0)->toString(exec);


    JSC::JSValue* result = toJS(exec, WTF::getPtr(imp->getPresentationAttribute(name)));
    return result;
}


}

#endif // ENABLE(SVG) && ENABLE(SVG_FILTERS)
