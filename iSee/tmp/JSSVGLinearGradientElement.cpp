/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"


#if ENABLE(SVG)

#include "Document.h"
#include "Frame.h"
#include "SVGDocumentExtensions.h"
#include "SVGElement.h"
#include "SVGAnimatedTemplate.h"
#include "JSSVGLinearGradientElement.h"

#include <wtf/GetPtr.h>

#include "JSSVGAnimatedLength.h"
#include "SVGLinearGradientElement.h"


using namespace JSC;

namespace WebCore {

ASSERT_CLASS_FITS_IN_CELL(JSSVGLinearGradientElement)

/* Hash table */

static const HashTableValue JSSVGLinearGradientElementTableValues[5] =
{
    { "x1", (intptr_t)JSSVGLinearGradientElement::X1AttrNum, DontDelete|ReadOnly, 0 },
    { "y1", (intptr_t)JSSVGLinearGradientElement::Y1AttrNum, DontDelete|ReadOnly, 0 },
    { "x2", (intptr_t)JSSVGLinearGradientElement::X2AttrNum, DontDelete|ReadOnly, 0 },
    { "y2", (intptr_t)JSSVGLinearGradientElement::Y2AttrNum, DontDelete|ReadOnly, 0 },
    { 0, 0, 0, 0 }
};

static const HashTable JSSVGLinearGradientElementTable = { 7, JSSVGLinearGradientElementTableValues, 0 };

/* Hash table for prototype */

static const HashTableValue JSSVGLinearGradientElementPrototypeTableValues[1] =
{
    { 0, 0, 0, 0 }
};

static const HashTable JSSVGLinearGradientElementPrototypeTable = { 0, JSSVGLinearGradientElementPrototypeTableValues, 0 };

const ClassInfo JSSVGLinearGradientElementPrototype::s_info = { "SVGLinearGradientElementPrototype", 0, &JSSVGLinearGradientElementPrototypeTable, 0 };

JSObject* JSSVGLinearGradientElementPrototype::self(ExecState* exec)
{
    static const Identifier* prototypeIdentifier = new Identifier(exec, "[[JSSVGLinearGradientElement.prototype]]");
    return JSC::cacheGlobalObject<JSSVGLinearGradientElementPrototype>(exec, *prototypeIdentifier);
}

const ClassInfo JSSVGLinearGradientElement::s_info = { "SVGLinearGradientElement", &JSSVGGradientElement::s_info, &JSSVGLinearGradientElementTable , 0 };

JSSVGLinearGradientElement::JSSVGLinearGradientElement(JSObject* prototype, SVGLinearGradientElement* impl)
    : JSSVGGradientElement(prototype, impl)
{
}

bool JSSVGLinearGradientElement::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSSVGLinearGradientElement, Base>(exec, &JSSVGLinearGradientElementTable, this, propertyName, slot);
}

JSValue* JSSVGLinearGradientElement::getValueProperty(ExecState* exec, int token) const
{
    switch (token) {
    case X1AttrNum: {
        SVGLinearGradientElement* imp = static_cast<SVGLinearGradientElement*>(impl());
        RefPtr<SVGAnimatedLength> obj = imp->x1Animated();
        return toJS(exec, obj.get(), imp);
    }
    case Y1AttrNum: {
        SVGLinearGradientElement* imp = static_cast<SVGLinearGradientElement*>(impl());
        RefPtr<SVGAnimatedLength> obj = imp->y1Animated();
        return toJS(exec, obj.get(), imp);
    }
    case X2AttrNum: {
        SVGLinearGradientElement* imp = static_cast<SVGLinearGradientElement*>(impl());
        RefPtr<SVGAnimatedLength> obj = imp->x2Animated();
        return toJS(exec, obj.get(), imp);
    }
    case Y2AttrNum: {
        SVGLinearGradientElement* imp = static_cast<SVGLinearGradientElement*>(impl());
        RefPtr<SVGAnimatedLength> obj = imp->y2Animated();
        return toJS(exec, obj.get(), imp);
    }
    }
    return 0;
}


}

#endif // ENABLE(SVG)
