/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#include "JSVoidCallback.h"

#include <wtf/GetPtr.h>

#include "VoidCallback.h"

#include <kjs/Error.h>

using namespace JSC;

namespace WebCore {

ASSERT_CLASS_FITS_IN_CELL(JSVoidCallback)

/* Hash table for prototype */

static const HashTableValue JSVoidCallbackPrototypeTableValues[2] =
{
    { "handleEvent", (intptr_t)jsVoidCallbackPrototypeFunctionHandleEvent, DontDelete|Function, 0 },
    { 0, 0, 0, 0 }
};

static const HashTable JSVoidCallbackPrototypeTable = { 0, JSVoidCallbackPrototypeTableValues, 0 };

const ClassInfo JSVoidCallbackPrototype::s_info = { "VoidCallbackPrototype", 0, &JSVoidCallbackPrototypeTable, 0 };

JSObject* JSVoidCallbackPrototype::self(ExecState* exec)
{
    static const Identifier* prototypeIdentifier = new Identifier(exec, "[[JSVoidCallback.prototype]]");
    return JSC::cacheGlobalObject<JSVoidCallbackPrototype>(exec, *prototypeIdentifier);
}

bool JSVoidCallbackPrototype::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticFunctionSlot<JSObject>(exec, &JSVoidCallbackPrototypeTable, this, propertyName, slot);
}

const ClassInfo JSVoidCallback::s_info = { "VoidCallback", 0, 0 , 0 };

JSVoidCallback::JSVoidCallback(JSObject* prototype, VoidCallback* impl)
    : DOMObject(prototype)
    , m_impl(impl)
{
}

JSVoidCallback::~JSVoidCallback()
{
    ScriptInterpreter::forgetDOMObject(m_impl.get());

}

JSValue* jsVoidCallbackPrototypeFunctionHandleEvent(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSVoidCallback::s_info))
        return throwError(exec, TypeError);
    JSVoidCallback* castedThisObj = static_cast<JSVoidCallback*>(thisValue);
    VoidCallback* imp = static_cast<VoidCallback*>(castedThisObj->impl());

    imp->handleEvent();
    return jsUndefined();
}

JSC::JSValue* toJS(JSC::ExecState* exec, VoidCallback* obj)
{
    return cacheDOMObject<VoidCallback, JSVoidCallback, JSVoidCallbackPrototype>(exec, obj);
}

}
