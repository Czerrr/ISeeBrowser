/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"


#if ENABLE(SVG)

#include "Document.h"
#include "Frame.h"
#include "SVGDocumentExtensions.h"
#include "SVGElement.h"
#include "SVGAnimatedTemplate.h"
#include "JSSVGTests.h"

#include <wtf/GetPtr.h>

#include "JSSVGStringList.h"
#include "SVGStringList.h"
#include "SVGTests.h"

#include <kjs/Error.h>

using namespace JSC;

namespace WebCore {

ASSERT_CLASS_FITS_IN_CELL(JSSVGTests)

/* Hash table */

static const HashTableValue JSSVGTestsTableValues[4] =
{
    { "requiredFeatures", (intptr_t)JSSVGTests::RequiredFeaturesAttrNum, DontDelete|ReadOnly, 0 },
    { "requiredExtensions", (intptr_t)JSSVGTests::RequiredExtensionsAttrNum, DontDelete|ReadOnly, 0 },
    { "systemLanguage", (intptr_t)JSSVGTests::SystemLanguageAttrNum, DontDelete|ReadOnly, 0 },
    { 0, 0, 0, 0 }
};

static const HashTable JSSVGTestsTable = { 3, JSSVGTestsTableValues, 0 };

/* Hash table for prototype */

static const HashTableValue JSSVGTestsPrototypeTableValues[2] =
{
    { "hasExtension", (intptr_t)jsSVGTestsPrototypeFunctionHasExtension, DontDelete|Function, 1 },
    { 0, 0, 0, 0 }
};

static const HashTable JSSVGTestsPrototypeTable = { 0, JSSVGTestsPrototypeTableValues, 0 };

const ClassInfo JSSVGTestsPrototype::s_info = { "SVGTestsPrototype", 0, &JSSVGTestsPrototypeTable, 0 };

JSObject* JSSVGTestsPrototype::self(ExecState* exec)
{
    static const Identifier* prototypeIdentifier = new Identifier(exec, "[[JSSVGTests.prototype]]");
    return JSC::cacheGlobalObject<JSSVGTestsPrototype>(exec, *prototypeIdentifier);
}

bool JSSVGTestsPrototype::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticFunctionSlot<JSObject>(exec, &JSSVGTestsPrototypeTable, this, propertyName, slot);
}

const ClassInfo JSSVGTests::s_info = { "SVGTests", 0, &JSSVGTestsTable , 0 };

JSSVGTests::JSSVGTests(JSObject* prototype, SVGTests* impl, SVGElement* context)
    : DOMObject(prototype)
    , m_context(context)
    , m_impl(impl)
{
}

JSSVGTests::~JSSVGTests()
{
    ScriptInterpreter::forgetDOMObject(m_impl.get());

}

bool JSSVGTests::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSSVGTests, Base>(exec, &JSSVGTestsTable, this, propertyName, slot);
}

JSValue* JSSVGTests::getValueProperty(ExecState* exec, int token) const
{
    switch (token) {
    case RequiredFeaturesAttrNum: {
        SVGTests* imp = static_cast<SVGTests*>(impl());
        return toJS(exec, WTF::getPtr(imp->requiredFeatures()), context());
    }
    case RequiredExtensionsAttrNum: {
        SVGTests* imp = static_cast<SVGTests*>(impl());
        return toJS(exec, WTF::getPtr(imp->requiredExtensions()), context());
    }
    case SystemLanguageAttrNum: {
        SVGTests* imp = static_cast<SVGTests*>(impl());
        return toJS(exec, WTF::getPtr(imp->systemLanguage()), context());
    }
    }
    return 0;
}

JSValue* jsSVGTestsPrototypeFunctionHasExtension(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGTests::s_info))
        return throwError(exec, TypeError);
    JSSVGTests* castedThisObj = static_cast<JSSVGTests*>(thisValue);
    SVGTests* imp = static_cast<SVGTests*>(castedThisObj->impl());
    const UString& extension = args.at(exec, 0)->toString(exec);


    JSC::JSValue* result = jsBoolean(imp->hasExtension(extension));
    return result;
}

JSC::JSValue* toJS(JSC::ExecState* exec, SVGTests* obj, SVGElement* context)
{
    return cacheSVGDOMObject<SVGTests, JSSVGTests, JSSVGTestsPrototype>(exec, obj, context);
}
SVGTests* toSVGTests(JSC::JSValue* val)
{
    return val->isObject(&JSSVGTests::s_info) ? static_cast<JSSVGTests*>(val)->impl() : 0;
}

}

#endif // ENABLE(SVG)
