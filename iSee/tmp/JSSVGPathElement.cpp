/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"


#if ENABLE(SVG)

#include "Document.h"
#include "Frame.h"
#include "SVGDocumentExtensions.h"
#include "SVGElement.h"
#include "SVGAnimatedTemplate.h"
#include "JSSVGPathElement.h"

#include <wtf/GetPtr.h>

#include "CSSMutableStyleDeclaration.h"
#include "CSSStyleDeclaration.h"
#include "CSSValue.h"
#include "JSCSSStyleDeclaration.h"
#include "JSCSSValue.h"
#include "JSSVGAnimatedBoolean.h"
#include "JSSVGAnimatedNumber.h"
#include "JSSVGAnimatedString.h"
#include "JSSVGAnimatedTransformList.h"
#include "JSSVGElement.h"
#include "JSSVGMatrix.h"
#include "JSSVGPathSegArcAbs.h"
#include "JSSVGPathSegArcRel.h"
#include "JSSVGPathSegClosePath.h"
#include "JSSVGPathSegCurvetoCubicAbs.h"
#include "JSSVGPathSegCurvetoCubicRel.h"
#include "JSSVGPathSegCurvetoCubicSmoothAbs.h"
#include "JSSVGPathSegCurvetoCubicSmoothRel.h"
#include "JSSVGPathSegCurvetoQuadraticAbs.h"
#include "JSSVGPathSegCurvetoQuadraticRel.h"
#include "JSSVGPathSegCurvetoQuadraticSmoothAbs.h"
#include "JSSVGPathSegCurvetoQuadraticSmoothRel.h"
#include "JSSVGPathSegLinetoAbs.h"
#include "JSSVGPathSegLinetoHorizontalAbs.h"
#include "JSSVGPathSegLinetoHorizontalRel.h"
#include "JSSVGPathSegLinetoRel.h"
#include "JSSVGPathSegLinetoVerticalAbs.h"
#include "JSSVGPathSegLinetoVerticalRel.h"
#include "JSSVGPathSegList.h"
#include "JSSVGPathSegMovetoAbs.h"
#include "JSSVGPathSegMovetoRel.h"
#include "JSSVGPoint.h"
#include "JSSVGRect.h"
#include "JSSVGStringList.h"
#include "KURL.h"
#include "SVGElement.h"
#include "SVGPathElement.h"
#include "SVGPathSegArc.h"
#include "SVGPathSegClosePath.h"
#include "SVGPathSegCurvetoCubic.h"
#include "SVGPathSegCurvetoCubicSmooth.h"
#include "SVGPathSegCurvetoQuadratic.h"
#include "SVGPathSegCurvetoQuadraticSmooth.h"
#include "SVGPathSegLineto.h"
#include "SVGPathSegLinetoHorizontal.h"
#include "SVGPathSegLinetoVertical.h"
#include "SVGPathSegList.h"
#include "SVGPathSegMoveto.h"
#include "SVGStringList.h"

#include <kjs/Error.h>
#include <kjs/JSNumberCell.h>
#include <kjs/JSString.h>

using namespace JSC;

namespace WebCore {

ASSERT_CLASS_FITS_IN_CELL(JSSVGPathElement)

/* Hash table */

static const HashTableValue JSSVGPathElementTableValues[17] =
{
    { "pathLength", (intptr_t)JSSVGPathElement::PathLengthAttrNum, DontDelete|ReadOnly, 0 },
    { "requiredFeatures", (intptr_t)JSSVGPathElement::RequiredFeaturesAttrNum, DontDelete|ReadOnly, 0 },
    { "requiredExtensions", (intptr_t)JSSVGPathElement::RequiredExtensionsAttrNum, DontDelete|ReadOnly, 0 },
    { "systemLanguage", (intptr_t)JSSVGPathElement::SystemLanguageAttrNum, DontDelete|ReadOnly, 0 },
    { "xmllang", (intptr_t)JSSVGPathElement::XmllangAttrNum, DontDelete, 0 },
    { "xmlspace", (intptr_t)JSSVGPathElement::XmlspaceAttrNum, DontDelete, 0 },
    { "externalResourcesRequired", (intptr_t)JSSVGPathElement::ExternalResourcesRequiredAttrNum, DontDelete|ReadOnly, 0 },
    { "className", (intptr_t)JSSVGPathElement::ClassNameAttrNum, DontDelete|ReadOnly, 0 },
    { "style", (intptr_t)JSSVGPathElement::StyleAttrNum, DontDelete|ReadOnly, 0 },
    { "transform", (intptr_t)JSSVGPathElement::TransformAttrNum, DontDelete|ReadOnly, 0 },
    { "nearestViewportElement", (intptr_t)JSSVGPathElement::NearestViewportElementAttrNum, DontDelete|ReadOnly, 0 },
    { "farthestViewportElement", (intptr_t)JSSVGPathElement::FarthestViewportElementAttrNum, DontDelete|ReadOnly, 0 },
    { "pathSegList", (intptr_t)JSSVGPathElement::PathSegListAttrNum, DontDelete|ReadOnly, 0 },
    { "normalizedPathSegList", (intptr_t)JSSVGPathElement::NormalizedPathSegListAttrNum, DontDelete|ReadOnly, 0 },
    { "animatedPathSegList", (intptr_t)JSSVGPathElement::AnimatedPathSegListAttrNum, DontDelete|ReadOnly, 0 },
    { "animatedNormalizedPathSegList", (intptr_t)JSSVGPathElement::AnimatedNormalizedPathSegListAttrNum, DontDelete|ReadOnly, 0 },
    { 0, 0, 0, 0 }
};

static const HashTable JSSVGPathElementTable = { 255, JSSVGPathElementTableValues, 0 };

/* Hash table for prototype */

static const HashTableValue JSSVGPathElementPrototypeTableValues[29] =
{
    { "getTotalLength", (intptr_t)jsSVGPathElementPrototypeFunctionGetTotalLength, DontDelete|Function, 0 },
    { "getPointAtLength", (intptr_t)jsSVGPathElementPrototypeFunctionGetPointAtLength, DontDelete|Function, 1 },
    { "getPathSegAtLength", (intptr_t)jsSVGPathElementPrototypeFunctionGetPathSegAtLength, DontDelete|Function, 1 },
    { "createSVGPathSegClosePath", (intptr_t)jsSVGPathElementPrototypeFunctionCreateSVGPathSegClosePath, DontDelete|Function, 0 },
    { "createSVGPathSegMovetoAbs", (intptr_t)jsSVGPathElementPrototypeFunctionCreateSVGPathSegMovetoAbs, DontDelete|Function, 2 },
    { "createSVGPathSegMovetoRel", (intptr_t)jsSVGPathElementPrototypeFunctionCreateSVGPathSegMovetoRel, DontDelete|Function, 2 },
    { "createSVGPathSegLinetoAbs", (intptr_t)jsSVGPathElementPrototypeFunctionCreateSVGPathSegLinetoAbs, DontDelete|Function, 2 },
    { "createSVGPathSegLinetoRel", (intptr_t)jsSVGPathElementPrototypeFunctionCreateSVGPathSegLinetoRel, DontDelete|Function, 2 },
    { "createSVGPathSegCurvetoCubicAbs", (intptr_t)jsSVGPathElementPrototypeFunctionCreateSVGPathSegCurvetoCubicAbs, DontDelete|Function, 6 },
    { "createSVGPathSegCurvetoCubicRel", (intptr_t)jsSVGPathElementPrototypeFunctionCreateSVGPathSegCurvetoCubicRel, DontDelete|Function, 6 },
    { "createSVGPathSegCurvetoQuadraticAbs", (intptr_t)jsSVGPathElementPrototypeFunctionCreateSVGPathSegCurvetoQuadraticAbs, DontDelete|Function, 4 },
    { "createSVGPathSegCurvetoQuadraticRel", (intptr_t)jsSVGPathElementPrototypeFunctionCreateSVGPathSegCurvetoQuadraticRel, DontDelete|Function, 4 },
    { "createSVGPathSegArcAbs", (intptr_t)jsSVGPathElementPrototypeFunctionCreateSVGPathSegArcAbs, DontDelete|Function, 7 },
    { "createSVGPathSegArcRel", (intptr_t)jsSVGPathElementPrototypeFunctionCreateSVGPathSegArcRel, DontDelete|Function, 7 },
    { "createSVGPathSegLinetoHorizontalAbs", (intptr_t)jsSVGPathElementPrototypeFunctionCreateSVGPathSegLinetoHorizontalAbs, DontDelete|Function, 1 },
    { "createSVGPathSegLinetoHorizontalRel", (intptr_t)jsSVGPathElementPrototypeFunctionCreateSVGPathSegLinetoHorizontalRel, DontDelete|Function, 1 },
    { "createSVGPathSegLinetoVerticalAbs", (intptr_t)jsSVGPathElementPrototypeFunctionCreateSVGPathSegLinetoVerticalAbs, DontDelete|Function, 1 },
    { "createSVGPathSegLinetoVerticalRel", (intptr_t)jsSVGPathElementPrototypeFunctionCreateSVGPathSegLinetoVerticalRel, DontDelete|Function, 1 },
    { "createSVGPathSegCurvetoCubicSmoothAbs", (intptr_t)jsSVGPathElementPrototypeFunctionCreateSVGPathSegCurvetoCubicSmoothAbs, DontDelete|Function, 4 },
    { "createSVGPathSegCurvetoCubicSmoothRel", (intptr_t)jsSVGPathElementPrototypeFunctionCreateSVGPathSegCurvetoCubicSmoothRel, DontDelete|Function, 4 },
    { "createSVGPathSegCurvetoQuadraticSmoothAbs", (intptr_t)jsSVGPathElementPrototypeFunctionCreateSVGPathSegCurvetoQuadraticSmoothAbs, DontDelete|Function, 2 },
    { "createSVGPathSegCurvetoQuadraticSmoothRel", (intptr_t)jsSVGPathElementPrototypeFunctionCreateSVGPathSegCurvetoQuadraticSmoothRel, DontDelete|Function, 2 },
    { "hasExtension", (intptr_t)jsSVGPathElementPrototypeFunctionHasExtension, DontDelete|Function, 1 },
    { "getPresentationAttribute", (intptr_t)jsSVGPathElementPrototypeFunctionGetPresentationAttribute, DontDelete|Function, 1 },
    { "getBBox", (intptr_t)jsSVGPathElementPrototypeFunctionGetBBox, DontDelete|Function, 0 },
    { "getCTM", (intptr_t)jsSVGPathElementPrototypeFunctionGetCTM, DontDelete|Function, 0 },
    { "getScreenCTM", (intptr_t)jsSVGPathElementPrototypeFunctionGetScreenCTM, DontDelete|Function, 0 },
    { "getTransformToElement", (intptr_t)jsSVGPathElementPrototypeFunctionGetTransformToElement, DontDelete|Function, 1 },
    { 0, 0, 0, 0 }
};

static const HashTable JSSVGPathElementPrototypeTable = { 2047, JSSVGPathElementPrototypeTableValues, 0 };

const ClassInfo JSSVGPathElementPrototype::s_info = { "SVGPathElementPrototype", 0, &JSSVGPathElementPrototypeTable, 0 };

JSObject* JSSVGPathElementPrototype::self(ExecState* exec)
{
    static const Identifier* prototypeIdentifier = new Identifier(exec, "[[JSSVGPathElement.prototype]]");
    return JSC::cacheGlobalObject<JSSVGPathElementPrototype>(exec, *prototypeIdentifier);
}

bool JSSVGPathElementPrototype::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticFunctionSlot<JSObject>(exec, &JSSVGPathElementPrototypeTable, this, propertyName, slot);
}

const ClassInfo JSSVGPathElement::s_info = { "SVGPathElement", &JSSVGElement::s_info, &JSSVGPathElementTable , 0 };

JSSVGPathElement::JSSVGPathElement(JSObject* prototype, SVGPathElement* impl)
    : JSSVGElement(prototype, impl)
{
}

bool JSSVGPathElement::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSSVGPathElement, Base>(exec, &JSSVGPathElementTable, this, propertyName, slot);
}

JSValue* JSSVGPathElement::getValueProperty(ExecState* exec, int token) const
{
    switch (token) {
    case PathLengthAttrNum: {
        SVGPathElement* imp = static_cast<SVGPathElement*>(impl());
        RefPtr<SVGAnimatedNumber> obj = imp->pathLengthAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case RequiredFeaturesAttrNum: {
        SVGPathElement* imp = static_cast<SVGPathElement*>(impl());
        return toJS(exec, WTF::getPtr(imp->requiredFeatures()), imp);
    }
    case RequiredExtensionsAttrNum: {
        SVGPathElement* imp = static_cast<SVGPathElement*>(impl());
        return toJS(exec, WTF::getPtr(imp->requiredExtensions()), imp);
    }
    case SystemLanguageAttrNum: {
        SVGPathElement* imp = static_cast<SVGPathElement*>(impl());
        return toJS(exec, WTF::getPtr(imp->systemLanguage()), imp);
    }
    case XmllangAttrNum: {
        SVGPathElement* imp = static_cast<SVGPathElement*>(impl());
        return jsString(exec, imp->xmllang());
    }
    case XmlspaceAttrNum: {
        SVGPathElement* imp = static_cast<SVGPathElement*>(impl());
        return jsString(exec, imp->xmlspace());
    }
    case ExternalResourcesRequiredAttrNum: {
        SVGPathElement* imp = static_cast<SVGPathElement*>(impl());
        RefPtr<SVGAnimatedBoolean> obj = imp->externalResourcesRequiredAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case ClassNameAttrNum: {
        SVGPathElement* imp = static_cast<SVGPathElement*>(impl());
        RefPtr<SVGAnimatedString> obj = imp->classNameAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case StyleAttrNum: {
        SVGPathElement* imp = static_cast<SVGPathElement*>(impl());
        return toJS(exec, WTF::getPtr(imp->style()));
    }
    case TransformAttrNum: {
        SVGPathElement* imp = static_cast<SVGPathElement*>(impl());
        RefPtr<SVGAnimatedTransformList> obj = imp->transformAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case NearestViewportElementAttrNum: {
        SVGPathElement* imp = static_cast<SVGPathElement*>(impl());
        return toJS(exec, WTF::getPtr(imp->nearestViewportElement()));
    }
    case FarthestViewportElementAttrNum: {
        SVGPathElement* imp = static_cast<SVGPathElement*>(impl());
        return toJS(exec, WTF::getPtr(imp->farthestViewportElement()));
    }
    case PathSegListAttrNum: {
        SVGPathElement* imp = static_cast<SVGPathElement*>(impl());
        return toJS(exec, WTF::getPtr(imp->pathSegList()), imp);
    }
    case NormalizedPathSegListAttrNum: {
        SVGPathElement* imp = static_cast<SVGPathElement*>(impl());
        return toJS(exec, WTF::getPtr(imp->normalizedPathSegList()), imp);
    }
    case AnimatedPathSegListAttrNum: {
        SVGPathElement* imp = static_cast<SVGPathElement*>(impl());
        return toJS(exec, WTF::getPtr(imp->animatedPathSegList()), imp);
    }
    case AnimatedNormalizedPathSegListAttrNum: {
        SVGPathElement* imp = static_cast<SVGPathElement*>(impl());
        return toJS(exec, WTF::getPtr(imp->animatedNormalizedPathSegList()), imp);
    }
    }
    return 0;
}

void JSSVGPathElement::put(ExecState* exec, const Identifier& propertyName, JSValue* value, PutPropertySlot& slot)
{
    lookupPut<JSSVGPathElement, Base>(exec, propertyName, value, &JSSVGPathElementTable, this, slot);
}

void JSSVGPathElement::putValueProperty(ExecState* exec, int token, JSValue* value)
{
    switch (token) {
    case XmllangAttrNum: {
        SVGPathElement* imp = static_cast<SVGPathElement*>(impl());
        imp->setXmllang(value->toString(exec));
        break;
    }
    case XmlspaceAttrNum: {
        SVGPathElement* imp = static_cast<SVGPathElement*>(impl());
        imp->setXmlspace(value->toString(exec));
        break;
    }
    }
}

JSValue* jsSVGPathElementPrototypeFunctionGetTotalLength(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGPathElement::s_info))
        return throwError(exec, TypeError);
    JSSVGPathElement* castedThisObj = static_cast<JSSVGPathElement*>(thisValue);
    SVGPathElement* imp = static_cast<SVGPathElement*>(castedThisObj->impl());


    JSC::JSValue* result = jsNumber(exec, imp->getTotalLength());
    return result;
}

JSValue* jsSVGPathElementPrototypeFunctionGetPointAtLength(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGPathElement::s_info))
        return throwError(exec, TypeError);
    JSSVGPathElement* castedThisObj = static_cast<JSSVGPathElement*>(thisValue);
    SVGPathElement* imp = static_cast<SVGPathElement*>(castedThisObj->impl());
    float distance = args.at(exec, 0)->toFloat(exec);


    JSC::JSValue* result = toJS(exec, JSSVGStaticPODTypeWrapper<FloatPoint>::create(imp->getPointAtLength(distance)).get(), imp);
    return result;
}

JSValue* jsSVGPathElementPrototypeFunctionGetPathSegAtLength(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGPathElement::s_info))
        return throwError(exec, TypeError);
    JSSVGPathElement* castedThisObj = static_cast<JSSVGPathElement*>(thisValue);
    SVGPathElement* imp = static_cast<SVGPathElement*>(castedThisObj->impl());
    float distance = args.at(exec, 0)->toFloat(exec);


    JSC::JSValue* result = jsNumber(exec, imp->getPathSegAtLength(distance));
    return result;
}

JSValue* jsSVGPathElementPrototypeFunctionCreateSVGPathSegClosePath(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGPathElement::s_info))
        return throwError(exec, TypeError);
    JSSVGPathElement* castedThisObj = static_cast<JSSVGPathElement*>(thisValue);
    SVGPathElement* imp = static_cast<SVGPathElement*>(castedThisObj->impl());


    JSC::JSValue* result = toJS(exec, WTF::getPtr(imp->createSVGPathSegClosePath()), imp);
    return result;
}

JSValue* jsSVGPathElementPrototypeFunctionCreateSVGPathSegMovetoAbs(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGPathElement::s_info))
        return throwError(exec, TypeError);
    JSSVGPathElement* castedThisObj = static_cast<JSSVGPathElement*>(thisValue);
    SVGPathElement* imp = static_cast<SVGPathElement*>(castedThisObj->impl());
    float x = args.at(exec, 0)->toFloat(exec);
    float y = args.at(exec, 1)->toFloat(exec);


    JSC::JSValue* result = toJS(exec, WTF::getPtr(imp->createSVGPathSegMovetoAbs(x, y)), imp);
    return result;
}

JSValue* jsSVGPathElementPrototypeFunctionCreateSVGPathSegMovetoRel(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGPathElement::s_info))
        return throwError(exec, TypeError);
    JSSVGPathElement* castedThisObj = static_cast<JSSVGPathElement*>(thisValue);
    SVGPathElement* imp = static_cast<SVGPathElement*>(castedThisObj->impl());
    float x = args.at(exec, 0)->toFloat(exec);
    float y = args.at(exec, 1)->toFloat(exec);


    JSC::JSValue* result = toJS(exec, WTF::getPtr(imp->createSVGPathSegMovetoRel(x, y)), imp);
    return result;
}

JSValue* jsSVGPathElementPrototypeFunctionCreateSVGPathSegLinetoAbs(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGPathElement::s_info))
        return throwError(exec, TypeError);
    JSSVGPathElement* castedThisObj = static_cast<JSSVGPathElement*>(thisValue);
    SVGPathElement* imp = static_cast<SVGPathElement*>(castedThisObj->impl());
    float x = args.at(exec, 0)->toFloat(exec);
    float y = args.at(exec, 1)->toFloat(exec);


    JSC::JSValue* result = toJS(exec, WTF::getPtr(imp->createSVGPathSegLinetoAbs(x, y)), imp);
    return result;
}

JSValue* jsSVGPathElementPrototypeFunctionCreateSVGPathSegLinetoRel(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGPathElement::s_info))
        return throwError(exec, TypeError);
    JSSVGPathElement* castedThisObj = static_cast<JSSVGPathElement*>(thisValue);
    SVGPathElement* imp = static_cast<SVGPathElement*>(castedThisObj->impl());
    float x = args.at(exec, 0)->toFloat(exec);
    float y = args.at(exec, 1)->toFloat(exec);


    JSC::JSValue* result = toJS(exec, WTF::getPtr(imp->createSVGPathSegLinetoRel(x, y)), imp);
    return result;
}

JSValue* jsSVGPathElementPrototypeFunctionCreateSVGPathSegCurvetoCubicAbs(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGPathElement::s_info))
        return throwError(exec, TypeError);
    JSSVGPathElement* castedThisObj = static_cast<JSSVGPathElement*>(thisValue);
    SVGPathElement* imp = static_cast<SVGPathElement*>(castedThisObj->impl());
    float x = args.at(exec, 0)->toFloat(exec);
    float y = args.at(exec, 1)->toFloat(exec);
    float x1 = args.at(exec, 2)->toFloat(exec);
    float y1 = args.at(exec, 3)->toFloat(exec);
    float x2 = args.at(exec, 4)->toFloat(exec);
    float y2 = args.at(exec, 5)->toFloat(exec);


    JSC::JSValue* result = toJS(exec, WTF::getPtr(imp->createSVGPathSegCurvetoCubicAbs(x, y, x1, y1, x2, y2)), imp);
    return result;
}

JSValue* jsSVGPathElementPrototypeFunctionCreateSVGPathSegCurvetoCubicRel(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGPathElement::s_info))
        return throwError(exec, TypeError);
    JSSVGPathElement* castedThisObj = static_cast<JSSVGPathElement*>(thisValue);
    SVGPathElement* imp = static_cast<SVGPathElement*>(castedThisObj->impl());
    float x = args.at(exec, 0)->toFloat(exec);
    float y = args.at(exec, 1)->toFloat(exec);
    float x1 = args.at(exec, 2)->toFloat(exec);
    float y1 = args.at(exec, 3)->toFloat(exec);
    float x2 = args.at(exec, 4)->toFloat(exec);
    float y2 = args.at(exec, 5)->toFloat(exec);


    JSC::JSValue* result = toJS(exec, WTF::getPtr(imp->createSVGPathSegCurvetoCubicRel(x, y, x1, y1, x2, y2)), imp);
    return result;
}

JSValue* jsSVGPathElementPrototypeFunctionCreateSVGPathSegCurvetoQuadraticAbs(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGPathElement::s_info))
        return throwError(exec, TypeError);
    JSSVGPathElement* castedThisObj = static_cast<JSSVGPathElement*>(thisValue);
    SVGPathElement* imp = static_cast<SVGPathElement*>(castedThisObj->impl());
    float x = args.at(exec, 0)->toFloat(exec);
    float y = args.at(exec, 1)->toFloat(exec);
    float x1 = args.at(exec, 2)->toFloat(exec);
    float y1 = args.at(exec, 3)->toFloat(exec);


    JSC::JSValue* result = toJS(exec, WTF::getPtr(imp->createSVGPathSegCurvetoQuadraticAbs(x, y, x1, y1)), imp);
    return result;
}

JSValue* jsSVGPathElementPrototypeFunctionCreateSVGPathSegCurvetoQuadraticRel(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGPathElement::s_info))
        return throwError(exec, TypeError);
    JSSVGPathElement* castedThisObj = static_cast<JSSVGPathElement*>(thisValue);
    SVGPathElement* imp = static_cast<SVGPathElement*>(castedThisObj->impl());
    float x = args.at(exec, 0)->toFloat(exec);
    float y = args.at(exec, 1)->toFloat(exec);
    float x1 = args.at(exec, 2)->toFloat(exec);
    float y1 = args.at(exec, 3)->toFloat(exec);


    JSC::JSValue* result = toJS(exec, WTF::getPtr(imp->createSVGPathSegCurvetoQuadraticRel(x, y, x1, y1)), imp);
    return result;
}

JSValue* jsSVGPathElementPrototypeFunctionCreateSVGPathSegArcAbs(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGPathElement::s_info))
        return throwError(exec, TypeError);
    JSSVGPathElement* castedThisObj = static_cast<JSSVGPathElement*>(thisValue);
    SVGPathElement* imp = static_cast<SVGPathElement*>(castedThisObj->impl());
    float x = args.at(exec, 0)->toFloat(exec);
    float y = args.at(exec, 1)->toFloat(exec);
    float r1 = args.at(exec, 2)->toFloat(exec);
    float r2 = args.at(exec, 3)->toFloat(exec);
    float angle = args.at(exec, 4)->toFloat(exec);
    bool largeArcFlag = args.at(exec, 5)->toBoolean(exec);
    bool sweepFlag = args.at(exec, 6)->toBoolean(exec);


    JSC::JSValue* result = toJS(exec, WTF::getPtr(imp->createSVGPathSegArcAbs(x, y, r1, r2, angle, largeArcFlag, sweepFlag)), imp);
    return result;
}

JSValue* jsSVGPathElementPrototypeFunctionCreateSVGPathSegArcRel(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGPathElement::s_info))
        return throwError(exec, TypeError);
    JSSVGPathElement* castedThisObj = static_cast<JSSVGPathElement*>(thisValue);
    SVGPathElement* imp = static_cast<SVGPathElement*>(castedThisObj->impl());
    float x = args.at(exec, 0)->toFloat(exec);
    float y = args.at(exec, 1)->toFloat(exec);
    float r1 = args.at(exec, 2)->toFloat(exec);
    float r2 = args.at(exec, 3)->toFloat(exec);
    float angle = args.at(exec, 4)->toFloat(exec);
    bool largeArcFlag = args.at(exec, 5)->toBoolean(exec);
    bool sweepFlag = args.at(exec, 6)->toBoolean(exec);


    JSC::JSValue* result = toJS(exec, WTF::getPtr(imp->createSVGPathSegArcRel(x, y, r1, r2, angle, largeArcFlag, sweepFlag)), imp);
    return result;
}

JSValue* jsSVGPathElementPrototypeFunctionCreateSVGPathSegLinetoHorizontalAbs(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGPathElement::s_info))
        return throwError(exec, TypeError);
    JSSVGPathElement* castedThisObj = static_cast<JSSVGPathElement*>(thisValue);
    SVGPathElement* imp = static_cast<SVGPathElement*>(castedThisObj->impl());
    float x = args.at(exec, 0)->toFloat(exec);


    JSC::JSValue* result = toJS(exec, WTF::getPtr(imp->createSVGPathSegLinetoHorizontalAbs(x)), imp);
    return result;
}

JSValue* jsSVGPathElementPrototypeFunctionCreateSVGPathSegLinetoHorizontalRel(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGPathElement::s_info))
        return throwError(exec, TypeError);
    JSSVGPathElement* castedThisObj = static_cast<JSSVGPathElement*>(thisValue);
    SVGPathElement* imp = static_cast<SVGPathElement*>(castedThisObj->impl());
    float x = args.at(exec, 0)->toFloat(exec);


    JSC::JSValue* result = toJS(exec, WTF::getPtr(imp->createSVGPathSegLinetoHorizontalRel(x)), imp);
    return result;
}

JSValue* jsSVGPathElementPrototypeFunctionCreateSVGPathSegLinetoVerticalAbs(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGPathElement::s_info))
        return throwError(exec, TypeError);
    JSSVGPathElement* castedThisObj = static_cast<JSSVGPathElement*>(thisValue);
    SVGPathElement* imp = static_cast<SVGPathElement*>(castedThisObj->impl());
    float y = args.at(exec, 0)->toFloat(exec);


    JSC::JSValue* result = toJS(exec, WTF::getPtr(imp->createSVGPathSegLinetoVerticalAbs(y)), imp);
    return result;
}

JSValue* jsSVGPathElementPrototypeFunctionCreateSVGPathSegLinetoVerticalRel(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGPathElement::s_info))
        return throwError(exec, TypeError);
    JSSVGPathElement* castedThisObj = static_cast<JSSVGPathElement*>(thisValue);
    SVGPathElement* imp = static_cast<SVGPathElement*>(castedThisObj->impl());
    float y = args.at(exec, 0)->toFloat(exec);


    JSC::JSValue* result = toJS(exec, WTF::getPtr(imp->createSVGPathSegLinetoVerticalRel(y)), imp);
    return result;
}

JSValue* jsSVGPathElementPrototypeFunctionCreateSVGPathSegCurvetoCubicSmoothAbs(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGPathElement::s_info))
        return throwError(exec, TypeError);
    JSSVGPathElement* castedThisObj = static_cast<JSSVGPathElement*>(thisValue);
    SVGPathElement* imp = static_cast<SVGPathElement*>(castedThisObj->impl());
    float x = args.at(exec, 0)->toFloat(exec);
    float y = args.at(exec, 1)->toFloat(exec);
    float x2 = args.at(exec, 2)->toFloat(exec);
    float y2 = args.at(exec, 3)->toFloat(exec);


    JSC::JSValue* result = toJS(exec, WTF::getPtr(imp->createSVGPathSegCurvetoCubicSmoothAbs(x, y, x2, y2)), imp);
    return result;
}

JSValue* jsSVGPathElementPrototypeFunctionCreateSVGPathSegCurvetoCubicSmoothRel(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGPathElement::s_info))
        return throwError(exec, TypeError);
    JSSVGPathElement* castedThisObj = static_cast<JSSVGPathElement*>(thisValue);
    SVGPathElement* imp = static_cast<SVGPathElement*>(castedThisObj->impl());
    float x = args.at(exec, 0)->toFloat(exec);
    float y = args.at(exec, 1)->toFloat(exec);
    float x2 = args.at(exec, 2)->toFloat(exec);
    float y2 = args.at(exec, 3)->toFloat(exec);


    JSC::JSValue* result = toJS(exec, WTF::getPtr(imp->createSVGPathSegCurvetoCubicSmoothRel(x, y, x2, y2)), imp);
    return result;
}

JSValue* jsSVGPathElementPrototypeFunctionCreateSVGPathSegCurvetoQuadraticSmoothAbs(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGPathElement::s_info))
        return throwError(exec, TypeError);
    JSSVGPathElement* castedThisObj = static_cast<JSSVGPathElement*>(thisValue);
    SVGPathElement* imp = static_cast<SVGPathElement*>(castedThisObj->impl());
    float x = args.at(exec, 0)->toFloat(exec);
    float y = args.at(exec, 1)->toFloat(exec);


    JSC::JSValue* result = toJS(exec, WTF::getPtr(imp->createSVGPathSegCurvetoQuadraticSmoothAbs(x, y)), imp);
    return result;
}

JSValue* jsSVGPathElementPrototypeFunctionCreateSVGPathSegCurvetoQuadraticSmoothRel(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGPathElement::s_info))
        return throwError(exec, TypeError);
    JSSVGPathElement* castedThisObj = static_cast<JSSVGPathElement*>(thisValue);
    SVGPathElement* imp = static_cast<SVGPathElement*>(castedThisObj->impl());
    float x = args.at(exec, 0)->toFloat(exec);
    float y = args.at(exec, 1)->toFloat(exec);


    JSC::JSValue* result = toJS(exec, WTF::getPtr(imp->createSVGPathSegCurvetoQuadraticSmoothRel(x, y)), imp);
    return result;
}

JSValue* jsSVGPathElementPrototypeFunctionHasExtension(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGPathElement::s_info))
        return throwError(exec, TypeError);
    JSSVGPathElement* castedThisObj = static_cast<JSSVGPathElement*>(thisValue);
    SVGPathElement* imp = static_cast<SVGPathElement*>(castedThisObj->impl());
    const UString& extension = args.at(exec, 0)->toString(exec);


    JSC::JSValue* result = jsBoolean(imp->hasExtension(extension));
    return result;
}

JSValue* jsSVGPathElementPrototypeFunctionGetPresentationAttribute(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGPathElement::s_info))
        return throwError(exec, TypeError);
    JSSVGPathElement* castedThisObj = static_cast<JSSVGPathElement*>(thisValue);
    SVGPathElement* imp = static_cast<SVGPathElement*>(castedThisObj->impl());
    const UString& name = args.at(exec, 0)->toString(exec);


    JSC::JSValue* result = toJS(exec, WTF::getPtr(imp->getPresentationAttribute(name)));
    return result;
}

JSValue* jsSVGPathElementPrototypeFunctionGetBBox(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGPathElement::s_info))
        return throwError(exec, TypeError);
    JSSVGPathElement* castedThisObj = static_cast<JSSVGPathElement*>(thisValue);
    SVGPathElement* imp = static_cast<SVGPathElement*>(castedThisObj->impl());


    JSC::JSValue* result = toJS(exec, JSSVGStaticPODTypeWrapper<FloatRect>::create(imp->getBBox()).get(), imp);
    return result;
}

JSValue* jsSVGPathElementPrototypeFunctionGetCTM(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGPathElement::s_info))
        return throwError(exec, TypeError);
    JSSVGPathElement* castedThisObj = static_cast<JSSVGPathElement*>(thisValue);
    SVGPathElement* imp = static_cast<SVGPathElement*>(castedThisObj->impl());


    JSC::JSValue* result = toJS(exec, JSSVGStaticPODTypeWrapper<AffineTransform>::create(imp->getCTM()).get(), imp);
    return result;
}

JSValue* jsSVGPathElementPrototypeFunctionGetScreenCTM(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGPathElement::s_info))
        return throwError(exec, TypeError);
    JSSVGPathElement* castedThisObj = static_cast<JSSVGPathElement*>(thisValue);
    SVGPathElement* imp = static_cast<SVGPathElement*>(castedThisObj->impl());


    JSC::JSValue* result = toJS(exec, JSSVGStaticPODTypeWrapper<AffineTransform>::create(imp->getScreenCTM()).get(), imp);
    return result;
}

JSValue* jsSVGPathElementPrototypeFunctionGetTransformToElement(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGPathElement::s_info))
        return throwError(exec, TypeError);
    JSSVGPathElement* castedThisObj = static_cast<JSSVGPathElement*>(thisValue);
    SVGPathElement* imp = static_cast<SVGPathElement*>(castedThisObj->impl());
    ExceptionCode ec = 0;
    SVGElement* element = toSVGElement(args.at(exec, 0));


    JSC::JSValue* result = toJS(exec, JSSVGStaticPODTypeWrapper<AffineTransform>::create(imp->getTransformToElement(element, ec)).get(), imp);
    setDOMException(exec, ec);
    return result;
}


}

#endif // ENABLE(SVG)
