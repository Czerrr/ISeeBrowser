/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#include "JSSQLError.h"

#include <wtf/GetPtr.h>

#include "KURL.h"
#include "SQLError.h"

#include <kjs/JSNumberCell.h>
#include <kjs/JSString.h>

using namespace JSC;

namespace WebCore {

ASSERT_CLASS_FITS_IN_CELL(JSSQLError)

/* Hash table */

static const HashTableValue JSSQLErrorTableValues[3] =
{
    { "code", (intptr_t)JSSQLError::CodeAttrNum, DontDelete|ReadOnly, 0 },
    { "message", (intptr_t)JSSQLError::MessageAttrNum, DontDelete|ReadOnly, 0 },
    { 0, 0, 0, 0 }
};

static const HashTable JSSQLErrorTable = { 3, JSSQLErrorTableValues, 0 };

/* Hash table for prototype */

static const HashTableValue JSSQLErrorPrototypeTableValues[1] =
{
    { 0, 0, 0, 0 }
};

static const HashTable JSSQLErrorPrototypeTable = { 0, JSSQLErrorPrototypeTableValues, 0 };

const ClassInfo JSSQLErrorPrototype::s_info = { "SQLErrorPrototype", 0, &JSSQLErrorPrototypeTable, 0 };

JSObject* JSSQLErrorPrototype::self(ExecState* exec)
{
    static const Identifier* prototypeIdentifier = new Identifier(exec, "[[JSSQLError.prototype]]");
    return JSC::cacheGlobalObject<JSSQLErrorPrototype>(exec, *prototypeIdentifier);
}

const ClassInfo JSSQLError::s_info = { "SQLError", 0, &JSSQLErrorTable , 0 };

JSSQLError::JSSQLError(JSObject* prototype, SQLError* impl)
    : DOMObject(prototype)
    , m_impl(impl)
{
}

JSSQLError::~JSSQLError()
{
    ScriptInterpreter::forgetDOMObject(m_impl.get());

}

bool JSSQLError::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSSQLError, Base>(exec, &JSSQLErrorTable, this, propertyName, slot);
}

JSValue* JSSQLError::getValueProperty(ExecState* exec, int token) const
{
    switch (token) {
    case CodeAttrNum: {
        SQLError* imp = static_cast<SQLError*>(impl());
        return jsNumber(exec, imp->code());
    }
    case MessageAttrNum: {
        SQLError* imp = static_cast<SQLError*>(impl());
        return jsString(exec, imp->message());
    }
    }
    return 0;
}

JSC::JSValue* toJS(JSC::ExecState* exec, SQLError* obj)
{
    return cacheDOMObject<SQLError, JSSQLError, JSSQLErrorPrototype>(exec, obj);
}
SQLError* toSQLError(JSC::JSValue* val)
{
    return val->isObject(&JSSQLError::s_info) ? static_cast<JSSQLError*>(val)->impl() : 0;
}

}
