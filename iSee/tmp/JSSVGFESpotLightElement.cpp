/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"


#if ENABLE(SVG) && ENABLE(SVG_FILTERS)

#include "Document.h"
#include "Frame.h"
#include "SVGDocumentExtensions.h"
#include "SVGElement.h"
#include "SVGAnimatedTemplate.h"
#include "JSSVGFESpotLightElement.h"

#include <wtf/GetPtr.h>

#include "JSSVGAnimatedNumber.h"
#include "SVGFESpotLightElement.h"


using namespace JSC;

namespace WebCore {

ASSERT_CLASS_FITS_IN_CELL(JSSVGFESpotLightElement)

/* Hash table */

static const HashTableValue JSSVGFESpotLightElementTableValues[9] =
{
    { "x", (intptr_t)JSSVGFESpotLightElement::XAttrNum, DontDelete|ReadOnly, 0 },
    { "y", (intptr_t)JSSVGFESpotLightElement::YAttrNum, DontDelete|ReadOnly, 0 },
    { "z", (intptr_t)JSSVGFESpotLightElement::ZAttrNum, DontDelete|ReadOnly, 0 },
    { "pointsAtX", (intptr_t)JSSVGFESpotLightElement::PointsAtXAttrNum, DontDelete|ReadOnly, 0 },
    { "pointsAtY", (intptr_t)JSSVGFESpotLightElement::PointsAtYAttrNum, DontDelete|ReadOnly, 0 },
    { "pointsAtZ", (intptr_t)JSSVGFESpotLightElement::PointsAtZAttrNum, DontDelete|ReadOnly, 0 },
    { "specularExponent", (intptr_t)JSSVGFESpotLightElement::SpecularExponentAttrNum, DontDelete|ReadOnly, 0 },
    { "limitingConeAngle", (intptr_t)JSSVGFESpotLightElement::LimitingConeAngleAttrNum, DontDelete|ReadOnly, 0 },
    { 0, 0, 0, 0 }
};

static const HashTable JSSVGFESpotLightElementTable = { 15, JSSVGFESpotLightElementTableValues, 0 };

/* Hash table for prototype */

static const HashTableValue JSSVGFESpotLightElementPrototypeTableValues[1] =
{
    { 0, 0, 0, 0 }
};

static const HashTable JSSVGFESpotLightElementPrototypeTable = { 0, JSSVGFESpotLightElementPrototypeTableValues, 0 };

const ClassInfo JSSVGFESpotLightElementPrototype::s_info = { "SVGFESpotLightElementPrototype", 0, &JSSVGFESpotLightElementPrototypeTable, 0 };

JSObject* JSSVGFESpotLightElementPrototype::self(ExecState* exec)
{
    static const Identifier* prototypeIdentifier = new Identifier(exec, "[[JSSVGFESpotLightElement.prototype]]");
    return JSC::cacheGlobalObject<JSSVGFESpotLightElementPrototype>(exec, *prototypeIdentifier);
}

const ClassInfo JSSVGFESpotLightElement::s_info = { "SVGFESpotLightElement", &JSSVGElement::s_info, &JSSVGFESpotLightElementTable , 0 };

JSSVGFESpotLightElement::JSSVGFESpotLightElement(JSObject* prototype, SVGFESpotLightElement* impl)
    : JSSVGElement(prototype, impl)
{
}

bool JSSVGFESpotLightElement::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSSVGFESpotLightElement, Base>(exec, &JSSVGFESpotLightElementTable, this, propertyName, slot);
}

JSValue* JSSVGFESpotLightElement::getValueProperty(ExecState* exec, int token) const
{
    switch (token) {
    case XAttrNum: {
        SVGFESpotLightElement* imp = static_cast<SVGFESpotLightElement*>(impl());
        RefPtr<SVGAnimatedNumber> obj = imp->xAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case YAttrNum: {
        SVGFESpotLightElement* imp = static_cast<SVGFESpotLightElement*>(impl());
        RefPtr<SVGAnimatedNumber> obj = imp->yAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case ZAttrNum: {
        SVGFESpotLightElement* imp = static_cast<SVGFESpotLightElement*>(impl());
        RefPtr<SVGAnimatedNumber> obj = imp->zAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case PointsAtXAttrNum: {
        SVGFESpotLightElement* imp = static_cast<SVGFESpotLightElement*>(impl());
        RefPtr<SVGAnimatedNumber> obj = imp->pointsAtXAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case PointsAtYAttrNum: {
        SVGFESpotLightElement* imp = static_cast<SVGFESpotLightElement*>(impl());
        RefPtr<SVGAnimatedNumber> obj = imp->pointsAtYAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case PointsAtZAttrNum: {
        SVGFESpotLightElement* imp = static_cast<SVGFESpotLightElement*>(impl());
        RefPtr<SVGAnimatedNumber> obj = imp->pointsAtZAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case SpecularExponentAttrNum: {
        SVGFESpotLightElement* imp = static_cast<SVGFESpotLightElement*>(impl());
        RefPtr<SVGAnimatedNumber> obj = imp->specularExponentAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case LimitingConeAngleAttrNum: {
        SVGFESpotLightElement* imp = static_cast<SVGFESpotLightElement*>(impl());
        RefPtr<SVGAnimatedNumber> obj = imp->limitingConeAngleAnimated();
        return toJS(exec, obj.get(), imp);
    }
    }
    return 0;
}


}

#endif // ENABLE(SVG) && ENABLE(SVG_FILTERS)
