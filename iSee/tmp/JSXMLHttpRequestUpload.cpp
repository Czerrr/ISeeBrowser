/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#include "JSXMLHttpRequestUpload.h"

#include <wtf/GetPtr.h>

#include "XMLHttpRequestUpload.h"

#include <kjs/Error.h>
#include <kjs/JSNumberCell.h>

using namespace JSC;

namespace WebCore {

ASSERT_CLASS_FITS_IN_CELL(JSXMLHttpRequestUpload)

/* Hash table */

static const HashTableValue JSXMLHttpRequestUploadTableValues[7] =
{
    { "onabort", (intptr_t)JSXMLHttpRequestUpload::OnabortAttrNum, DontDelete, 0 },
    { "onerror", (intptr_t)JSXMLHttpRequestUpload::OnerrorAttrNum, DontDelete, 0 },
    { "onload", (intptr_t)JSXMLHttpRequestUpload::OnloadAttrNum, DontDelete, 0 },
    { "onloadstart", (intptr_t)JSXMLHttpRequestUpload::OnloadstartAttrNum, DontDelete, 0 },
    { "onprogress", (intptr_t)JSXMLHttpRequestUpload::OnprogressAttrNum, DontDelete, 0 },
    { "constructor", (intptr_t)JSXMLHttpRequestUpload::ConstructorAttrNum, DontEnum, 0 },
    { 0, 0, 0, 0 }
};

static const HashTable JSXMLHttpRequestUploadTable = { 15, JSXMLHttpRequestUploadTableValues, 0 };

/* Hash table for constructor */

static const HashTableValue JSXMLHttpRequestUploadConstructorTableValues[1] =
{
    { 0, 0, 0, 0 }
};

static const HashTable JSXMLHttpRequestUploadConstructorTable = { 0, JSXMLHttpRequestUploadConstructorTableValues, 0 };

class JSXMLHttpRequestUploadConstructor : public DOMObject {
public:
    JSXMLHttpRequestUploadConstructor(ExecState* exec)
        : DOMObject(exec->lexicalGlobalObject()->objectPrototype())
    {
        putDirect(exec->propertyNames().prototype, JSXMLHttpRequestUploadPrototype::self(exec), None);
    }
    virtual bool getOwnPropertySlot(ExecState*, const Identifier&, PropertySlot&);
    JSValue* getValueProperty(ExecState*, int token) const;
    virtual const ClassInfo* classInfo() const { return &s_info; }
    static const ClassInfo s_info;

    virtual bool implementsHasInstance() const { return true; }
};

const ClassInfo JSXMLHttpRequestUploadConstructor::s_info = { "XMLHttpRequestUploadConstructor", 0, &JSXMLHttpRequestUploadConstructorTable, 0 };

bool JSXMLHttpRequestUploadConstructor::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSXMLHttpRequestUploadConstructor, DOMObject>(exec, &JSXMLHttpRequestUploadConstructorTable, this, propertyName, slot);
}

JSValue* JSXMLHttpRequestUploadConstructor::getValueProperty(ExecState* exec, int token) const
{
    // The token is the numeric value of its associated constant
    return jsNumber(exec, token);
}

/* Hash table for prototype */

static const HashTableValue JSXMLHttpRequestUploadPrototypeTableValues[4] =
{
    { "addEventListener", (intptr_t)jsXMLHttpRequestUploadPrototypeFunctionAddEventListener, DontDelete|Function, 3 },
    { "removeEventListener", (intptr_t)jsXMLHttpRequestUploadPrototypeFunctionRemoveEventListener, DontDelete|Function, 3 },
    { "dispatchEvent", (intptr_t)jsXMLHttpRequestUploadPrototypeFunctionDispatchEvent, DontDelete|Function, 1 },
    { 0, 0, 0, 0 }
};

static const HashTable JSXMLHttpRequestUploadPrototypeTable = { 3, JSXMLHttpRequestUploadPrototypeTableValues, 0 };

const ClassInfo JSXMLHttpRequestUploadPrototype::s_info = { "XMLHttpRequestUploadPrototype", 0, &JSXMLHttpRequestUploadPrototypeTable, 0 };

JSObject* JSXMLHttpRequestUploadPrototype::self(ExecState* exec)
{
    static const Identifier* prototypeIdentifier = new Identifier(exec, "[[JSXMLHttpRequestUpload.prototype]]");
    return JSC::cacheGlobalObject<JSXMLHttpRequestUploadPrototype>(exec, *prototypeIdentifier);
}

bool JSXMLHttpRequestUploadPrototype::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticFunctionSlot<JSObject>(exec, &JSXMLHttpRequestUploadPrototypeTable, this, propertyName, slot);
}

const ClassInfo JSXMLHttpRequestUpload::s_info = { "XMLHttpRequestUpload", 0, &JSXMLHttpRequestUploadTable , 0 };

JSXMLHttpRequestUpload::JSXMLHttpRequestUpload(JSObject* prototype, XMLHttpRequestUpload* impl)
    : DOMObject(prototype)
    , m_impl(impl)
{
}

JSXMLHttpRequestUpload::~JSXMLHttpRequestUpload()
{
    ScriptInterpreter::forgetDOMObject(m_impl.get());

}

bool JSXMLHttpRequestUpload::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSXMLHttpRequestUpload, Base>(exec, &JSXMLHttpRequestUploadTable, this, propertyName, slot);
}

JSValue* JSXMLHttpRequestUpload::getValueProperty(ExecState* exec, int token) const
{
    switch (token) {
    case OnabortAttrNum: {
        return onabort(exec);
    }
    case OnerrorAttrNum: {
        return onerror(exec);
    }
    case OnloadAttrNum: {
        return onload(exec);
    }
    case OnloadstartAttrNum: {
        return onloadstart(exec);
    }
    case OnprogressAttrNum: {
        return onprogress(exec);
    }
    case ConstructorAttrNum:
        return getConstructor(exec);
    }
    return 0;
}

void JSXMLHttpRequestUpload::put(ExecState* exec, const Identifier& propertyName, JSValue* value, PutPropertySlot& slot)
{
    lookupPut<JSXMLHttpRequestUpload, Base>(exec, propertyName, value, &JSXMLHttpRequestUploadTable, this, slot);
}

void JSXMLHttpRequestUpload::putValueProperty(ExecState* exec, int token, JSValue* value)
{
    switch (token) {
    case OnabortAttrNum: {
        setOnabort(exec, value);
        break;
    }
    case OnerrorAttrNum: {
        setOnerror(exec, value);
        break;
    }
    case OnloadAttrNum: {
        setOnload(exec, value);
        break;
    }
    case OnloadstartAttrNum: {
        setOnloadstart(exec, value);
        break;
    }
    case OnprogressAttrNum: {
        setOnprogress(exec, value);
        break;
    }
    }
}

JSValue* JSXMLHttpRequestUpload::getConstructor(ExecState* exec)
{
    static const Identifier* constructorIdentifier = new Identifier(exec, "[[XMLHttpRequestUpload.constructor]]");
    return JSC::cacheGlobalObject<JSXMLHttpRequestUploadConstructor>(exec, *constructorIdentifier);
}

JSValue* jsXMLHttpRequestUploadPrototypeFunctionAddEventListener(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSXMLHttpRequestUpload::s_info))
        return throwError(exec, TypeError);
    JSXMLHttpRequestUpload* castedThisObj = static_cast<JSXMLHttpRequestUpload*>(thisValue);
    return castedThisObj->addEventListener(exec, args);
}

JSValue* jsXMLHttpRequestUploadPrototypeFunctionRemoveEventListener(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSXMLHttpRequestUpload::s_info))
        return throwError(exec, TypeError);
    JSXMLHttpRequestUpload* castedThisObj = static_cast<JSXMLHttpRequestUpload*>(thisValue);
    return castedThisObj->removeEventListener(exec, args);
}

JSValue* jsXMLHttpRequestUploadPrototypeFunctionDispatchEvent(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSXMLHttpRequestUpload::s_info))
        return throwError(exec, TypeError);
    JSXMLHttpRequestUpload* castedThisObj = static_cast<JSXMLHttpRequestUpload*>(thisValue);
    return castedThisObj->dispatchEvent(exec, args);
}

JSC::JSValue* toJS(JSC::ExecState* exec, XMLHttpRequestUpload* obj)
{
    return cacheDOMObject<XMLHttpRequestUpload, JSXMLHttpRequestUpload, JSXMLHttpRequestUploadPrototype>(exec, obj);
}
XMLHttpRequestUpload* toXMLHttpRequestUpload(JSC::JSValue* val)
{
    return val->isObject(&JSXMLHttpRequestUpload::s_info) ? static_cast<JSXMLHttpRequestUpload*>(val)->impl() : 0;
}

}
