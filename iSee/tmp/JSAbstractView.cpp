/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#include "JSAbstractView.h"

#include <wtf/GetPtr.h>

#include "AbstractView.h"
#include "Document.h"
#include "JSDocument.h"


using namespace JSC;

namespace WebCore {

ASSERT_CLASS_FITS_IN_CELL(JSAbstractView)

/* Hash table */

static const HashTableValue JSAbstractViewTableValues[2] =
{
    { "document", (intptr_t)JSAbstractView::DocumentAttrNum, DontDelete|ReadOnly, 0 },
    { 0, 0, 0, 0 }
};

static const HashTable JSAbstractViewTable = { 0, JSAbstractViewTableValues, 0 };

/* Hash table for prototype */

static const HashTableValue JSAbstractViewPrototypeTableValues[1] =
{
    { 0, 0, 0, 0 }
};

static const HashTable JSAbstractViewPrototypeTable = { 0, JSAbstractViewPrototypeTableValues, 0 };

const ClassInfo JSAbstractViewPrototype::s_info = { "AbstractViewPrototype", 0, &JSAbstractViewPrototypeTable, 0 };

JSObject* JSAbstractViewPrototype::self(ExecState* exec)
{
    static const Identifier* prototypeIdentifier = new Identifier(exec, "[[JSAbstractView.prototype]]");
    return JSC::cacheGlobalObject<JSAbstractViewPrototype>(exec, *prototypeIdentifier);
}

const ClassInfo JSAbstractView::s_info = { "AbstractView", 0, &JSAbstractViewTable , 0 };

JSAbstractView::JSAbstractView(JSObject* prototype, AbstractView* impl)
    : DOMObject(prototype)
    , m_impl(impl)
{
}

JSAbstractView::~JSAbstractView()
{
    ScriptInterpreter::forgetDOMObject(m_impl.get());

}

bool JSAbstractView::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSAbstractView, Base>(exec, &JSAbstractViewTable, this, propertyName, slot);
}

JSValue* JSAbstractView::getValueProperty(ExecState* exec, int token) const
{
    switch (token) {
    case DocumentAttrNum: {
        AbstractView* imp = static_cast<AbstractView*>(impl());
        return toJS(exec, WTF::getPtr(imp->document()));
    }
    }
    return 0;
}

JSC::JSValue* toJS(JSC::ExecState* exec, AbstractView* obj)
{
    return cacheDOMObject<AbstractView, JSAbstractView, JSAbstractViewPrototype>(exec, obj);
}
AbstractView* toAbstractView(JSC::JSValue* val)
{
    return val->isObject(&JSAbstractView::s_info) ? static_cast<JSAbstractView*>(val)->impl() : 0;
}

}
