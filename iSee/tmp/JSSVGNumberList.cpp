/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"


#if ENABLE(SVG)

#include "Document.h"
#include "Frame.h"
#include "SVGDocumentExtensions.h"
#include "SVGElement.h"
#include "SVGAnimatedTemplate.h"
#include "JSSVGNumberList.h"

#include <wtf/GetPtr.h>

#include "JSSVGNumber.h"
#include "SVGNumberList.h"

#include <kjs/Error.h>
#include <kjs/JSNumberCell.h>

using namespace JSC;

namespace WebCore {

ASSERT_CLASS_FITS_IN_CELL(JSSVGNumberList)

/* Hash table */

static const HashTableValue JSSVGNumberListTableValues[2] =
{
    { "numberOfItems", (intptr_t)JSSVGNumberList::NumberOfItemsAttrNum, DontDelete|ReadOnly, 0 },
    { 0, 0, 0, 0 }
};

static const HashTable JSSVGNumberListTable = { 0, JSSVGNumberListTableValues, 0 };

/* Hash table for prototype */

static const HashTableValue JSSVGNumberListPrototypeTableValues[8] =
{
    { "clear", (intptr_t)jsSVGNumberListPrototypeFunctionClear, DontDelete|Function, 0 },
    { "initialize", (intptr_t)jsSVGNumberListPrototypeFunctionInitialize, DontDelete|Function, 1 },
    { "getItem", (intptr_t)jsSVGNumberListPrototypeFunctionGetItem, DontDelete|Function, 1 },
    { "insertItemBefore", (intptr_t)jsSVGNumberListPrototypeFunctionInsertItemBefore, DontDelete|Function, 2 },
    { "replaceItem", (intptr_t)jsSVGNumberListPrototypeFunctionReplaceItem, DontDelete|Function, 2 },
    { "removeItem", (intptr_t)jsSVGNumberListPrototypeFunctionRemoveItem, DontDelete|Function, 1 },
    { "appendItem", (intptr_t)jsSVGNumberListPrototypeFunctionAppendItem, DontDelete|Function, 1 },
    { 0, 0, 0, 0 }
};

static const HashTable JSSVGNumberListPrototypeTable = { 63, JSSVGNumberListPrototypeTableValues, 0 };

const ClassInfo JSSVGNumberListPrototype::s_info = { "SVGNumberListPrototype", 0, &JSSVGNumberListPrototypeTable, 0 };

JSObject* JSSVGNumberListPrototype::self(ExecState* exec)
{
    static const Identifier* prototypeIdentifier = new Identifier(exec, "[[JSSVGNumberList.prototype]]");
    return JSC::cacheGlobalObject<JSSVGNumberListPrototype>(exec, *prototypeIdentifier);
}

bool JSSVGNumberListPrototype::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticFunctionSlot<JSObject>(exec, &JSSVGNumberListPrototypeTable, this, propertyName, slot);
}

const ClassInfo JSSVGNumberList::s_info = { "SVGNumberList", 0, &JSSVGNumberListTable , 0 };

JSSVGNumberList::JSSVGNumberList(JSObject* prototype, SVGNumberList* impl, SVGElement* context)
    : DOMObject(prototype)
    , m_context(context)
    , m_impl(impl)
{
}

JSSVGNumberList::~JSSVGNumberList()
{
    ScriptInterpreter::forgetDOMObject(m_impl.get());

}

bool JSSVGNumberList::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSSVGNumberList, Base>(exec, &JSSVGNumberListTable, this, propertyName, slot);
}

JSValue* JSSVGNumberList::getValueProperty(ExecState* exec, int token) const
{
    switch (token) {
    case NumberOfItemsAttrNum: {
        SVGNumberList* imp = static_cast<SVGNumberList*>(impl());
        return jsNumber(exec, imp->numberOfItems());
    }
    }
    return 0;
}

JSValue* jsSVGNumberListPrototypeFunctionClear(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGNumberList::s_info))
        return throwError(exec, TypeError);
    JSSVGNumberList* castedThisObj = static_cast<JSSVGNumberList*>(thisValue);
    SVGNumberList* imp = static_cast<SVGNumberList*>(castedThisObj->impl());
    ExceptionCode ec = 0;

    imp->clear(ec);
    setDOMException(exec, ec);
    return jsUndefined();
}

JSValue* jsSVGNumberListPrototypeFunctionInitialize(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGNumberList::s_info))
        return throwError(exec, TypeError);
    JSSVGNumberList* castedThisObj = static_cast<JSSVGNumberList*>(thisValue);
    SVGNumberList* imp = static_cast<SVGNumberList*>(castedThisObj->impl());
    ExceptionCode ec = 0;
    float item = args.at(exec, 0)->toFloat(exec);


    JSC::JSValue* result = toJS(exec, JSSVGStaticPODTypeWrapper<float>::create(imp->initialize(item, ec)).get(), castedThisObj->context());
    setDOMException(exec, ec);
    return result;
}

JSValue* jsSVGNumberListPrototypeFunctionGetItem(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGNumberList::s_info))
        return throwError(exec, TypeError);
    JSSVGNumberList* castedThisObj = static_cast<JSSVGNumberList*>(thisValue);
    SVGNumberList* imp = static_cast<SVGNumberList*>(castedThisObj->impl());
    ExceptionCode ec = 0;
    unsigned index = args.at(exec, 0)->toInt32(exec);


    JSC::JSValue* result = toJS(exec, JSSVGStaticPODTypeWrapper<float>::create(imp->getItem(index, ec)).get(), castedThisObj->context());
    setDOMException(exec, ec);
    return result;
}

JSValue* jsSVGNumberListPrototypeFunctionInsertItemBefore(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGNumberList::s_info))
        return throwError(exec, TypeError);
    JSSVGNumberList* castedThisObj = static_cast<JSSVGNumberList*>(thisValue);
    SVGNumberList* imp = static_cast<SVGNumberList*>(castedThisObj->impl());
    ExceptionCode ec = 0;
    float item = args.at(exec, 0)->toFloat(exec);
    unsigned index = args.at(exec, 1)->toInt32(exec);


    JSC::JSValue* result = toJS(exec, JSSVGStaticPODTypeWrapper<float>::create(imp->insertItemBefore(item, index, ec)).get(), castedThisObj->context());
    setDOMException(exec, ec);
    return result;
}

JSValue* jsSVGNumberListPrototypeFunctionReplaceItem(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGNumberList::s_info))
        return throwError(exec, TypeError);
    JSSVGNumberList* castedThisObj = static_cast<JSSVGNumberList*>(thisValue);
    SVGNumberList* imp = static_cast<SVGNumberList*>(castedThisObj->impl());
    ExceptionCode ec = 0;
    float item = args.at(exec, 0)->toFloat(exec);
    unsigned index = args.at(exec, 1)->toInt32(exec);


    JSC::JSValue* result = toJS(exec, JSSVGStaticPODTypeWrapper<float>::create(imp->replaceItem(item, index, ec)).get(), castedThisObj->context());
    setDOMException(exec, ec);
    return result;
}

JSValue* jsSVGNumberListPrototypeFunctionRemoveItem(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGNumberList::s_info))
        return throwError(exec, TypeError);
    JSSVGNumberList* castedThisObj = static_cast<JSSVGNumberList*>(thisValue);
    SVGNumberList* imp = static_cast<SVGNumberList*>(castedThisObj->impl());
    ExceptionCode ec = 0;
    unsigned index = args.at(exec, 0)->toInt32(exec);


    JSC::JSValue* result = toJS(exec, JSSVGStaticPODTypeWrapper<float>::create(imp->removeItem(index, ec)).get(), castedThisObj->context());
    setDOMException(exec, ec);
    return result;
}

JSValue* jsSVGNumberListPrototypeFunctionAppendItem(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGNumberList::s_info))
        return throwError(exec, TypeError);
    JSSVGNumberList* castedThisObj = static_cast<JSSVGNumberList*>(thisValue);
    SVGNumberList* imp = static_cast<SVGNumberList*>(castedThisObj->impl());
    ExceptionCode ec = 0;
    float item = args.at(exec, 0)->toFloat(exec);


    JSC::JSValue* result = toJS(exec, JSSVGStaticPODTypeWrapper<float>::create(imp->appendItem(item, ec)).get(), castedThisObj->context());
    setDOMException(exec, ec);
    return result;
}

JSC::JSValue* toJS(JSC::ExecState* exec, SVGNumberList* obj, SVGElement* context)
{
    return cacheSVGDOMObject<SVGNumberList, JSSVGNumberList, JSSVGNumberListPrototype>(exec, obj, context);
}
SVGNumberList* toSVGNumberList(JSC::JSValue* val)
{
    return val->isObject(&JSSVGNumberList::s_info) ? static_cast<JSSVGNumberList*>(val)->impl() : 0;
}

}

#endif // ENABLE(SVG)
