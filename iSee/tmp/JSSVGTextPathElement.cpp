/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"


#if ENABLE(SVG)

#include "Document.h"
#include "Frame.h"
#include "SVGDocumentExtensions.h"
#include "SVGElement.h"
#include "SVGAnimatedTemplate.h"
#include "JSSVGTextPathElement.h"

#include <wtf/GetPtr.h>

#include "JSSVGAnimatedEnumeration.h"
#include "JSSVGAnimatedLength.h"
#include "JSSVGAnimatedString.h"
#include "SVGTextPathElement.h"

#include <kjs/JSNumberCell.h>

using namespace JSC;

namespace WebCore {

ASSERT_CLASS_FITS_IN_CELL(JSSVGTextPathElement)

/* Hash table */

static const HashTableValue JSSVGTextPathElementTableValues[6] =
{
    { "startOffset", (intptr_t)JSSVGTextPathElement::StartOffsetAttrNum, DontDelete|ReadOnly, 0 },
    { "method", (intptr_t)JSSVGTextPathElement::MethodAttrNum, DontDelete|ReadOnly, 0 },
    { "spacing", (intptr_t)JSSVGTextPathElement::SpacingAttrNum, DontDelete|ReadOnly, 0 },
    { "href", (intptr_t)JSSVGTextPathElement::HrefAttrNum, DontDelete|ReadOnly, 0 },
    { "constructor", (intptr_t)JSSVGTextPathElement::ConstructorAttrNum, DontEnum, 0 },
    { 0, 0, 0, 0 }
};

static const HashTable JSSVGTextPathElementTable = { 15, JSSVGTextPathElementTableValues, 0 };

/* Hash table for constructor */

static const HashTableValue JSSVGTextPathElementConstructorTableValues[7] =
{
    { "TEXTPATH_METHODTYPE_UNKNOWN", (intptr_t)0, DontDelete|ReadOnly, 0 },
    { "TEXTPATH_METHODTYPE_ALIGN", (intptr_t)1, DontDelete|ReadOnly, 0 },
    { "TEXTPATH_METHODTYPE_STRETCH", (intptr_t)2, DontDelete|ReadOnly, 0 },
    { "TEXTPATH_SPACINGTYPE_UNKNOWN", (intptr_t)0, DontDelete|ReadOnly, 0 },
    { "TEXTPATH_SPACINGTYPE_AUTO", (intptr_t)1, DontDelete|ReadOnly, 0 },
    { "TEXTPATH_SPACINGTYPE_EXACT", (intptr_t)2, DontDelete|ReadOnly, 0 },
    { 0, 0, 0, 0 }
};

static const HashTable JSSVGTextPathElementConstructorTable = { 31, JSSVGTextPathElementConstructorTableValues, 0 };

class JSSVGTextPathElementConstructor : public DOMObject {
public:
    JSSVGTextPathElementConstructor(ExecState* exec)
        : DOMObject(exec->lexicalGlobalObject()->objectPrototype())
    {
        putDirect(exec->propertyNames().prototype, JSSVGTextPathElementPrototype::self(exec), None);
    }
    virtual bool getOwnPropertySlot(ExecState*, const Identifier&, PropertySlot&);
    JSValue* getValueProperty(ExecState*, int token) const;
    virtual const ClassInfo* classInfo() const { return &s_info; }
    static const ClassInfo s_info;

    virtual bool implementsHasInstance() const { return true; }
};

const ClassInfo JSSVGTextPathElementConstructor::s_info = { "SVGTextPathElementConstructor", 0, &JSSVGTextPathElementConstructorTable, 0 };

bool JSSVGTextPathElementConstructor::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSSVGTextPathElementConstructor, DOMObject>(exec, &JSSVGTextPathElementConstructorTable, this, propertyName, slot);
}

JSValue* JSSVGTextPathElementConstructor::getValueProperty(ExecState* exec, int token) const
{
    // The token is the numeric value of its associated constant
    return jsNumber(exec, token);
}

/* Hash table for prototype */

static const HashTableValue JSSVGTextPathElementPrototypeTableValues[7] =
{
    { "TEXTPATH_METHODTYPE_UNKNOWN", (intptr_t)0, DontDelete|ReadOnly, 0 },
    { "TEXTPATH_METHODTYPE_ALIGN", (intptr_t)1, DontDelete|ReadOnly, 0 },
    { "TEXTPATH_METHODTYPE_STRETCH", (intptr_t)2, DontDelete|ReadOnly, 0 },
    { "TEXTPATH_SPACINGTYPE_UNKNOWN", (intptr_t)0, DontDelete|ReadOnly, 0 },
    { "TEXTPATH_SPACINGTYPE_AUTO", (intptr_t)1, DontDelete|ReadOnly, 0 },
    { "TEXTPATH_SPACINGTYPE_EXACT", (intptr_t)2, DontDelete|ReadOnly, 0 },
    { 0, 0, 0, 0 }
};

static const HashTable JSSVGTextPathElementPrototypeTable = { 31, JSSVGTextPathElementPrototypeTableValues, 0 };

const ClassInfo JSSVGTextPathElementPrototype::s_info = { "SVGTextPathElementPrototype", 0, &JSSVGTextPathElementPrototypeTable, 0 };

JSObject* JSSVGTextPathElementPrototype::self(ExecState* exec)
{
    static const Identifier* prototypeIdentifier = new Identifier(exec, "[[JSSVGTextPathElement.prototype]]");
    return JSC::cacheGlobalObject<JSSVGTextPathElementPrototype>(exec, *prototypeIdentifier);
}

bool JSSVGTextPathElementPrototype::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSSVGTextPathElementPrototype, JSObject>(exec, &JSSVGTextPathElementPrototypeTable, this, propertyName, slot);
}

JSValue* JSSVGTextPathElementPrototype::getValueProperty(ExecState* exec, int token) const
{
    // The token is the numeric value of its associated constant
    return jsNumber(exec, token);
}

const ClassInfo JSSVGTextPathElement::s_info = { "SVGTextPathElement", &JSSVGTextContentElement::s_info, &JSSVGTextPathElementTable , 0 };

JSSVGTextPathElement::JSSVGTextPathElement(JSObject* prototype, SVGTextPathElement* impl)
    : JSSVGTextContentElement(prototype, impl)
{
}

bool JSSVGTextPathElement::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSSVGTextPathElement, Base>(exec, &JSSVGTextPathElementTable, this, propertyName, slot);
}

JSValue* JSSVGTextPathElement::getValueProperty(ExecState* exec, int token) const
{
    switch (token) {
    case StartOffsetAttrNum: {
        SVGTextPathElement* imp = static_cast<SVGTextPathElement*>(impl());
        RefPtr<SVGAnimatedLength> obj = imp->startOffsetAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case MethodAttrNum: {
        SVGTextPathElement* imp = static_cast<SVGTextPathElement*>(impl());
        RefPtr<SVGAnimatedEnumeration> obj = imp->methodAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case SpacingAttrNum: {
        SVGTextPathElement* imp = static_cast<SVGTextPathElement*>(impl());
        RefPtr<SVGAnimatedEnumeration> obj = imp->spacingAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case HrefAttrNum: {
        SVGTextPathElement* imp = static_cast<SVGTextPathElement*>(impl());
        RefPtr<SVGAnimatedString> obj = imp->hrefAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case ConstructorAttrNum:
        return getConstructor(exec);
    }
    return 0;
}

JSValue* JSSVGTextPathElement::getConstructor(ExecState* exec)
{
    static const Identifier* constructorIdentifier = new Identifier(exec, "[[SVGTextPathElement.constructor]]");
    return JSC::cacheGlobalObject<JSSVGTextPathElementConstructor>(exec, *constructorIdentifier);
}


}

#endif // ENABLE(SVG)
