/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"


#if ENABLE(SVG)

#include "Document.h"
#include "Frame.h"
#include "SVGDocumentExtensions.h"
#include "SVGElement.h"
#include "SVGAnimatedTemplate.h"
#include "JSSVGAnimatedPoints.h"

#include <wtf/GetPtr.h>

#include "JSSVGPointList.h"
#include "SVGAnimatedPoints.h"
#include "SVGPointList.h"


using namespace JSC;

namespace WebCore {

ASSERT_CLASS_FITS_IN_CELL(JSSVGAnimatedPoints)

/* Hash table */

static const HashTableValue JSSVGAnimatedPointsTableValues[3] =
{
    { "points", (intptr_t)JSSVGAnimatedPoints::PointsAttrNum, DontDelete|ReadOnly, 0 },
    { "animatedPoints", (intptr_t)JSSVGAnimatedPoints::AnimatedPointsAttrNum, DontDelete|ReadOnly, 0 },
    { 0, 0, 0, 0 }
};

static const HashTable JSSVGAnimatedPointsTable = { 3, JSSVGAnimatedPointsTableValues, 0 };

/* Hash table for prototype */

static const HashTableValue JSSVGAnimatedPointsPrototypeTableValues[1] =
{
    { 0, 0, 0, 0 }
};

static const HashTable JSSVGAnimatedPointsPrototypeTable = { 0, JSSVGAnimatedPointsPrototypeTableValues, 0 };

const ClassInfo JSSVGAnimatedPointsPrototype::s_info = { "SVGAnimatedPointsPrototype", 0, &JSSVGAnimatedPointsPrototypeTable, 0 };

JSObject* JSSVGAnimatedPointsPrototype::self(ExecState* exec)
{
    static const Identifier* prototypeIdentifier = new Identifier(exec, "[[JSSVGAnimatedPoints.prototype]]");
    return JSC::cacheGlobalObject<JSSVGAnimatedPointsPrototype>(exec, *prototypeIdentifier);
}

const ClassInfo JSSVGAnimatedPoints::s_info = { "SVGAnimatedPoints", 0, &JSSVGAnimatedPointsTable , 0 };

JSSVGAnimatedPoints::JSSVGAnimatedPoints(JSObject* prototype, SVGAnimatedPoints* impl, SVGElement* context)
    : DOMObject(prototype)
    , m_context(context)
    , m_impl(impl)
{
}

JSSVGAnimatedPoints::~JSSVGAnimatedPoints()
{
    ScriptInterpreter::forgetDOMObject(m_impl.get());

}

bool JSSVGAnimatedPoints::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSSVGAnimatedPoints, Base>(exec, &JSSVGAnimatedPointsTable, this, propertyName, slot);
}

JSValue* JSSVGAnimatedPoints::getValueProperty(ExecState* exec, int token) const
{
    switch (token) {
    case PointsAttrNum: {
        SVGAnimatedPoints* imp = static_cast<SVGAnimatedPoints*>(impl());
        return toJS(exec, WTF::getPtr(imp->points()), context());
    }
    case AnimatedPointsAttrNum: {
        SVGAnimatedPoints* imp = static_cast<SVGAnimatedPoints*>(impl());
        return toJS(exec, WTF::getPtr(imp->animatedPoints()), context());
    }
    }
    return 0;
}

JSC::JSValue* toJS(JSC::ExecState* exec, SVGAnimatedPoints* obj, SVGElement* context)
{
    return cacheSVGDOMObject<SVGAnimatedPoints, JSSVGAnimatedPoints, JSSVGAnimatedPointsPrototype>(exec, obj, context);
}
SVGAnimatedPoints* toSVGAnimatedPoints(JSC::JSValue* val)
{
    return val->isObject(&JSSVGAnimatedPoints::s_info) ? static_cast<JSSVGAnimatedPoints*>(val)->impl() : 0;
}

}

#endif // ENABLE(SVG)
