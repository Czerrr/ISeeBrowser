/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#include "JSTextMetrics.h"

#include <wtf/GetPtr.h>

#include "TextMetrics.h"

#include <kjs/JSNumberCell.h>

using namespace JSC;

namespace WebCore {

ASSERT_CLASS_FITS_IN_CELL(JSTextMetrics)

/* Hash table */

static const HashTableValue JSTextMetricsTableValues[3] =
{
    { "width", (intptr_t)JSTextMetrics::WidthAttrNum, DontDelete|ReadOnly, 0 },
    { "constructor", (intptr_t)JSTextMetrics::ConstructorAttrNum, DontEnum, 0 },
    { 0, 0, 0, 0 }
};

static const HashTable JSTextMetricsTable = { 3, JSTextMetricsTableValues, 0 };

/* Hash table for constructor */

static const HashTableValue JSTextMetricsConstructorTableValues[1] =
{
    { 0, 0, 0, 0 }
};

static const HashTable JSTextMetricsConstructorTable = { 0, JSTextMetricsConstructorTableValues, 0 };

class JSTextMetricsConstructor : public DOMObject {
public:
    JSTextMetricsConstructor(ExecState* exec)
        : DOMObject(exec->lexicalGlobalObject()->objectPrototype())
    {
        putDirect(exec->propertyNames().prototype, JSTextMetricsPrototype::self(exec), None);
    }
    virtual bool getOwnPropertySlot(ExecState*, const Identifier&, PropertySlot&);
    JSValue* getValueProperty(ExecState*, int token) const;
    virtual const ClassInfo* classInfo() const { return &s_info; }
    static const ClassInfo s_info;

    virtual bool implementsHasInstance() const { return true; }
};

const ClassInfo JSTextMetricsConstructor::s_info = { "TextMetricsConstructor", 0, &JSTextMetricsConstructorTable, 0 };

bool JSTextMetricsConstructor::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSTextMetricsConstructor, DOMObject>(exec, &JSTextMetricsConstructorTable, this, propertyName, slot);
}

JSValue* JSTextMetricsConstructor::getValueProperty(ExecState* exec, int token) const
{
    // The token is the numeric value of its associated constant
    return jsNumber(exec, token);
}

/* Hash table for prototype */

static const HashTableValue JSTextMetricsPrototypeTableValues[1] =
{
    { 0, 0, 0, 0 }
};

static const HashTable JSTextMetricsPrototypeTable = { 0, JSTextMetricsPrototypeTableValues, 0 };

const ClassInfo JSTextMetricsPrototype::s_info = { "TextMetricsPrototype", 0, &JSTextMetricsPrototypeTable, 0 };

JSObject* JSTextMetricsPrototype::self(ExecState* exec)
{
    static const Identifier* prototypeIdentifier = new Identifier(exec, "[[JSTextMetrics.prototype]]");
    return JSC::cacheGlobalObject<JSTextMetricsPrototype>(exec, *prototypeIdentifier);
}

const ClassInfo JSTextMetrics::s_info = { "TextMetrics", 0, &JSTextMetricsTable , 0 };

JSTextMetrics::JSTextMetrics(JSObject* prototype, TextMetrics* impl)
    : DOMObject(prototype)
    , m_impl(impl)
{
}

JSTextMetrics::~JSTextMetrics()
{
    ScriptInterpreter::forgetDOMObject(m_impl.get());

}

bool JSTextMetrics::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSTextMetrics, Base>(exec, &JSTextMetricsTable, this, propertyName, slot);
}

JSValue* JSTextMetrics::getValueProperty(ExecState* exec, int token) const
{
    switch (token) {
    case WidthAttrNum: {
        TextMetrics* imp = static_cast<TextMetrics*>(impl());
        return jsNumber(exec, imp->width());
    }
    case ConstructorAttrNum:
        return getConstructor(exec);
    }
    return 0;
}

JSValue* JSTextMetrics::getConstructor(ExecState* exec)
{
    static const Identifier* constructorIdentifier = new Identifier(exec, "[[TextMetrics.constructor]]");
    return JSC::cacheGlobalObject<JSTextMetricsConstructor>(exec, *constructorIdentifier);
}

JSC::JSValue* toJS(JSC::ExecState* exec, TextMetrics* obj)
{
    return cacheDOMObject<TextMetrics, JSTextMetrics, JSTextMetricsPrototype>(exec, obj);
}
TextMetrics* toTextMetrics(JSC::JSValue* val)
{
    return val->isObject(&JSTextMetrics::s_info) ? static_cast<JSTextMetrics*>(val)->impl() : 0;
}

}
