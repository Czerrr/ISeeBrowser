/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#include "JSSQLResultSet.h"

#include <wtf/GetPtr.h>

#include "JSSQLResultSetRowList.h"
#include "SQLResultSet.h"
#include "SQLResultSetRowList.h"

#include <kjs/JSNumberCell.h>

using namespace JSC;

namespace WebCore {

ASSERT_CLASS_FITS_IN_CELL(JSSQLResultSet)

/* Hash table */

static const HashTableValue JSSQLResultSetTableValues[4] =
{
    { "rows", (intptr_t)JSSQLResultSet::RowsAttrNum, DontDelete|ReadOnly, 0 },
    { "insertId", (intptr_t)JSSQLResultSet::InsertIdAttrNum, DontDelete|ReadOnly, 0 },
    { "rowsAffected", (intptr_t)JSSQLResultSet::RowsAffectedAttrNum, DontDelete|ReadOnly, 0 },
    { 0, 0, 0, 0 }
};

static const HashTable JSSQLResultSetTable = { 255, JSSQLResultSetTableValues, 0 };

/* Hash table for prototype */

static const HashTableValue JSSQLResultSetPrototypeTableValues[1] =
{
    { 0, 0, 0, 0 }
};

static const HashTable JSSQLResultSetPrototypeTable = { 0, JSSQLResultSetPrototypeTableValues, 0 };

const ClassInfo JSSQLResultSetPrototype::s_info = { "SQLResultSetPrototype", 0, &JSSQLResultSetPrototypeTable, 0 };

JSObject* JSSQLResultSetPrototype::self(ExecState* exec)
{
    static const Identifier* prototypeIdentifier = new Identifier(exec, "[[JSSQLResultSet.prototype]]");
    return JSC::cacheGlobalObject<JSSQLResultSetPrototype>(exec, *prototypeIdentifier);
}

const ClassInfo JSSQLResultSet::s_info = { "SQLResultSet", 0, &JSSQLResultSetTable , 0 };

JSSQLResultSet::JSSQLResultSet(JSObject* prototype, SQLResultSet* impl)
    : DOMObject(prototype)
    , m_impl(impl)
{
}

JSSQLResultSet::~JSSQLResultSet()
{
    ScriptInterpreter::forgetDOMObject(m_impl.get());

}

bool JSSQLResultSet::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSSQLResultSet, Base>(exec, &JSSQLResultSetTable, this, propertyName, slot);
}

JSValue* JSSQLResultSet::getValueProperty(ExecState* exec, int token) const
{
    switch (token) {
    case RowsAttrNum: {
        SQLResultSet* imp = static_cast<SQLResultSet*>(impl());
        return toJS(exec, WTF::getPtr(imp->rows()));
    }
    case InsertIdAttrNum: {
        ExceptionCode ec = 0;
        SQLResultSet* imp = static_cast<SQLResultSet*>(impl());
        JSC::JSValue* result = jsNumber(exec, imp->insertId(ec));
        setDOMException(exec, ec);
        return result;
    }
    case RowsAffectedAttrNum: {
        SQLResultSet* imp = static_cast<SQLResultSet*>(impl());
        return jsNumber(exec, imp->rowsAffected());
    }
    }
    return 0;
}

JSC::JSValue* toJS(JSC::ExecState* exec, SQLResultSet* obj)
{
    return cacheDOMObject<SQLResultSet, JSSQLResultSet, JSSQLResultSetPrototype>(exec, obj);
}
SQLResultSet* toSQLResultSet(JSC::JSValue* val)
{
    return val->isObject(&JSSQLResultSet::s_info) ? static_cast<JSSQLResultSet*>(val)->impl() : 0;
}

}
