/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"


#if ENABLE(SVG)

#include "Document.h"
#include "Frame.h"
#include "SVGDocumentExtensions.h"
#include "SVGElement.h"
#include "SVGAnimatedTemplate.h"
#include "JSSVGZoomAndPan.h"

#include <wtf/GetPtr.h>

#include "SVGZoomAndPan.h"

#include <kjs/JSNumberCell.h>

using namespace JSC;

namespace WebCore {

ASSERT_CLASS_FITS_IN_CELL(JSSVGZoomAndPan)

/* Hash table */

static const HashTableValue JSSVGZoomAndPanTableValues[3] =
{
    { "zoomAndPan", (intptr_t)JSSVGZoomAndPan::ZoomAndPanAttrNum, DontDelete, 0 },
    { "constructor", (intptr_t)JSSVGZoomAndPan::ConstructorAttrNum, DontEnum, 0 },
    { 0, 0, 0, 0 }
};

static const HashTable JSSVGZoomAndPanTable = { 1, JSSVGZoomAndPanTableValues, 0 };

/* Hash table for constructor */

static const HashTableValue JSSVGZoomAndPanConstructorTableValues[4] =
{
    { "SVG_ZOOMANDPAN_UNKNOWN", (intptr_t)0, DontDelete|ReadOnly, 0 },
    { "SVG_ZOOMANDPAN_DISABLE", (intptr_t)1, DontDelete|ReadOnly, 0 },
    { "SVG_ZOOMANDPAN_MAGNIFY", (intptr_t)2, DontDelete|ReadOnly, 0 },
    { 0, 0, 0, 0 }
};

static const HashTable JSSVGZoomAndPanConstructorTable = { 31, JSSVGZoomAndPanConstructorTableValues, 0 };

class JSSVGZoomAndPanConstructor : public DOMObject {
public:
    JSSVGZoomAndPanConstructor(ExecState* exec)
        : DOMObject(exec->lexicalGlobalObject()->objectPrototype())
    {
        putDirect(exec->propertyNames().prototype, JSSVGZoomAndPanPrototype::self(exec), None);
    }
    virtual bool getOwnPropertySlot(ExecState*, const Identifier&, PropertySlot&);
    JSValue* getValueProperty(ExecState*, int token) const;
    virtual const ClassInfo* classInfo() const { return &s_info; }
    static const ClassInfo s_info;

    virtual bool implementsHasInstance() const { return true; }
};

const ClassInfo JSSVGZoomAndPanConstructor::s_info = { "SVGZoomAndPanConstructor", 0, &JSSVGZoomAndPanConstructorTable, 0 };

bool JSSVGZoomAndPanConstructor::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSSVGZoomAndPanConstructor, DOMObject>(exec, &JSSVGZoomAndPanConstructorTable, this, propertyName, slot);
}

JSValue* JSSVGZoomAndPanConstructor::getValueProperty(ExecState* exec, int token) const
{
    // The token is the numeric value of its associated constant
    return jsNumber(exec, token);
}

/* Hash table for prototype */

static const HashTableValue JSSVGZoomAndPanPrototypeTableValues[4] =
{
    { "SVG_ZOOMANDPAN_UNKNOWN", (intptr_t)0, DontDelete|ReadOnly, 0 },
    { "SVG_ZOOMANDPAN_DISABLE", (intptr_t)1, DontDelete|ReadOnly, 0 },
    { "SVG_ZOOMANDPAN_MAGNIFY", (intptr_t)2, DontDelete|ReadOnly, 0 },
    { 0, 0, 0, 0 }
};

static const HashTable JSSVGZoomAndPanPrototypeTable = { 31, JSSVGZoomAndPanPrototypeTableValues, 0 };

const ClassInfo JSSVGZoomAndPanPrototype::s_info = { "SVGZoomAndPanPrototype", 0, &JSSVGZoomAndPanPrototypeTable, 0 };

JSObject* JSSVGZoomAndPanPrototype::self(ExecState* exec)
{
    static const Identifier* prototypeIdentifier = new Identifier(exec, "[[JSSVGZoomAndPan.prototype]]");
    return JSC::cacheGlobalObject<JSSVGZoomAndPanPrototype>(exec, *prototypeIdentifier);
}

bool JSSVGZoomAndPanPrototype::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSSVGZoomAndPanPrototype, JSObject>(exec, &JSSVGZoomAndPanPrototypeTable, this, propertyName, slot);
}

JSValue* JSSVGZoomAndPanPrototype::getValueProperty(ExecState* exec, int token) const
{
    // The token is the numeric value of its associated constant
    return jsNumber(exec, token);
}

const ClassInfo JSSVGZoomAndPan::s_info = { "SVGZoomAndPan", 0, &JSSVGZoomAndPanTable , 0 };

JSSVGZoomAndPan::JSSVGZoomAndPan(JSObject* prototype, SVGZoomAndPan* impl, SVGElement* context)
    : DOMObject(prototype)
    , m_context(context)
    , m_impl(impl)
{
}

JSSVGZoomAndPan::~JSSVGZoomAndPan()
{
    ScriptInterpreter::forgetDOMObject(m_impl.get());

}

bool JSSVGZoomAndPan::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSSVGZoomAndPan, Base>(exec, &JSSVGZoomAndPanTable, this, propertyName, slot);
}

JSValue* JSSVGZoomAndPan::getValueProperty(ExecState* exec, int token) const
{
    switch (token) {
    case ZoomAndPanAttrNum: {
        SVGZoomAndPan* imp = static_cast<SVGZoomAndPan*>(impl());
        return jsNumber(exec, imp->zoomAndPan());
    }
    case ConstructorAttrNum:
        return getConstructor(exec);
    }
    return 0;
}

void JSSVGZoomAndPan::put(ExecState* exec, const Identifier& propertyName, JSValue* value, PutPropertySlot& slot)
{
    lookupPut<JSSVGZoomAndPan, Base>(exec, propertyName, value, &JSSVGZoomAndPanTable, this, slot);
}

void JSSVGZoomAndPan::putValueProperty(ExecState* exec, int token, JSValue* value)
{
    switch (token) {
    case ZoomAndPanAttrNum: {
        SVGZoomAndPan* imp = static_cast<SVGZoomAndPan*>(impl());
        imp->setZoomAndPan(value->toInt32(exec));
        if (context())
            context()->svgAttributeChanged(impl()->associatedAttributeName());
        break;
    }
    }
}

JSValue* JSSVGZoomAndPan::getConstructor(ExecState* exec)
{
    static const Identifier* constructorIdentifier = new Identifier(exec, "[[SVGZoomAndPan.constructor]]");
    return JSC::cacheGlobalObject<JSSVGZoomAndPanConstructor>(exec, *constructorIdentifier);
}

JSC::JSValue* toJS(JSC::ExecState* exec, SVGZoomAndPan* obj, SVGElement* context)
{
    return cacheSVGDOMObject<SVGZoomAndPan, JSSVGZoomAndPan, JSSVGZoomAndPanPrototype>(exec, obj, context);
}
SVGZoomAndPan* toSVGZoomAndPan(JSC::JSValue* val)
{
    return val->isObject(&JSSVGZoomAndPan::s_info) ? static_cast<JSSVGZoomAndPan*>(val)->impl() : 0;
}

}

#endif // ENABLE(SVG)
