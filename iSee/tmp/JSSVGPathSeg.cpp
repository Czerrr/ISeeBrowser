/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"


#if ENABLE(SVG)

#include "Document.h"
#include "Frame.h"
#include "SVGDocumentExtensions.h"
#include "SVGElement.h"
#include "SVGAnimatedTemplate.h"
#include "JSSVGPathSeg.h"

#include <wtf/GetPtr.h>

#include "KURL.h"
#include "SVGPathSeg.h"

#include <kjs/JSNumberCell.h>
#include <kjs/JSString.h>

using namespace JSC;

namespace WebCore {

ASSERT_CLASS_FITS_IN_CELL(JSSVGPathSeg)

/* Hash table */

static const HashTableValue JSSVGPathSegTableValues[4] =
{
    { "pathSegType", (intptr_t)JSSVGPathSeg::PathSegTypeAttrNum, DontDelete|ReadOnly, 0 },
    { "pathSegTypeAsLetter", (intptr_t)JSSVGPathSeg::PathSegTypeAsLetterAttrNum, DontDelete|ReadOnly, 0 },
    { "constructor", (intptr_t)JSSVGPathSeg::ConstructorAttrNum, DontEnum, 0 },
    { 0, 0, 0, 0 }
};

static const HashTable JSSVGPathSegTable = { 7, JSSVGPathSegTableValues, 0 };

/* Hash table for constructor */

static const HashTableValue JSSVGPathSegConstructorTableValues[21] =
{
    { "PATHSEG_UNKNOWN", (intptr_t)0, DontDelete|ReadOnly, 0 },
    { "PATHSEG_CLOSEPATH", (intptr_t)1, DontDelete|ReadOnly, 0 },
    { "PATHSEG_MOVETO_ABS", (intptr_t)2, DontDelete|ReadOnly, 0 },
    { "PATHSEG_MOVETO_REL", (intptr_t)3, DontDelete|ReadOnly, 0 },
    { "PATHSEG_LINETO_ABS", (intptr_t)4, DontDelete|ReadOnly, 0 },
    { "PATHSEG_LINETO_REL", (intptr_t)5, DontDelete|ReadOnly, 0 },
    { "PATHSEG_CURVETO_CUBIC_ABS", (intptr_t)6, DontDelete|ReadOnly, 0 },
    { "PATHSEG_CURVETO_CUBIC_REL", (intptr_t)7, DontDelete|ReadOnly, 0 },
    { "PATHSEG_CURVETO_QUADRATIC_ABS", (intptr_t)8, DontDelete|ReadOnly, 0 },
    { "PATHSEG_CURVETO_QUADRATIC_REL", (intptr_t)9, DontDelete|ReadOnly, 0 },
    { "PATHSEG_ARC_ABS", (intptr_t)10, DontDelete|ReadOnly, 0 },
    { "PATHSEG_ARC_REL", (intptr_t)11, DontDelete|ReadOnly, 0 },
    { "PATHSEG_LINETO_HORIZONTAL_ABS", (intptr_t)12, DontDelete|ReadOnly, 0 },
    { "PATHSEG_LINETO_HORIZONTAL_REL", (intptr_t)13, DontDelete|ReadOnly, 0 },
    { "PATHSEG_LINETO_VERTICAL_ABS", (intptr_t)14, DontDelete|ReadOnly, 0 },
    { "PATHSEG_LINETO_VERTICAL_REL", (intptr_t)15, DontDelete|ReadOnly, 0 },
    { "PATHSEG_CURVETO_CUBIC_SMOOTH_ABS", (intptr_t)16, DontDelete|ReadOnly, 0 },
    { "PATHSEG_CURVETO_CUBIC_SMOOTH_REL", (intptr_t)17, DontDelete|ReadOnly, 0 },
    { "PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS", (intptr_t)18, DontDelete|ReadOnly, 0 },
    { "PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL", (intptr_t)19, DontDelete|ReadOnly, 0 },
    { 0, 0, 0, 0 }
};

static const HashTable JSSVGPathSegConstructorTable = { 2047, JSSVGPathSegConstructorTableValues, 0 };

class JSSVGPathSegConstructor : public DOMObject {
public:
    JSSVGPathSegConstructor(ExecState* exec)
        : DOMObject(exec->lexicalGlobalObject()->objectPrototype())
    {
        putDirect(exec->propertyNames().prototype, JSSVGPathSegPrototype::self(exec), None);
    }
    virtual bool getOwnPropertySlot(ExecState*, const Identifier&, PropertySlot&);
    JSValue* getValueProperty(ExecState*, int token) const;
    virtual const ClassInfo* classInfo() const { return &s_info; }
    static const ClassInfo s_info;

    virtual bool implementsHasInstance() const { return true; }
};

const ClassInfo JSSVGPathSegConstructor::s_info = { "SVGPathSegConstructor", 0, &JSSVGPathSegConstructorTable, 0 };

bool JSSVGPathSegConstructor::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSSVGPathSegConstructor, DOMObject>(exec, &JSSVGPathSegConstructorTable, this, propertyName, slot);
}

JSValue* JSSVGPathSegConstructor::getValueProperty(ExecState* exec, int token) const
{
    // The token is the numeric value of its associated constant
    return jsNumber(exec, token);
}

/* Hash table for prototype */

static const HashTableValue JSSVGPathSegPrototypeTableValues[21] =
{
    { "PATHSEG_UNKNOWN", (intptr_t)0, DontDelete|ReadOnly, 0 },
    { "PATHSEG_CLOSEPATH", (intptr_t)1, DontDelete|ReadOnly, 0 },
    { "PATHSEG_MOVETO_ABS", (intptr_t)2, DontDelete|ReadOnly, 0 },
    { "PATHSEG_MOVETO_REL", (intptr_t)3, DontDelete|ReadOnly, 0 },
    { "PATHSEG_LINETO_ABS", (intptr_t)4, DontDelete|ReadOnly, 0 },
    { "PATHSEG_LINETO_REL", (intptr_t)5, DontDelete|ReadOnly, 0 },
    { "PATHSEG_CURVETO_CUBIC_ABS", (intptr_t)6, DontDelete|ReadOnly, 0 },
    { "PATHSEG_CURVETO_CUBIC_REL", (intptr_t)7, DontDelete|ReadOnly, 0 },
    { "PATHSEG_CURVETO_QUADRATIC_ABS", (intptr_t)8, DontDelete|ReadOnly, 0 },
    { "PATHSEG_CURVETO_QUADRATIC_REL", (intptr_t)9, DontDelete|ReadOnly, 0 },
    { "PATHSEG_ARC_ABS", (intptr_t)10, DontDelete|ReadOnly, 0 },
    { "PATHSEG_ARC_REL", (intptr_t)11, DontDelete|ReadOnly, 0 },
    { "PATHSEG_LINETO_HORIZONTAL_ABS", (intptr_t)12, DontDelete|ReadOnly, 0 },
    { "PATHSEG_LINETO_HORIZONTAL_REL", (intptr_t)13, DontDelete|ReadOnly, 0 },
    { "PATHSEG_LINETO_VERTICAL_ABS", (intptr_t)14, DontDelete|ReadOnly, 0 },
    { "PATHSEG_LINETO_VERTICAL_REL", (intptr_t)15, DontDelete|ReadOnly, 0 },
    { "PATHSEG_CURVETO_CUBIC_SMOOTH_ABS", (intptr_t)16, DontDelete|ReadOnly, 0 },
    { "PATHSEG_CURVETO_CUBIC_SMOOTH_REL", (intptr_t)17, DontDelete|ReadOnly, 0 },
    { "PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS", (intptr_t)18, DontDelete|ReadOnly, 0 },
    { "PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL", (intptr_t)19, DontDelete|ReadOnly, 0 },
    { 0, 0, 0, 0 }
};

static const HashTable JSSVGPathSegPrototypeTable = { 2047, JSSVGPathSegPrototypeTableValues, 0 };

const ClassInfo JSSVGPathSegPrototype::s_info = { "SVGPathSegPrototype", 0, &JSSVGPathSegPrototypeTable, 0 };

JSObject* JSSVGPathSegPrototype::self(ExecState* exec)
{
    static const Identifier* prototypeIdentifier = new Identifier(exec, "[[JSSVGPathSeg.prototype]]");
    return JSC::cacheGlobalObject<JSSVGPathSegPrototype>(exec, *prototypeIdentifier);
}

bool JSSVGPathSegPrototype::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSSVGPathSegPrototype, JSObject>(exec, &JSSVGPathSegPrototypeTable, this, propertyName, slot);
}

JSValue* JSSVGPathSegPrototype::getValueProperty(ExecState* exec, int token) const
{
    // The token is the numeric value of its associated constant
    return jsNumber(exec, token);
}

const ClassInfo JSSVGPathSeg::s_info = { "SVGPathSeg", 0, &JSSVGPathSegTable , 0 };

JSSVGPathSeg::JSSVGPathSeg(JSObject* prototype, SVGPathSeg* impl, SVGElement* context)
    : DOMObject(prototype)
    , m_context(context)
    , m_impl(impl)
{
}

JSSVGPathSeg::~JSSVGPathSeg()
{
    ScriptInterpreter::forgetDOMObject(m_impl.get());

}

bool JSSVGPathSeg::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSSVGPathSeg, Base>(exec, &JSSVGPathSegTable, this, propertyName, slot);
}

JSValue* JSSVGPathSeg::getValueProperty(ExecState* exec, int token) const
{
    switch (token) {
    case PathSegTypeAttrNum: {
        SVGPathSeg* imp = static_cast<SVGPathSeg*>(impl());
        return jsNumber(exec, imp->pathSegType());
    }
    case PathSegTypeAsLetterAttrNum: {
        SVGPathSeg* imp = static_cast<SVGPathSeg*>(impl());
        return jsString(exec, imp->pathSegTypeAsLetter());
    }
    case ConstructorAttrNum:
        return getConstructor(exec);
    }
    return 0;
}

JSValue* JSSVGPathSeg::getConstructor(ExecState* exec)
{
    static const Identifier* constructorIdentifier = new Identifier(exec, "[[SVGPathSeg.constructor]]");
    return JSC::cacheGlobalObject<JSSVGPathSegConstructor>(exec, *constructorIdentifier);
}

SVGPathSeg* toSVGPathSeg(JSC::JSValue* val)
{
    return val->isObject(&JSSVGPathSeg::s_info) ? static_cast<JSSVGPathSeg*>(val)->impl() : 0;
}

}

#endif // ENABLE(SVG)
