/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"


#if ENABLE(SVG)

#include "Document.h"
#include "Frame.h"
#include "SVGDocumentExtensions.h"
#include "SVGElement.h"
#include "SVGAnimatedTemplate.h"
#include "JSSVGLocatable.h"

#include <wtf/GetPtr.h>

#include "JSSVGElement.h"
#include "JSSVGMatrix.h"
#include "JSSVGRect.h"
#include "SVGElement.h"
#include "SVGLocatable.h"

#include <kjs/Error.h>

using namespace JSC;

namespace WebCore {

ASSERT_CLASS_FITS_IN_CELL(JSSVGLocatable)

/* Hash table */

static const HashTableValue JSSVGLocatableTableValues[3] =
{
    { "nearestViewportElement", (intptr_t)JSSVGLocatable::NearestViewportElementAttrNum, DontDelete|ReadOnly, 0 },
    { "farthestViewportElement", (intptr_t)JSSVGLocatable::FarthestViewportElementAttrNum, DontDelete|ReadOnly, 0 },
    { 0, 0, 0, 0 }
};

static const HashTable JSSVGLocatableTable = { 3, JSSVGLocatableTableValues, 0 };

/* Hash table for prototype */

static const HashTableValue JSSVGLocatablePrototypeTableValues[5] =
{
    { "getBBox", (intptr_t)jsSVGLocatablePrototypeFunctionGetBBox, DontDelete|Function, 0 },
    { "getCTM", (intptr_t)jsSVGLocatablePrototypeFunctionGetCTM, DontDelete|Function, 0 },
    { "getScreenCTM", (intptr_t)jsSVGLocatablePrototypeFunctionGetScreenCTM, DontDelete|Function, 0 },
    { "getTransformToElement", (intptr_t)jsSVGLocatablePrototypeFunctionGetTransformToElement, DontDelete|Function, 1 },
    { 0, 0, 0, 0 }
};

static const HashTable JSSVGLocatablePrototypeTable = { 3, JSSVGLocatablePrototypeTableValues, 0 };

const ClassInfo JSSVGLocatablePrototype::s_info = { "SVGLocatablePrototype", 0, &JSSVGLocatablePrototypeTable, 0 };

JSObject* JSSVGLocatablePrototype::self(ExecState* exec)
{
    static const Identifier* prototypeIdentifier = new Identifier(exec, "[[JSSVGLocatable.prototype]]");
    return JSC::cacheGlobalObject<JSSVGLocatablePrototype>(exec, *prototypeIdentifier);
}

bool JSSVGLocatablePrototype::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticFunctionSlot<JSObject>(exec, &JSSVGLocatablePrototypeTable, this, propertyName, slot);
}

const ClassInfo JSSVGLocatable::s_info = { "SVGLocatable", 0, &JSSVGLocatableTable , 0 };

JSSVGLocatable::JSSVGLocatable(JSObject* prototype, SVGLocatable* impl, SVGElement* context)
    : DOMObject(prototype)
    , m_context(context)
    , m_impl(impl)
{
}

JSSVGLocatable::~JSSVGLocatable()
{
    ScriptInterpreter::forgetDOMObject(m_impl.get());

}

bool JSSVGLocatable::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSSVGLocatable, Base>(exec, &JSSVGLocatableTable, this, propertyName, slot);
}

JSValue* JSSVGLocatable::getValueProperty(ExecState* exec, int token) const
{
    switch (token) {
    case NearestViewportElementAttrNum: {
        SVGLocatable* imp = static_cast<SVGLocatable*>(impl());
        return toJS(exec, WTF::getPtr(imp->nearestViewportElement()));
    }
    case FarthestViewportElementAttrNum: {
        SVGLocatable* imp = static_cast<SVGLocatable*>(impl());
        return toJS(exec, WTF::getPtr(imp->farthestViewportElement()));
    }
    }
    return 0;
}

JSValue* jsSVGLocatablePrototypeFunctionGetBBox(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGLocatable::s_info))
        return throwError(exec, TypeError);
    JSSVGLocatable* castedThisObj = static_cast<JSSVGLocatable*>(thisValue);
    SVGLocatable* imp = static_cast<SVGLocatable*>(castedThisObj->impl());


    JSC::JSValue* result = toJS(exec, JSSVGStaticPODTypeWrapper<FloatRect>::create(imp->getBBox()).get(), castedThisObj->context());
    return result;
}

JSValue* jsSVGLocatablePrototypeFunctionGetCTM(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGLocatable::s_info))
        return throwError(exec, TypeError);
    JSSVGLocatable* castedThisObj = static_cast<JSSVGLocatable*>(thisValue);
    SVGLocatable* imp = static_cast<SVGLocatable*>(castedThisObj->impl());


    JSC::JSValue* result = toJS(exec, JSSVGStaticPODTypeWrapper<AffineTransform>::create(imp->getCTM()).get(), castedThisObj->context());
    return result;
}

JSValue* jsSVGLocatablePrototypeFunctionGetScreenCTM(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGLocatable::s_info))
        return throwError(exec, TypeError);
    JSSVGLocatable* castedThisObj = static_cast<JSSVGLocatable*>(thisValue);
    SVGLocatable* imp = static_cast<SVGLocatable*>(castedThisObj->impl());


    JSC::JSValue* result = toJS(exec, JSSVGStaticPODTypeWrapper<AffineTransform>::create(imp->getScreenCTM()).get(), castedThisObj->context());
    return result;
}

JSValue* jsSVGLocatablePrototypeFunctionGetTransformToElement(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGLocatable::s_info))
        return throwError(exec, TypeError);
    JSSVGLocatable* castedThisObj = static_cast<JSSVGLocatable*>(thisValue);
    SVGLocatable* imp = static_cast<SVGLocatable*>(castedThisObj->impl());
    ExceptionCode ec = 0;
    SVGElement* element = toSVGElement(args.at(exec, 0));


    JSC::JSValue* result = toJS(exec, JSSVGStaticPODTypeWrapper<AffineTransform>::create(imp->getTransformToElement(element, ec)).get(), castedThisObj->context());
    setDOMException(exec, ec);
    return result;
}

JSC::JSValue* toJS(JSC::ExecState* exec, SVGLocatable* obj, SVGElement* context)
{
    return cacheSVGDOMObject<SVGLocatable, JSSVGLocatable, JSSVGLocatablePrototype>(exec, obj, context);
}
SVGLocatable* toSVGLocatable(JSC::JSValue* val)
{
    return val->isObject(&JSSVGLocatable::s_info) ? static_cast<JSSVGLocatable*>(val)->impl() : 0;
}

}

#endif // ENABLE(SVG)
