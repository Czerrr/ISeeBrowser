/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"


#if ENABLE(SVG)

#include "Document.h"
#include "Frame.h"
#include "SVGDocumentExtensions.h"
#include "SVGElement.h"
#include "SVGAnimatedTemplate.h"
#include "JSSVGAngle.h"

#include <wtf/GetPtr.h>

#include "KURL.h"
#include "SVGAngle.h"

#include <kjs/Error.h>
#include <kjs/JSNumberCell.h>
#include <kjs/JSString.h>

using namespace JSC;

namespace WebCore {

ASSERT_CLASS_FITS_IN_CELL(JSSVGAngle)

/* Hash table */

static const HashTableValue JSSVGAngleTableValues[6] =
{
    { "unitType", (intptr_t)JSSVGAngle::UnitTypeAttrNum, DontDelete|ReadOnly, 0 },
    { "value", (intptr_t)JSSVGAngle::ValueAttrNum, DontDelete, 0 },
    { "valueInSpecifiedUnits", (intptr_t)JSSVGAngle::ValueInSpecifiedUnitsAttrNum, DontDelete, 0 },
    { "valueAsString", (intptr_t)JSSVGAngle::ValueAsStringAttrNum, DontDelete, 0 },
    { "constructor", (intptr_t)JSSVGAngle::ConstructorAttrNum, DontEnum, 0 },
    { 0, 0, 0, 0 }
};

static const HashTable JSSVGAngleTable = { 255, JSSVGAngleTableValues, 0 };

/* Hash table for constructor */

static const HashTableValue JSSVGAngleConstructorTableValues[6] =
{
    { "SVG_ANGLETYPE_UNKNOWN", (intptr_t)0, DontDelete|ReadOnly, 0 },
    { "SVG_ANGLETYPE_UNSPECIFIED", (intptr_t)1, DontDelete|ReadOnly, 0 },
    { "SVG_ANGLETYPE_DEG", (intptr_t)2, DontDelete|ReadOnly, 0 },
    { "SVG_ANGLETYPE_RAD", (intptr_t)3, DontDelete|ReadOnly, 0 },
    { "SVG_ANGLETYPE_GRAD", (intptr_t)4, DontDelete|ReadOnly, 0 },
    { 0, 0, 0, 0 }
};

static const HashTable JSSVGAngleConstructorTable = { 255, JSSVGAngleConstructorTableValues, 0 };

class JSSVGAngleConstructor : public DOMObject {
public:
    JSSVGAngleConstructor(ExecState* exec)
        : DOMObject(exec->lexicalGlobalObject()->objectPrototype())
    {
        putDirect(exec->propertyNames().prototype, JSSVGAnglePrototype::self(exec), None);
    }
    virtual bool getOwnPropertySlot(ExecState*, const Identifier&, PropertySlot&);
    JSValue* getValueProperty(ExecState*, int token) const;
    virtual const ClassInfo* classInfo() const { return &s_info; }
    static const ClassInfo s_info;

    virtual bool implementsHasInstance() const { return true; }
};

const ClassInfo JSSVGAngleConstructor::s_info = { "SVGAngleConstructor", 0, &JSSVGAngleConstructorTable, 0 };

bool JSSVGAngleConstructor::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSSVGAngleConstructor, DOMObject>(exec, &JSSVGAngleConstructorTable, this, propertyName, slot);
}

JSValue* JSSVGAngleConstructor::getValueProperty(ExecState* exec, int token) const
{
    // The token is the numeric value of its associated constant
    return jsNumber(exec, token);
}

/* Hash table for prototype */

static const HashTableValue JSSVGAnglePrototypeTableValues[8] =
{
    { "SVG_ANGLETYPE_UNKNOWN", (intptr_t)0, DontDelete|ReadOnly, 0 },
    { "SVG_ANGLETYPE_UNSPECIFIED", (intptr_t)1, DontDelete|ReadOnly, 0 },
    { "SVG_ANGLETYPE_DEG", (intptr_t)2, DontDelete|ReadOnly, 0 },
    { "SVG_ANGLETYPE_RAD", (intptr_t)3, DontDelete|ReadOnly, 0 },
    { "SVG_ANGLETYPE_GRAD", (intptr_t)4, DontDelete|ReadOnly, 0 },
    { "newValueSpecifiedUnits", (intptr_t)jsSVGAnglePrototypeFunctionNewValueSpecifiedUnits, DontDelete|Function, 2 },
    { "convertToSpecifiedUnits", (intptr_t)jsSVGAnglePrototypeFunctionConvertToSpecifiedUnits, DontDelete|Function, 1 },
    { 0, 0, 0, 0 }
};

static const HashTable JSSVGAnglePrototypeTable = { 255, JSSVGAnglePrototypeTableValues, 0 };

const ClassInfo JSSVGAnglePrototype::s_info = { "SVGAnglePrototype", 0, &JSSVGAnglePrototypeTable, 0 };

JSObject* JSSVGAnglePrototype::self(ExecState* exec)
{
    static const Identifier* prototypeIdentifier = new Identifier(exec, "[[JSSVGAngle.prototype]]");
    return JSC::cacheGlobalObject<JSSVGAnglePrototype>(exec, *prototypeIdentifier);
}

bool JSSVGAnglePrototype::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticPropertySlot<JSSVGAnglePrototype, JSObject>(exec, &JSSVGAnglePrototypeTable, this, propertyName, slot);
}

JSValue* JSSVGAnglePrototype::getValueProperty(ExecState* exec, int token) const
{
    // The token is the numeric value of its associated constant
    return jsNumber(exec, token);
}

const ClassInfo JSSVGAngle::s_info = { "SVGAngle", 0, &JSSVGAngleTable , 0 };

JSSVGAngle::JSSVGAngle(JSObject* prototype, SVGAngle* impl, SVGElement* context)
    : DOMObject(prototype)
    , m_context(context)
    , m_impl(impl)
{
}

JSSVGAngle::~JSSVGAngle()
{
    ScriptInterpreter::forgetDOMObject(m_impl.get());

}

bool JSSVGAngle::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSSVGAngle, Base>(exec, &JSSVGAngleTable, this, propertyName, slot);
}

JSValue* JSSVGAngle::getValueProperty(ExecState* exec, int token) const
{
    switch (token) {
    case UnitTypeAttrNum: {
        SVGAngle* imp = static_cast<SVGAngle*>(impl());
        return jsNumber(exec, imp->unitType());
    }
    case ValueAttrNum: {
        SVGAngle* imp = static_cast<SVGAngle*>(impl());
        return jsNumber(exec, imp->value());
    }
    case ValueInSpecifiedUnitsAttrNum: {
        SVGAngle* imp = static_cast<SVGAngle*>(impl());
        return jsNumber(exec, imp->valueInSpecifiedUnits());
    }
    case ValueAsStringAttrNum: {
        SVGAngle* imp = static_cast<SVGAngle*>(impl());
        return jsString(exec, imp->valueAsString());
    }
    case ConstructorAttrNum:
        return getConstructor(exec);
    }
    return 0;
}

void JSSVGAngle::put(ExecState* exec, const Identifier& propertyName, JSValue* value, PutPropertySlot& slot)
{
    lookupPut<JSSVGAngle, Base>(exec, propertyName, value, &JSSVGAngleTable, this, slot);
}

void JSSVGAngle::putValueProperty(ExecState* exec, int token, JSValue* value)
{
    switch (token) {
    case ValueAttrNum: {
        SVGAngle* imp = static_cast<SVGAngle*>(impl());
        imp->setValue(value->toFloat(exec));
        if (context())
            context()->svgAttributeChanged(impl()->associatedAttributeName());
        break;
    }
    case ValueInSpecifiedUnitsAttrNum: {
        SVGAngle* imp = static_cast<SVGAngle*>(impl());
        imp->setValueInSpecifiedUnits(value->toFloat(exec));
        if (context())
            context()->svgAttributeChanged(impl()->associatedAttributeName());
        break;
    }
    case ValueAsStringAttrNum: {
        SVGAngle* imp = static_cast<SVGAngle*>(impl());
        imp->setValueAsString(valueToStringWithNullCheck(exec, value));
        if (context())
            context()->svgAttributeChanged(impl()->associatedAttributeName());
        break;
    }
    }
}

JSValue* JSSVGAngle::getConstructor(ExecState* exec)
{
    static const Identifier* constructorIdentifier = new Identifier(exec, "[[SVGAngle.constructor]]");
    return JSC::cacheGlobalObject<JSSVGAngleConstructor>(exec, *constructorIdentifier);
}

JSValue* jsSVGAnglePrototypeFunctionNewValueSpecifiedUnits(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGAngle::s_info))
        return throwError(exec, TypeError);
    JSSVGAngle* castedThisObj = static_cast<JSSVGAngle*>(thisValue);
    SVGAngle* imp = static_cast<SVGAngle*>(castedThisObj->impl());
    unsigned short unitType = args.at(exec, 0)->toInt32(exec);
    float valueInSpecifiedUnits = args.at(exec, 1)->toFloat(exec);

    imp->newValueSpecifiedUnits(unitType, valueInSpecifiedUnits);
    return jsUndefined();
}

JSValue* jsSVGAnglePrototypeFunctionConvertToSpecifiedUnits(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGAngle::s_info))
        return throwError(exec, TypeError);
    JSSVGAngle* castedThisObj = static_cast<JSSVGAngle*>(thisValue);
    SVGAngle* imp = static_cast<SVGAngle*>(castedThisObj->impl());
    unsigned short unitType = args.at(exec, 0)->toInt32(exec);

    imp->convertToSpecifiedUnits(unitType);
    return jsUndefined();
}

JSC::JSValue* toJS(JSC::ExecState* exec, SVGAngle* obj, SVGElement* context)
{
    return cacheSVGDOMObject<SVGAngle, JSSVGAngle, JSSVGAnglePrototype>(exec, obj, context);
}
SVGAngle* toSVGAngle(JSC::JSValue* val)
{
    return val->isObject(&JSSVGAngle::s_info) ? static_cast<JSSVGAngle*>(val)->impl() : 0;
}

}

#endif // ENABLE(SVG)
