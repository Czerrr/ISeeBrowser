/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"


#if ENABLE(SVG) && ENABLE(SVG_FILTERS)

#include "Document.h"
#include "Frame.h"
#include "SVGDocumentExtensions.h"
#include "SVGElement.h"
#include "SVGAnimatedTemplate.h"
#include "JSSVGFEBlendElement.h"

#include <wtf/GetPtr.h>

#include "CSSMutableStyleDeclaration.h"
#include "CSSStyleDeclaration.h"
#include "CSSValue.h"
#include "JSCSSStyleDeclaration.h"
#include "JSCSSValue.h"
#include "JSSVGAnimatedEnumeration.h"
#include "JSSVGAnimatedLength.h"
#include "JSSVGAnimatedString.h"
#include "SVGFEBlendElement.h"

#include <kjs/Error.h>
#include <kjs/JSNumberCell.h>

using namespace JSC;

namespace WebCore {

ASSERT_CLASS_FITS_IN_CELL(JSSVGFEBlendElement)

/* Hash table */

static const HashTableValue JSSVGFEBlendElementTableValues[12] =
{
    { "in1", (intptr_t)JSSVGFEBlendElement::In1AttrNum, DontDelete|ReadOnly, 0 },
    { "in2", (intptr_t)JSSVGFEBlendElement::In2AttrNum, DontDelete|ReadOnly, 0 },
    { "mode", (intptr_t)JSSVGFEBlendElement::ModeAttrNum, DontDelete|ReadOnly, 0 },
    { "x", (intptr_t)JSSVGFEBlendElement::XAttrNum, DontDelete|ReadOnly, 0 },
    { "y", (intptr_t)JSSVGFEBlendElement::YAttrNum, DontDelete|ReadOnly, 0 },
    { "width", (intptr_t)JSSVGFEBlendElement::WidthAttrNum, DontDelete|ReadOnly, 0 },
    { "height", (intptr_t)JSSVGFEBlendElement::HeightAttrNum, DontDelete|ReadOnly, 0 },
    { "result", (intptr_t)JSSVGFEBlendElement::ResultAttrNum, DontDelete|ReadOnly, 0 },
    { "className", (intptr_t)JSSVGFEBlendElement::ClassNameAttrNum, DontDelete|ReadOnly, 0 },
    { "style", (intptr_t)JSSVGFEBlendElement::StyleAttrNum, DontDelete|ReadOnly, 0 },
    { "constructor", (intptr_t)JSSVGFEBlendElement::ConstructorAttrNum, DontEnum, 0 },
    { 0, 0, 0, 0 }
};

static const HashTable JSSVGFEBlendElementTable = { 255, JSSVGFEBlendElementTableValues, 0 };

/* Hash table for constructor */

static const HashTableValue JSSVGFEBlendElementConstructorTableValues[7] =
{
    { "SVG_FEBLEND_MODE_UNKNOWN", (intptr_t)0, DontDelete|ReadOnly, 0 },
    { "SVG_FEBLEND_MODE_NORMAL", (intptr_t)1, DontDelete|ReadOnly, 0 },
    { "SVG_FEBLEND_MODE_MULTIPLY", (intptr_t)2, DontDelete|ReadOnly, 0 },
    { "SVG_FEBLEND_MODE_SCREEN", (intptr_t)3, DontDelete|ReadOnly, 0 },
    { "SVG_FEBLEND_MODE_DARKEN", (intptr_t)4, DontDelete|ReadOnly, 0 },
    { "SVG_FEBLEND_MODE_LIGHTEN", (intptr_t)5, DontDelete|ReadOnly, 0 },
    { 0, 0, 0, 0 }
};

static const HashTable JSSVGFEBlendElementConstructorTable = { 15, JSSVGFEBlendElementConstructorTableValues, 0 };

class JSSVGFEBlendElementConstructor : public DOMObject {
public:
    JSSVGFEBlendElementConstructor(ExecState* exec)
        : DOMObject(exec->lexicalGlobalObject()->objectPrototype())
    {
        putDirect(exec->propertyNames().prototype, JSSVGFEBlendElementPrototype::self(exec), None);
    }
    virtual bool getOwnPropertySlot(ExecState*, const Identifier&, PropertySlot&);
    JSValue* getValueProperty(ExecState*, int token) const;
    virtual const ClassInfo* classInfo() const { return &s_info; }
    static const ClassInfo s_info;

    virtual bool implementsHasInstance() const { return true; }
};

const ClassInfo JSSVGFEBlendElementConstructor::s_info = { "SVGFEBlendElementConstructor", 0, &JSSVGFEBlendElementConstructorTable, 0 };

bool JSSVGFEBlendElementConstructor::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSSVGFEBlendElementConstructor, DOMObject>(exec, &JSSVGFEBlendElementConstructorTable, this, propertyName, slot);
}

JSValue* JSSVGFEBlendElementConstructor::getValueProperty(ExecState* exec, int token) const
{
    // The token is the numeric value of its associated constant
    return jsNumber(exec, token);
}

/* Hash table for prototype */

static const HashTableValue JSSVGFEBlendElementPrototypeTableValues[8] =
{
    { "SVG_FEBLEND_MODE_UNKNOWN", (intptr_t)0, DontDelete|ReadOnly, 0 },
    { "SVG_FEBLEND_MODE_NORMAL", (intptr_t)1, DontDelete|ReadOnly, 0 },
    { "SVG_FEBLEND_MODE_MULTIPLY", (intptr_t)2, DontDelete|ReadOnly, 0 },
    { "SVG_FEBLEND_MODE_SCREEN", (intptr_t)3, DontDelete|ReadOnly, 0 },
    { "SVG_FEBLEND_MODE_DARKEN", (intptr_t)4, DontDelete|ReadOnly, 0 },
    { "SVG_FEBLEND_MODE_LIGHTEN", (intptr_t)5, DontDelete|ReadOnly, 0 },
    { "getPresentationAttribute", (intptr_t)jsSVGFEBlendElementPrototypeFunctionGetPresentationAttribute, DontDelete|Function, 1 },
    { 0, 0, 0, 0 }
};

static const HashTable JSSVGFEBlendElementPrototypeTable = { 15, JSSVGFEBlendElementPrototypeTableValues, 0 };

const ClassInfo JSSVGFEBlendElementPrototype::s_info = { "SVGFEBlendElementPrototype", 0, &JSSVGFEBlendElementPrototypeTable, 0 };

JSObject* JSSVGFEBlendElementPrototype::self(ExecState* exec)
{
    static const Identifier* prototypeIdentifier = new Identifier(exec, "[[JSSVGFEBlendElement.prototype]]");
    return JSC::cacheGlobalObject<JSSVGFEBlendElementPrototype>(exec, *prototypeIdentifier);
}

bool JSSVGFEBlendElementPrototype::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticPropertySlot<JSSVGFEBlendElementPrototype, JSObject>(exec, &JSSVGFEBlendElementPrototypeTable, this, propertyName, slot);
}

JSValue* JSSVGFEBlendElementPrototype::getValueProperty(ExecState* exec, int token) const
{
    // The token is the numeric value of its associated constant
    return jsNumber(exec, token);
}

const ClassInfo JSSVGFEBlendElement::s_info = { "SVGFEBlendElement", &JSSVGElement::s_info, &JSSVGFEBlendElementTable , 0 };

JSSVGFEBlendElement::JSSVGFEBlendElement(JSObject* prototype, SVGFEBlendElement* impl)
    : JSSVGElement(prototype, impl)
{
}

bool JSSVGFEBlendElement::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSSVGFEBlendElement, Base>(exec, &JSSVGFEBlendElementTable, this, propertyName, slot);
}

JSValue* JSSVGFEBlendElement::getValueProperty(ExecState* exec, int token) const
{
    switch (token) {
    case In1AttrNum: {
        SVGFEBlendElement* imp = static_cast<SVGFEBlendElement*>(impl());
        RefPtr<SVGAnimatedString> obj = imp->in1Animated();
        return toJS(exec, obj.get(), imp);
    }
    case In2AttrNum: {
        SVGFEBlendElement* imp = static_cast<SVGFEBlendElement*>(impl());
        RefPtr<SVGAnimatedString> obj = imp->in2Animated();
        return toJS(exec, obj.get(), imp);
    }
    case ModeAttrNum: {
        SVGFEBlendElement* imp = static_cast<SVGFEBlendElement*>(impl());
        RefPtr<SVGAnimatedEnumeration> obj = imp->modeAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case XAttrNum: {
        SVGFEBlendElement* imp = static_cast<SVGFEBlendElement*>(impl());
        RefPtr<SVGAnimatedLength> obj = imp->xAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case YAttrNum: {
        SVGFEBlendElement* imp = static_cast<SVGFEBlendElement*>(impl());
        RefPtr<SVGAnimatedLength> obj = imp->yAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case WidthAttrNum: {
        SVGFEBlendElement* imp = static_cast<SVGFEBlendElement*>(impl());
        RefPtr<SVGAnimatedLength> obj = imp->widthAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case HeightAttrNum: {
        SVGFEBlendElement* imp = static_cast<SVGFEBlendElement*>(impl());
        RefPtr<SVGAnimatedLength> obj = imp->heightAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case ResultAttrNum: {
        SVGFEBlendElement* imp = static_cast<SVGFEBlendElement*>(impl());
        RefPtr<SVGAnimatedString> obj = imp->resultAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case ClassNameAttrNum: {
        SVGFEBlendElement* imp = static_cast<SVGFEBlendElement*>(impl());
        RefPtr<SVGAnimatedString> obj = imp->classNameAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case StyleAttrNum: {
        SVGFEBlendElement* imp = static_cast<SVGFEBlendElement*>(impl());
        return toJS(exec, WTF::getPtr(imp->style()));
    }
    case ConstructorAttrNum:
        return getConstructor(exec);
    }
    return 0;
}

JSValue* JSSVGFEBlendElement::getConstructor(ExecState* exec)
{
    static const Identifier* constructorIdentifier = new Identifier(exec, "[[SVGFEBlendElement.constructor]]");
    return JSC::cacheGlobalObject<JSSVGFEBlendElementConstructor>(exec, *constructorIdentifier);
}

JSValue* jsSVGFEBlendElementPrototypeFunctionGetPresentationAttribute(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGFEBlendElement::s_info))
        return throwError(exec, TypeError);
    JSSVGFEBlendElement* castedThisObj = static_cast<JSSVGFEBlendElement*>(thisValue);
    SVGFEBlendElement* imp = static_cast<SVGFEBlendElement*>(castedThisObj->impl());
    const UString& name = args.at(exec, 0)->toString(exec);


    JSC::JSValue* result = toJS(exec, WTF::getPtr(imp->getPresentationAttribute(name)));
    return result;
}


}

#endif // ENABLE(SVG) && ENABLE(SVG_FILTERS)
