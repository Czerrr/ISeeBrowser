/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"


#if ENABLE(SVG)

#include "Document.h"
#include "Frame.h"
#include "SVGDocumentExtensions.h"
#include "SVGElement.h"
#include "SVGAnimatedTemplate.h"
#include "JSSVGTransform.h"

#include <wtf/GetPtr.h>

#include "JSSVGMatrix.h"
#include "SVGTransform.h"

#include <kjs/Error.h>
#include <kjs/JSNumberCell.h>

using namespace JSC;

namespace WebCore {

ASSERT_CLASS_FITS_IN_CELL(JSSVGTransform)

/* Hash table */

static const HashTableValue JSSVGTransformTableValues[5] =
{
    { "type", (intptr_t)JSSVGTransform::TypeAttrNum, DontDelete|ReadOnly, 0 },
    { "matrix", (intptr_t)JSSVGTransform::MatrixAttrNum, DontDelete|ReadOnly, 0 },
    { "angle", (intptr_t)JSSVGTransform::AngleAttrNum, DontDelete|ReadOnly, 0 },
    { "constructor", (intptr_t)JSSVGTransform::ConstructorAttrNum, DontEnum, 0 },
    { 0, 0, 0, 0 }
};

static const HashTable JSSVGTransformTable = { 31, JSSVGTransformTableValues, 0 };

/* Hash table for constructor */

static const HashTableValue JSSVGTransformConstructorTableValues[8] =
{
    { "SVG_TRANSFORM_UNKNOWN", (intptr_t)0, DontDelete|ReadOnly, 0 },
    { "SVG_TRANSFORM_MATRIX", (intptr_t)1, DontDelete|ReadOnly, 0 },
    { "SVG_TRANSFORM_TRANSLATE", (intptr_t)2, DontDelete|ReadOnly, 0 },
    { "SVG_TRANSFORM_SCALE", (intptr_t)3, DontDelete|ReadOnly, 0 },
    { "SVG_TRANSFORM_ROTATE", (intptr_t)4, DontDelete|ReadOnly, 0 },
    { "SVG_TRANSFORM_SKEWX", (intptr_t)5, DontDelete|ReadOnly, 0 },
    { "SVG_TRANSFORM_SKEWY", (intptr_t)6, DontDelete|ReadOnly, 0 },
    { 0, 0, 0, 0 }
};

static const HashTable JSSVGTransformConstructorTable = { 127, JSSVGTransformConstructorTableValues, 0 };

class JSSVGTransformConstructor : public DOMObject {
public:
    JSSVGTransformConstructor(ExecState* exec)
        : DOMObject(exec->lexicalGlobalObject()->objectPrototype())
    {
        putDirect(exec->propertyNames().prototype, JSSVGTransformPrototype::self(exec), None);
    }
    virtual bool getOwnPropertySlot(ExecState*, const Identifier&, PropertySlot&);
    JSValue* getValueProperty(ExecState*, int token) const;
    virtual const ClassInfo* classInfo() const { return &s_info; }
    static const ClassInfo s_info;

    virtual bool implementsHasInstance() const { return true; }
};

const ClassInfo JSSVGTransformConstructor::s_info = { "SVGTransformConstructor", 0, &JSSVGTransformConstructorTable, 0 };

bool JSSVGTransformConstructor::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSSVGTransformConstructor, DOMObject>(exec, &JSSVGTransformConstructorTable, this, propertyName, slot);
}

JSValue* JSSVGTransformConstructor::getValueProperty(ExecState* exec, int token) const
{
    // The token is the numeric value of its associated constant
    return jsNumber(exec, token);
}

/* Hash table for prototype */

static const HashTableValue JSSVGTransformPrototypeTableValues[14] =
{
    { "SVG_TRANSFORM_UNKNOWN", (intptr_t)0, DontDelete|ReadOnly, 0 },
    { "SVG_TRANSFORM_MATRIX", (intptr_t)1, DontDelete|ReadOnly, 0 },
    { "SVG_TRANSFORM_TRANSLATE", (intptr_t)2, DontDelete|ReadOnly, 0 },
    { "SVG_TRANSFORM_SCALE", (intptr_t)3, DontDelete|ReadOnly, 0 },
    { "SVG_TRANSFORM_ROTATE", (intptr_t)4, DontDelete|ReadOnly, 0 },
    { "SVG_TRANSFORM_SKEWX", (intptr_t)5, DontDelete|ReadOnly, 0 },
    { "SVG_TRANSFORM_SKEWY", (intptr_t)6, DontDelete|ReadOnly, 0 },
    { "setMatrix", (intptr_t)jsSVGTransformPrototypeFunctionSetMatrix, DontDelete|Function, 1 },
    { "setTranslate", (intptr_t)jsSVGTransformPrototypeFunctionSetTranslate, DontDelete|Function, 2 },
    { "setScale", (intptr_t)jsSVGTransformPrototypeFunctionSetScale, DontDelete|Function, 2 },
    { "setRotate", (intptr_t)jsSVGTransformPrototypeFunctionSetRotate, DontDelete|Function, 3 },
    { "setSkewX", (intptr_t)jsSVGTransformPrototypeFunctionSetSkewX, DontDelete|Function, 1 },
    { "setSkewY", (intptr_t)jsSVGTransformPrototypeFunctionSetSkewY, DontDelete|Function, 1 },
    { 0, 0, 0, 0 }
};

static const HashTable JSSVGTransformPrototypeTable = { 127, JSSVGTransformPrototypeTableValues, 0 };

const ClassInfo JSSVGTransformPrototype::s_info = { "SVGTransformPrototype", 0, &JSSVGTransformPrototypeTable, 0 };

JSObject* JSSVGTransformPrototype::self(ExecState* exec)
{
    static const Identifier* prototypeIdentifier = new Identifier(exec, "[[JSSVGTransform.prototype]]");
    return JSC::cacheGlobalObject<JSSVGTransformPrototype>(exec, *prototypeIdentifier);
}

bool JSSVGTransformPrototype::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticPropertySlot<JSSVGTransformPrototype, JSObject>(exec, &JSSVGTransformPrototypeTable, this, propertyName, slot);
}

JSValue* JSSVGTransformPrototype::getValueProperty(ExecState* exec, int token) const
{
    // The token is the numeric value of its associated constant
    return jsNumber(exec, token);
}

const ClassInfo JSSVGTransform::s_info = { "SVGTransform", 0, &JSSVGTransformTable , 0 };

JSSVGTransform::JSSVGTransform(JSObject* prototype, JSSVGPODTypeWrapper<SVGTransform>* impl, SVGElement* context)
    : DOMObject(prototype)
    , m_context(context)
    , m_impl(impl)
{
}

JSSVGTransform::~JSSVGTransform()
{
    ScriptInterpreter::forgetDOMObject(m_impl.get());

}

bool JSSVGTransform::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSSVGTransform, Base>(exec, &JSSVGTransformTable, this, propertyName, slot);
}

JSValue* JSSVGTransform::getValueProperty(ExecState* exec, int token) const
{
    switch (token) {
    case TypeAttrNum: {
        SVGTransform imp(*impl());
        return jsNumber(exec, imp.type());
    }
    case MatrixAttrNum: {
        SVGTransform imp(*impl());
        return toJS(exec, JSSVGStaticPODTypeWrapperWithPODTypeParent<AffineTransform, SVGTransform>::create(imp.matrix(), impl()).get(), context());
    }
    case AngleAttrNum: {
        SVGTransform imp(*impl());
        return jsNumber(exec, imp.angle());
    }
    case ConstructorAttrNum:
        return getConstructor(exec);
    }
    return 0;
}

JSValue* JSSVGTransform::getConstructor(ExecState* exec)
{
    static const Identifier* constructorIdentifier = new Identifier(exec, "[[SVGTransform.constructor]]");
    return JSC::cacheGlobalObject<JSSVGTransformConstructor>(exec, *constructorIdentifier);
}

JSValue* jsSVGTransformPrototypeFunctionSetMatrix(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGTransform::s_info))
        return throwError(exec, TypeError);
    JSSVGTransform* castedThisObj = static_cast<JSSVGTransform*>(thisValue);
    JSSVGPODTypeWrapper<SVGTransform>* wrapper = castedThisObj->impl();
    SVGTransform imp(*wrapper);
    AffineTransform matrix = toSVGMatrix(args.at(exec, 0));

    imp.setMatrix(matrix);
    wrapper->commitChange(imp, castedThisObj->context());
    return jsUndefined();
}

JSValue* jsSVGTransformPrototypeFunctionSetTranslate(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGTransform::s_info))
        return throwError(exec, TypeError);
    JSSVGTransform* castedThisObj = static_cast<JSSVGTransform*>(thisValue);
    JSSVGPODTypeWrapper<SVGTransform>* wrapper = castedThisObj->impl();
    SVGTransform imp(*wrapper);
    float tx = args.at(exec, 0)->toFloat(exec);
    float ty = args.at(exec, 1)->toFloat(exec);

    imp.setTranslate(tx, ty);
    wrapper->commitChange(imp, castedThisObj->context());
    return jsUndefined();
}

JSValue* jsSVGTransformPrototypeFunctionSetScale(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGTransform::s_info))
        return throwError(exec, TypeError);
    JSSVGTransform* castedThisObj = static_cast<JSSVGTransform*>(thisValue);
    JSSVGPODTypeWrapper<SVGTransform>* wrapper = castedThisObj->impl();
    SVGTransform imp(*wrapper);
    float sx = args.at(exec, 0)->toFloat(exec);
    float sy = args.at(exec, 1)->toFloat(exec);

    imp.setScale(sx, sy);
    wrapper->commitChange(imp, castedThisObj->context());
    return jsUndefined();
}

JSValue* jsSVGTransformPrototypeFunctionSetRotate(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGTransform::s_info))
        return throwError(exec, TypeError);
    JSSVGTransform* castedThisObj = static_cast<JSSVGTransform*>(thisValue);
    JSSVGPODTypeWrapper<SVGTransform>* wrapper = castedThisObj->impl();
    SVGTransform imp(*wrapper);
    float angle = args.at(exec, 0)->toFloat(exec);
    float cx = args.at(exec, 1)->toFloat(exec);
    float cy = args.at(exec, 2)->toFloat(exec);

    imp.setRotate(angle, cx, cy);
    wrapper->commitChange(imp, castedThisObj->context());
    return jsUndefined();
}

JSValue* jsSVGTransformPrototypeFunctionSetSkewX(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGTransform::s_info))
        return throwError(exec, TypeError);
    JSSVGTransform* castedThisObj = static_cast<JSSVGTransform*>(thisValue);
    JSSVGPODTypeWrapper<SVGTransform>* wrapper = castedThisObj->impl();
    SVGTransform imp(*wrapper);
    float angle = args.at(exec, 0)->toFloat(exec);

    imp.setSkewX(angle);
    wrapper->commitChange(imp, castedThisObj->context());
    return jsUndefined();
}

JSValue* jsSVGTransformPrototypeFunctionSetSkewY(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGTransform::s_info))
        return throwError(exec, TypeError);
    JSSVGTransform* castedThisObj = static_cast<JSSVGTransform*>(thisValue);
    JSSVGPODTypeWrapper<SVGTransform>* wrapper = castedThisObj->impl();
    SVGTransform imp(*wrapper);
    float angle = args.at(exec, 0)->toFloat(exec);

    imp.setSkewY(angle);
    wrapper->commitChange(imp, castedThisObj->context());
    return jsUndefined();
}

JSC::JSValue* toJS(JSC::ExecState* exec, JSSVGPODTypeWrapper<SVGTransform>* obj, SVGElement* context)
{
    return cacheSVGDOMObject<JSSVGPODTypeWrapper<SVGTransform>, JSSVGTransform, JSSVGTransformPrototype>(exec, obj, context);
}
SVGTransform toSVGTransform(JSC::JSValue* val)
{
    return val->isObject(&JSSVGTransform::s_info) ? (SVGTransform) *static_cast<JSSVGTransform*>(val)->impl() : SVGTransform();
}

}

#endif // ENABLE(SVG)
