/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"


#if ENABLE(SVG)

#include "Document.h"
#include "Frame.h"
#include "SVGDocumentExtensions.h"
#include "SVGElement.h"
#include "SVGAnimatedTemplate.h"
#include "JSSVGPointList.h"

#include <wtf/GetPtr.h>

#include "SVGPointList.h"

#include <kjs/Error.h>
#include <kjs/JSNumberCell.h>

using namespace JSC;

namespace WebCore {

ASSERT_CLASS_FITS_IN_CELL(JSSVGPointList)

/* Hash table */

static const HashTableValue JSSVGPointListTableValues[2] =
{
    { "numberOfItems", (intptr_t)JSSVGPointList::NumberOfItemsAttrNum, DontDelete|ReadOnly, 0 },
    { 0, 0, 0, 0 }
};

static const HashTable JSSVGPointListTable = { 0, JSSVGPointListTableValues, 0 };

/* Hash table for prototype */

static const HashTableValue JSSVGPointListPrototypeTableValues[8] =
{
    { "clear", (intptr_t)jsSVGPointListPrototypeFunctionClear, DontDelete|Function, 0 },
    { "initialize", (intptr_t)jsSVGPointListPrototypeFunctionInitialize, DontDelete|Function, 1 },
    { "getItem", (intptr_t)jsSVGPointListPrototypeFunctionGetItem, DontDelete|Function, 1 },
    { "insertItemBefore", (intptr_t)jsSVGPointListPrototypeFunctionInsertItemBefore, DontDelete|Function, 2 },
    { "replaceItem", (intptr_t)jsSVGPointListPrototypeFunctionReplaceItem, DontDelete|Function, 2 },
    { "removeItem", (intptr_t)jsSVGPointListPrototypeFunctionRemoveItem, DontDelete|Function, 1 },
    { "appendItem", (intptr_t)jsSVGPointListPrototypeFunctionAppendItem, DontDelete|Function, 1 },
    { 0, 0, 0, 0 }
};

static const HashTable JSSVGPointListPrototypeTable = { 63, JSSVGPointListPrototypeTableValues, 0 };

const ClassInfo JSSVGPointListPrototype::s_info = { "SVGPointListPrototype", 0, &JSSVGPointListPrototypeTable, 0 };

JSObject* JSSVGPointListPrototype::self(ExecState* exec)
{
    static const Identifier* prototypeIdentifier = new Identifier(exec, "[[JSSVGPointList.prototype]]");
    return JSC::cacheGlobalObject<JSSVGPointListPrototype>(exec, *prototypeIdentifier);
}

bool JSSVGPointListPrototype::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticFunctionSlot<JSObject>(exec, &JSSVGPointListPrototypeTable, this, propertyName, slot);
}

const ClassInfo JSSVGPointList::s_info = { "SVGPointList", 0, &JSSVGPointListTable , 0 };

JSSVGPointList::JSSVGPointList(JSObject* prototype, SVGPointList* impl, SVGElement* context)
    : DOMObject(prototype)
    , m_context(context)
    , m_impl(impl)
{
}

JSSVGPointList::~JSSVGPointList()
{
    ScriptInterpreter::forgetDOMObject(m_impl.get());

}

bool JSSVGPointList::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSSVGPointList, Base>(exec, &JSSVGPointListTable, this, propertyName, slot);
}

JSValue* JSSVGPointList::getValueProperty(ExecState* exec, int token) const
{
    switch (token) {
    case NumberOfItemsAttrNum: {
        SVGPointList* imp = static_cast<SVGPointList*>(impl());
        return jsNumber(exec, imp->numberOfItems());
    }
    }
    return 0;
}

JSValue* jsSVGPointListPrototypeFunctionClear(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGPointList::s_info))
        return throwError(exec, TypeError);
    JSSVGPointList* castedThisObj = static_cast<JSSVGPointList*>(thisValue);
    return castedThisObj->clear(exec, args);
}

JSValue* jsSVGPointListPrototypeFunctionInitialize(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGPointList::s_info))
        return throwError(exec, TypeError);
    JSSVGPointList* castedThisObj = static_cast<JSSVGPointList*>(thisValue);
    return castedThisObj->initialize(exec, args);
}

JSValue* jsSVGPointListPrototypeFunctionGetItem(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGPointList::s_info))
        return throwError(exec, TypeError);
    JSSVGPointList* castedThisObj = static_cast<JSSVGPointList*>(thisValue);
    return castedThisObj->getItem(exec, args);
}

JSValue* jsSVGPointListPrototypeFunctionInsertItemBefore(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGPointList::s_info))
        return throwError(exec, TypeError);
    JSSVGPointList* castedThisObj = static_cast<JSSVGPointList*>(thisValue);
    return castedThisObj->insertItemBefore(exec, args);
}

JSValue* jsSVGPointListPrototypeFunctionReplaceItem(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGPointList::s_info))
        return throwError(exec, TypeError);
    JSSVGPointList* castedThisObj = static_cast<JSSVGPointList*>(thisValue);
    return castedThisObj->replaceItem(exec, args);
}

JSValue* jsSVGPointListPrototypeFunctionRemoveItem(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGPointList::s_info))
        return throwError(exec, TypeError);
    JSSVGPointList* castedThisObj = static_cast<JSSVGPointList*>(thisValue);
    return castedThisObj->removeItem(exec, args);
}

JSValue* jsSVGPointListPrototypeFunctionAppendItem(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGPointList::s_info))
        return throwError(exec, TypeError);
    JSSVGPointList* castedThisObj = static_cast<JSSVGPointList*>(thisValue);
    return castedThisObj->appendItem(exec, args);
}

JSC::JSValue* toJS(JSC::ExecState* exec, SVGPointList* obj, SVGElement* context)
{
    return cacheSVGDOMObject<SVGPointList, JSSVGPointList, JSSVGPointListPrototype>(exec, obj, context);
}
SVGPointList* toSVGPointList(JSC::JSValue* val)
{
    return val->isObject(&JSSVGPointList::s_info) ? static_cast<JSSVGPointList*>(val)->impl() : 0;
}

}

#endif // ENABLE(SVG)
