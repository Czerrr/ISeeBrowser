/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"


#if ENABLE(SVG)

#include "Document.h"
#include "Frame.h"
#include "SVGDocumentExtensions.h"
#include "SVGElement.h"
#include "SVGAnimatedTemplate.h"
#include "JSSVGRenderingIntent.h"

#include <wtf/GetPtr.h>

#include "SVGRenderingIntent.h"

#include <kjs/JSNumberCell.h>

using namespace JSC;

namespace WebCore {

ASSERT_CLASS_FITS_IN_CELL(JSSVGRenderingIntent)

/* Hash table */

static const HashTableValue JSSVGRenderingIntentTableValues[2] =
{
    { "constructor", (intptr_t)JSSVGRenderingIntent::ConstructorAttrNum, DontEnum, 0 },
    { 0, 0, 0, 0 }
};

static const HashTable JSSVGRenderingIntentTable = { 0, JSSVGRenderingIntentTableValues, 0 };

/* Hash table for constructor */

static const HashTableValue JSSVGRenderingIntentConstructorTableValues[7] =
{
    { "RENDERING_INTENT_UNKNOWN", (intptr_t)0, DontDelete|ReadOnly, 0 },
    { "RENDERING_INTENT_AUTO", (intptr_t)1, DontDelete|ReadOnly, 0 },
    { "RENDERING_INTENT_PERCEPTUAL", (intptr_t)2, DontDelete|ReadOnly, 0 },
    { "RENDERING_INTENT_RELATIVE_COLORIMETRIC", (intptr_t)3, DontDelete|ReadOnly, 0 },
    { "RENDERING_INTENT_SATURATION", (intptr_t)4, DontDelete|ReadOnly, 0 },
    { "RENDERING_INTENT_ABSOLUTE_COLORIMETRIC", (intptr_t)5, DontDelete|ReadOnly, 0 },
    { 0, 0, 0, 0 }
};

static const HashTable JSSVGRenderingIntentConstructorTable = { 15, JSSVGRenderingIntentConstructorTableValues, 0 };

class JSSVGRenderingIntentConstructor : public DOMObject {
public:
    JSSVGRenderingIntentConstructor(ExecState* exec)
        : DOMObject(exec->lexicalGlobalObject()->objectPrototype())
    {
        putDirect(exec->propertyNames().prototype, JSSVGRenderingIntentPrototype::self(exec), None);
    }
    virtual bool getOwnPropertySlot(ExecState*, const Identifier&, PropertySlot&);
    JSValue* getValueProperty(ExecState*, int token) const;
    virtual const ClassInfo* classInfo() const { return &s_info; }
    static const ClassInfo s_info;

    virtual bool implementsHasInstance() const { return true; }
};

const ClassInfo JSSVGRenderingIntentConstructor::s_info = { "SVGRenderingIntentConstructor", 0, &JSSVGRenderingIntentConstructorTable, 0 };

bool JSSVGRenderingIntentConstructor::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSSVGRenderingIntentConstructor, DOMObject>(exec, &JSSVGRenderingIntentConstructorTable, this, propertyName, slot);
}

JSValue* JSSVGRenderingIntentConstructor::getValueProperty(ExecState* exec, int token) const
{
    // The token is the numeric value of its associated constant
    return jsNumber(exec, token);
}

/* Hash table for prototype */

static const HashTableValue JSSVGRenderingIntentPrototypeTableValues[7] =
{
    { "RENDERING_INTENT_UNKNOWN", (intptr_t)0, DontDelete|ReadOnly, 0 },
    { "RENDERING_INTENT_AUTO", (intptr_t)1, DontDelete|ReadOnly, 0 },
    { "RENDERING_INTENT_PERCEPTUAL", (intptr_t)2, DontDelete|ReadOnly, 0 },
    { "RENDERING_INTENT_RELATIVE_COLORIMETRIC", (intptr_t)3, DontDelete|ReadOnly, 0 },
    { "RENDERING_INTENT_SATURATION", (intptr_t)4, DontDelete|ReadOnly, 0 },
    { "RENDERING_INTENT_ABSOLUTE_COLORIMETRIC", (intptr_t)5, DontDelete|ReadOnly, 0 },
    { 0, 0, 0, 0 }
};

static const HashTable JSSVGRenderingIntentPrototypeTable = { 15, JSSVGRenderingIntentPrototypeTableValues, 0 };

const ClassInfo JSSVGRenderingIntentPrototype::s_info = { "SVGRenderingIntentPrototype", 0, &JSSVGRenderingIntentPrototypeTable, 0 };

JSObject* JSSVGRenderingIntentPrototype::self(ExecState* exec)
{
    static const Identifier* prototypeIdentifier = new Identifier(exec, "[[JSSVGRenderingIntent.prototype]]");
    return JSC::cacheGlobalObject<JSSVGRenderingIntentPrototype>(exec, *prototypeIdentifier);
}

bool JSSVGRenderingIntentPrototype::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSSVGRenderingIntentPrototype, JSObject>(exec, &JSSVGRenderingIntentPrototypeTable, this, propertyName, slot);
}

JSValue* JSSVGRenderingIntentPrototype::getValueProperty(ExecState* exec, int token) const
{
    // The token is the numeric value of its associated constant
    return jsNumber(exec, token);
}

const ClassInfo JSSVGRenderingIntent::s_info = { "SVGRenderingIntent", 0, &JSSVGRenderingIntentTable , 0 };

JSSVGRenderingIntent::JSSVGRenderingIntent(JSObject* prototype, SVGRenderingIntent* impl, SVGElement* context)
    : DOMObject(prototype)
    , m_context(context)
    , m_impl(impl)
{
}

JSSVGRenderingIntent::~JSSVGRenderingIntent()
{
    ScriptInterpreter::forgetDOMObject(m_impl.get());

}

bool JSSVGRenderingIntent::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSSVGRenderingIntent, Base>(exec, &JSSVGRenderingIntentTable, this, propertyName, slot);
}

JSValue* JSSVGRenderingIntent::getValueProperty(ExecState* exec, int token) const
{
    switch (token) {
    case ConstructorAttrNum:
        return getConstructor(exec);
    }
    return 0;
}

JSValue* JSSVGRenderingIntent::getConstructor(ExecState* exec)
{
    static const Identifier* constructorIdentifier = new Identifier(exec, "[[SVGRenderingIntent.constructor]]");
    return JSC::cacheGlobalObject<JSSVGRenderingIntentConstructor>(exec, *constructorIdentifier);
}

JSC::JSValue* toJS(JSC::ExecState* exec, SVGRenderingIntent* obj, SVGElement* context)
{
    return cacheSVGDOMObject<SVGRenderingIntent, JSSVGRenderingIntent, JSSVGRenderingIntentPrototype>(exec, obj, context);
}
SVGRenderingIntent* toSVGRenderingIntent(JSC::JSValue* val)
{
    return val->isObject(&JSSVGRenderingIntent::s_info) ? static_cast<JSSVGRenderingIntent*>(val)->impl() : 0;
}

}

#endif // ENABLE(SVG)
