/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#ifndef JSDOMApplicationCache_h
#define JSDOMApplicationCache_h


#if ENABLE(OFFLINE_WEB_APPLICATIONS)

#include "JSDOMBinding.h"
#include <kjs/JSGlobalObject.h>
#include <kjs/ObjectPrototype.h>

namespace WebCore {

class DOMApplicationCache;

class JSDOMApplicationCache : public DOMObject {
    typedef DOMObject Base;
public:
    JSDOMApplicationCache(JSC::JSObject* prototype, DOMApplicationCache*);
    virtual ~JSDOMApplicationCache();
    virtual bool getOwnPropertySlot(JSC::ExecState*, const JSC::Identifier& propertyName, JSC::PropertySlot&);
    JSC::JSValue* getValueProperty(JSC::ExecState*, int token) const;
    virtual void put(JSC::ExecState*, const JSC::Identifier& propertyName, JSC::JSValue*, JSC::PutPropertySlot&);
    void putValueProperty(JSC::ExecState*, int, JSC::JSValue*);
    virtual const JSC::ClassInfo* classInfo() const { return &s_info; }
    static const JSC::ClassInfo s_info;

    virtual void mark();

    enum {
        // Attributes
        StatusAttrNum, LengthAttrNum, OncheckingAttrNum, OnerrorAttrNum, 
        OnnoupdateAttrNum, OndownloadingAttrNum, OnprogressAttrNum, OnupdatereadyAttrNum, 
        OncachedAttrNum, 
    };

    // Custom attributes
    JSC::JSValue* onchecking(JSC::ExecState*) const;
    void setOnchecking(JSC::ExecState*, JSC::JSValue*);
    JSC::JSValue* onerror(JSC::ExecState*) const;
    void setOnerror(JSC::ExecState*, JSC::JSValue*);
    JSC::JSValue* onnoupdate(JSC::ExecState*) const;
    void setOnnoupdate(JSC::ExecState*, JSC::JSValue*);
    JSC::JSValue* ondownloading(JSC::ExecState*) const;
    void setOndownloading(JSC::ExecState*, JSC::JSValue*);
    JSC::JSValue* onprogress(JSC::ExecState*) const;
    void setOnprogress(JSC::ExecState*, JSC::JSValue*);
    JSC::JSValue* onupdateready(JSC::ExecState*) const;
    void setOnupdateready(JSC::ExecState*, JSC::JSValue*);
    JSC::JSValue* oncached(JSC::ExecState*) const;
    void setOncached(JSC::ExecState*, JSC::JSValue*);

    // Custom functions
    JSC::JSValue* add(JSC::ExecState*, const JSC::ArgList&);
    JSC::JSValue* remove(JSC::ExecState*, const JSC::ArgList&);
    JSC::JSValue* addEventListener(JSC::ExecState*, const JSC::ArgList&);
    JSC::JSValue* removeEventListener(JSC::ExecState*, const JSC::ArgList&);
    JSC::JSValue* dispatchEvent(JSC::ExecState*, const JSC::ArgList&);
    DOMApplicationCache* impl() const { return m_impl.get(); }

private:
    RefPtr<DOMApplicationCache> m_impl;
};

JSC::JSValue* toJS(JSC::ExecState*, DOMApplicationCache*);
DOMApplicationCache* toDOMApplicationCache(JSC::JSValue*);

class JSDOMApplicationCachePrototype : public JSC::JSObject {
public:
    static JSC::JSObject* self(JSC::ExecState*);
    virtual const JSC::ClassInfo* classInfo() const { return &s_info; }
    static const JSC::ClassInfo s_info;
    bool getOwnPropertySlot(JSC::ExecState*, const JSC::Identifier&, JSC::PropertySlot&);
    JSC::JSValue* getValueProperty(JSC::ExecState*, int token) const;
    JSDOMApplicationCachePrototype(JSC::ExecState* exec)
        : JSC::JSObject(exec->lexicalGlobalObject()->objectPrototype()) { }
};

// Functions

JSC::JSValue* jsDOMApplicationCachePrototypeFunctionUpdate(JSC::ExecState*, JSC::JSObject*, JSC::JSValue*, const JSC::ArgList&);
JSC::JSValue* jsDOMApplicationCachePrototypeFunctionSwapCache(JSC::ExecState*, JSC::JSObject*, JSC::JSValue*, const JSC::ArgList&);
JSC::JSValue* jsDOMApplicationCachePrototypeFunctionItem(JSC::ExecState*, JSC::JSObject*, JSC::JSValue*, const JSC::ArgList&);
JSC::JSValue* jsDOMApplicationCachePrototypeFunctionAdd(JSC::ExecState*, JSC::JSObject*, JSC::JSValue*, const JSC::ArgList&);
JSC::JSValue* jsDOMApplicationCachePrototypeFunctionRemove(JSC::ExecState*, JSC::JSObject*, JSC::JSValue*, const JSC::ArgList&);
JSC::JSValue* jsDOMApplicationCachePrototypeFunctionAddEventListener(JSC::ExecState*, JSC::JSObject*, JSC::JSValue*, const JSC::ArgList&);
JSC::JSValue* jsDOMApplicationCachePrototypeFunctionRemoveEventListener(JSC::ExecState*, JSC::JSObject*, JSC::JSValue*, const JSC::ArgList&);
JSC::JSValue* jsDOMApplicationCachePrototypeFunctionDispatchEvent(JSC::ExecState*, JSC::JSObject*, JSC::JSValue*, const JSC::ArgList&);
} // namespace WebCore

#endif // ENABLE(OFFLINE_WEB_APPLICATIONS)

#endif
