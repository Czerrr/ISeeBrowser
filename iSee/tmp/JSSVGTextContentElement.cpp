/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"


#if ENABLE(SVG)

#include "Document.h"
#include "Frame.h"
#include "SVGDocumentExtensions.h"
#include "SVGElement.h"
#include "SVGAnimatedTemplate.h"
#include "JSSVGTextContentElement.h"

#include <wtf/GetPtr.h>

#include "CSSMutableStyleDeclaration.h"
#include "CSSStyleDeclaration.h"
#include "CSSValue.h"
#include "FloatPoint.h"
#include "JSCSSStyleDeclaration.h"
#include "JSCSSValue.h"
#include "JSSVGAnimatedBoolean.h"
#include "JSSVGAnimatedEnumeration.h"
#include "JSSVGAnimatedLength.h"
#include "JSSVGAnimatedString.h"
#include "JSSVGPoint.h"
#include "JSSVGRect.h"
#include "JSSVGStringList.h"
#include "KURL.h"
#include "SVGStringList.h"
#include "SVGTextContentElement.h"

#include <kjs/Error.h>
#include <kjs/JSNumberCell.h>
#include <kjs/JSString.h>

using namespace JSC;

namespace WebCore {

ASSERT_CLASS_FITS_IN_CELL(JSSVGTextContentElement)

/* Hash table */

static const HashTableValue JSSVGTextContentElementTableValues[12] =
{
    { "textLength", (intptr_t)JSSVGTextContentElement::TextLengthAttrNum, DontDelete|ReadOnly, 0 },
    { "lengthAdjust", (intptr_t)JSSVGTextContentElement::LengthAdjustAttrNum, DontDelete|ReadOnly, 0 },
    { "requiredFeatures", (intptr_t)JSSVGTextContentElement::RequiredFeaturesAttrNum, DontDelete|ReadOnly, 0 },
    { "requiredExtensions", (intptr_t)JSSVGTextContentElement::RequiredExtensionsAttrNum, DontDelete|ReadOnly, 0 },
    { "systemLanguage", (intptr_t)JSSVGTextContentElement::SystemLanguageAttrNum, DontDelete|ReadOnly, 0 },
    { "xmllang", (intptr_t)JSSVGTextContentElement::XmllangAttrNum, DontDelete, 0 },
    { "xmlspace", (intptr_t)JSSVGTextContentElement::XmlspaceAttrNum, DontDelete, 0 },
    { "externalResourcesRequired", (intptr_t)JSSVGTextContentElement::ExternalResourcesRequiredAttrNum, DontDelete|ReadOnly, 0 },
    { "className", (intptr_t)JSSVGTextContentElement::ClassNameAttrNum, DontDelete|ReadOnly, 0 },
    { "style", (intptr_t)JSSVGTextContentElement::StyleAttrNum, DontDelete|ReadOnly, 0 },
    { "constructor", (intptr_t)JSSVGTextContentElement::ConstructorAttrNum, DontEnum, 0 },
    { 0, 0, 0, 0 }
};

static const HashTable JSSVGTextContentElementTable = { 127, JSSVGTextContentElementTableValues, 0 };

/* Hash table for constructor */

static const HashTableValue JSSVGTextContentElementConstructorTableValues[4] =
{
    { "LENGTHADJUST_UNKNOWN", (intptr_t)0, DontDelete|ReadOnly, 0 },
    { "LENGTHADJUST_SPACING", (intptr_t)1, DontDelete|ReadOnly, 0 },
    { "LENGTHADJUST_SPACINGANDGLYPHS", (intptr_t)2, DontDelete|ReadOnly, 0 },
    { 0, 0, 0, 0 }
};

static const HashTable JSSVGTextContentElementConstructorTable = { 7, JSSVGTextContentElementConstructorTableValues, 0 };

class JSSVGTextContentElementConstructor : public DOMObject {
public:
    JSSVGTextContentElementConstructor(ExecState* exec)
        : DOMObject(exec->lexicalGlobalObject()->objectPrototype())
    {
        putDirect(exec->propertyNames().prototype, JSSVGTextContentElementPrototype::self(exec), None);
    }
    virtual bool getOwnPropertySlot(ExecState*, const Identifier&, PropertySlot&);
    JSValue* getValueProperty(ExecState*, int token) const;
    virtual const ClassInfo* classInfo() const { return &s_info; }
    static const ClassInfo s_info;

    virtual bool implementsHasInstance() const { return true; }
};

const ClassInfo JSSVGTextContentElementConstructor::s_info = { "SVGTextContentElementConstructor", 0, &JSSVGTextContentElementConstructorTable, 0 };

bool JSSVGTextContentElementConstructor::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSSVGTextContentElementConstructor, DOMObject>(exec, &JSSVGTextContentElementConstructorTable, this, propertyName, slot);
}

JSValue* JSSVGTextContentElementConstructor::getValueProperty(ExecState* exec, int token) const
{
    // The token is the numeric value of its associated constant
    return jsNumber(exec, token);
}

/* Hash table for prototype */

static const HashTableValue JSSVGTextContentElementPrototypeTableValues[15] =
{
    { "LENGTHADJUST_UNKNOWN", (intptr_t)0, DontDelete|ReadOnly, 0 },
    { "LENGTHADJUST_SPACING", (intptr_t)1, DontDelete|ReadOnly, 0 },
    { "LENGTHADJUST_SPACINGANDGLYPHS", (intptr_t)2, DontDelete|ReadOnly, 0 },
    { "getNumberOfChars", (intptr_t)jsSVGTextContentElementPrototypeFunctionGetNumberOfChars, DontDelete|Function, 0 },
    { "getComputedTextLength", (intptr_t)jsSVGTextContentElementPrototypeFunctionGetComputedTextLength, DontDelete|Function, 0 },
    { "getSubStringLength", (intptr_t)jsSVGTextContentElementPrototypeFunctionGetSubStringLength, DontDelete|Function, 2 },
    { "getStartPositionOfChar", (intptr_t)jsSVGTextContentElementPrototypeFunctionGetStartPositionOfChar, DontDelete|Function, 1 },
    { "getEndPositionOfChar", (intptr_t)jsSVGTextContentElementPrototypeFunctionGetEndPositionOfChar, DontDelete|Function, 1 },
    { "getExtentOfChar", (intptr_t)jsSVGTextContentElementPrototypeFunctionGetExtentOfChar, DontDelete|Function, 1 },
    { "getRotationOfChar", (intptr_t)jsSVGTextContentElementPrototypeFunctionGetRotationOfChar, DontDelete|Function, 1 },
    { "getCharNumAtPosition", (intptr_t)jsSVGTextContentElementPrototypeFunctionGetCharNumAtPosition, DontDelete|Function, 1 },
    { "selectSubString", (intptr_t)jsSVGTextContentElementPrototypeFunctionSelectSubString, DontDelete|Function, 2 },
    { "hasExtension", (intptr_t)jsSVGTextContentElementPrototypeFunctionHasExtension, DontDelete|Function, 1 },
    { "getPresentationAttribute", (intptr_t)jsSVGTextContentElementPrototypeFunctionGetPresentationAttribute, DontDelete|Function, 1 },
    { 0, 0, 0, 0 }
};

static const HashTable JSSVGTextContentElementPrototypeTable = { 127, JSSVGTextContentElementPrototypeTableValues, 0 };

const ClassInfo JSSVGTextContentElementPrototype::s_info = { "SVGTextContentElementPrototype", 0, &JSSVGTextContentElementPrototypeTable, 0 };

JSObject* JSSVGTextContentElementPrototype::self(ExecState* exec)
{
    static const Identifier* prototypeIdentifier = new Identifier(exec, "[[JSSVGTextContentElement.prototype]]");
    return JSC::cacheGlobalObject<JSSVGTextContentElementPrototype>(exec, *prototypeIdentifier);
}

bool JSSVGTextContentElementPrototype::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticPropertySlot<JSSVGTextContentElementPrototype, JSObject>(exec, &JSSVGTextContentElementPrototypeTable, this, propertyName, slot);
}

JSValue* JSSVGTextContentElementPrototype::getValueProperty(ExecState* exec, int token) const
{
    // The token is the numeric value of its associated constant
    return jsNumber(exec, token);
}

const ClassInfo JSSVGTextContentElement::s_info = { "SVGTextContentElement", &JSSVGElement::s_info, &JSSVGTextContentElementTable , 0 };

JSSVGTextContentElement::JSSVGTextContentElement(JSObject* prototype, SVGTextContentElement* impl)
    : JSSVGElement(prototype, impl)
{
}

bool JSSVGTextContentElement::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSSVGTextContentElement, Base>(exec, &JSSVGTextContentElementTable, this, propertyName, slot);
}

JSValue* JSSVGTextContentElement::getValueProperty(ExecState* exec, int token) const
{
    switch (token) {
    case TextLengthAttrNum: {
        SVGTextContentElement* imp = static_cast<SVGTextContentElement*>(impl());
        RefPtr<SVGAnimatedLength> obj = imp->textLengthAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case LengthAdjustAttrNum: {
        SVGTextContentElement* imp = static_cast<SVGTextContentElement*>(impl());
        RefPtr<SVGAnimatedEnumeration> obj = imp->lengthAdjustAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case RequiredFeaturesAttrNum: {
        SVGTextContentElement* imp = static_cast<SVGTextContentElement*>(impl());
        return toJS(exec, WTF::getPtr(imp->requiredFeatures()), imp);
    }
    case RequiredExtensionsAttrNum: {
        SVGTextContentElement* imp = static_cast<SVGTextContentElement*>(impl());
        return toJS(exec, WTF::getPtr(imp->requiredExtensions()), imp);
    }
    case SystemLanguageAttrNum: {
        SVGTextContentElement* imp = static_cast<SVGTextContentElement*>(impl());
        return toJS(exec, WTF::getPtr(imp->systemLanguage()), imp);
    }
    case XmllangAttrNum: {
        SVGTextContentElement* imp = static_cast<SVGTextContentElement*>(impl());
        return jsString(exec, imp->xmllang());
    }
    case XmlspaceAttrNum: {
        SVGTextContentElement* imp = static_cast<SVGTextContentElement*>(impl());
        return jsString(exec, imp->xmlspace());
    }
    case ExternalResourcesRequiredAttrNum: {
        SVGTextContentElement* imp = static_cast<SVGTextContentElement*>(impl());
        RefPtr<SVGAnimatedBoolean> obj = imp->externalResourcesRequiredAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case ClassNameAttrNum: {
        SVGTextContentElement* imp = static_cast<SVGTextContentElement*>(impl());
        RefPtr<SVGAnimatedString> obj = imp->classNameAnimated();
        return toJS(exec, obj.get(), imp);
    }
    case StyleAttrNum: {
        SVGTextContentElement* imp = static_cast<SVGTextContentElement*>(impl());
        return toJS(exec, WTF::getPtr(imp->style()));
    }
    case ConstructorAttrNum:
        return getConstructor(exec);
    }
    return 0;
}

void JSSVGTextContentElement::put(ExecState* exec, const Identifier& propertyName, JSValue* value, PutPropertySlot& slot)
{
    lookupPut<JSSVGTextContentElement, Base>(exec, propertyName, value, &JSSVGTextContentElementTable, this, slot);
}

void JSSVGTextContentElement::putValueProperty(ExecState* exec, int token, JSValue* value)
{
    switch (token) {
    case XmllangAttrNum: {
        SVGTextContentElement* imp = static_cast<SVGTextContentElement*>(impl());
        imp->setXmllang(value->toString(exec));
        break;
    }
    case XmlspaceAttrNum: {
        SVGTextContentElement* imp = static_cast<SVGTextContentElement*>(impl());
        imp->setXmlspace(value->toString(exec));
        break;
    }
    }
}

JSValue* JSSVGTextContentElement::getConstructor(ExecState* exec)
{
    static const Identifier* constructorIdentifier = new Identifier(exec, "[[SVGTextContentElement.constructor]]");
    return JSC::cacheGlobalObject<JSSVGTextContentElementConstructor>(exec, *constructorIdentifier);
}

JSValue* jsSVGTextContentElementPrototypeFunctionGetNumberOfChars(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGTextContentElement::s_info))
        return throwError(exec, TypeError);
    JSSVGTextContentElement* castedThisObj = static_cast<JSSVGTextContentElement*>(thisValue);
    SVGTextContentElement* imp = static_cast<SVGTextContentElement*>(castedThisObj->impl());


    JSC::JSValue* result = jsNumber(exec, imp->getNumberOfChars());
    return result;
}

JSValue* jsSVGTextContentElementPrototypeFunctionGetComputedTextLength(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGTextContentElement::s_info))
        return throwError(exec, TypeError);
    JSSVGTextContentElement* castedThisObj = static_cast<JSSVGTextContentElement*>(thisValue);
    SVGTextContentElement* imp = static_cast<SVGTextContentElement*>(castedThisObj->impl());


    JSC::JSValue* result = jsNumber(exec, imp->getComputedTextLength());
    return result;
}

JSValue* jsSVGTextContentElementPrototypeFunctionGetSubStringLength(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGTextContentElement::s_info))
        return throwError(exec, TypeError);
    JSSVGTextContentElement* castedThisObj = static_cast<JSSVGTextContentElement*>(thisValue);
    SVGTextContentElement* imp = static_cast<SVGTextContentElement*>(castedThisObj->impl());
    ExceptionCode ec = 0;
    unsigned offset = args.at(exec, 0)->toInt32(exec);
    unsigned length = args.at(exec, 1)->toInt32(exec);


    JSC::JSValue* result = jsNumber(exec, imp->getSubStringLength(offset, length, ec));
    setDOMException(exec, ec);
    return result;
}

JSValue* jsSVGTextContentElementPrototypeFunctionGetStartPositionOfChar(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGTextContentElement::s_info))
        return throwError(exec, TypeError);
    JSSVGTextContentElement* castedThisObj = static_cast<JSSVGTextContentElement*>(thisValue);
    SVGTextContentElement* imp = static_cast<SVGTextContentElement*>(castedThisObj->impl());
    ExceptionCode ec = 0;
    unsigned offset = args.at(exec, 0)->toInt32(exec);


    JSC::JSValue* result = toJS(exec, JSSVGStaticPODTypeWrapper<FloatPoint>::create(imp->getStartPositionOfChar(offset, ec)).get(), imp);
    setDOMException(exec, ec);
    return result;
}

JSValue* jsSVGTextContentElementPrototypeFunctionGetEndPositionOfChar(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGTextContentElement::s_info))
        return throwError(exec, TypeError);
    JSSVGTextContentElement* castedThisObj = static_cast<JSSVGTextContentElement*>(thisValue);
    SVGTextContentElement* imp = static_cast<SVGTextContentElement*>(castedThisObj->impl());
    ExceptionCode ec = 0;
    unsigned offset = args.at(exec, 0)->toInt32(exec);


    JSC::JSValue* result = toJS(exec, JSSVGStaticPODTypeWrapper<FloatPoint>::create(imp->getEndPositionOfChar(offset, ec)).get(), imp);
    setDOMException(exec, ec);
    return result;
}

JSValue* jsSVGTextContentElementPrototypeFunctionGetExtentOfChar(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGTextContentElement::s_info))
        return throwError(exec, TypeError);
    JSSVGTextContentElement* castedThisObj = static_cast<JSSVGTextContentElement*>(thisValue);
    SVGTextContentElement* imp = static_cast<SVGTextContentElement*>(castedThisObj->impl());
    ExceptionCode ec = 0;
    unsigned offset = args.at(exec, 0)->toInt32(exec);


    JSC::JSValue* result = toJS(exec, JSSVGStaticPODTypeWrapper<FloatRect>::create(imp->getExtentOfChar(offset, ec)).get(), imp);
    setDOMException(exec, ec);
    return result;
}

JSValue* jsSVGTextContentElementPrototypeFunctionGetRotationOfChar(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGTextContentElement::s_info))
        return throwError(exec, TypeError);
    JSSVGTextContentElement* castedThisObj = static_cast<JSSVGTextContentElement*>(thisValue);
    SVGTextContentElement* imp = static_cast<SVGTextContentElement*>(castedThisObj->impl());
    ExceptionCode ec = 0;
    unsigned offset = args.at(exec, 0)->toInt32(exec);


    JSC::JSValue* result = jsNumber(exec, imp->getRotationOfChar(offset, ec));
    setDOMException(exec, ec);
    return result;
}

JSValue* jsSVGTextContentElementPrototypeFunctionGetCharNumAtPosition(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGTextContentElement::s_info))
        return throwError(exec, TypeError);
    JSSVGTextContentElement* castedThisObj = static_cast<JSSVGTextContentElement*>(thisValue);
    SVGTextContentElement* imp = static_cast<SVGTextContentElement*>(castedThisObj->impl());
    FloatPoint point = toSVGPoint(args.at(exec, 0));


    JSC::JSValue* result = jsNumber(exec, imp->getCharNumAtPosition(point));
    return result;
}

JSValue* jsSVGTextContentElementPrototypeFunctionSelectSubString(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGTextContentElement::s_info))
        return throwError(exec, TypeError);
    JSSVGTextContentElement* castedThisObj = static_cast<JSSVGTextContentElement*>(thisValue);
    SVGTextContentElement* imp = static_cast<SVGTextContentElement*>(castedThisObj->impl());
    ExceptionCode ec = 0;
    unsigned offset = args.at(exec, 0)->toInt32(exec);
    unsigned length = args.at(exec, 1)->toInt32(exec);

    imp->selectSubString(offset, length, ec);
    setDOMException(exec, ec);
    return jsUndefined();
}

JSValue* jsSVGTextContentElementPrototypeFunctionHasExtension(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGTextContentElement::s_info))
        return throwError(exec, TypeError);
    JSSVGTextContentElement* castedThisObj = static_cast<JSSVGTextContentElement*>(thisValue);
    SVGTextContentElement* imp = static_cast<SVGTextContentElement*>(castedThisObj->impl());
    const UString& extension = args.at(exec, 0)->toString(exec);


    JSC::JSValue* result = jsBoolean(imp->hasExtension(extension));
    return result;
}

JSValue* jsSVGTextContentElementPrototypeFunctionGetPresentationAttribute(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSSVGTextContentElement::s_info))
        return throwError(exec, TypeError);
    JSSVGTextContentElement* castedThisObj = static_cast<JSSVGTextContentElement*>(thisValue);
    SVGTextContentElement* imp = static_cast<SVGTextContentElement*>(castedThisObj->impl());
    const UString& name = args.at(exec, 0)->toString(exec);


    JSC::JSValue* result = toJS(exec, WTF::getPtr(imp->getPresentationAttribute(name)));
    return result;
}


}

#endif // ENABLE(SVG)
