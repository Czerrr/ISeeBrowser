/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#include "JSEventTarget.h"

#include <wtf/GetPtr.h>

#include "EventTarget.h"
#include "JSEvent.h"
#include "JSEventListener.h"

#include <kjs/Error.h>

using namespace JSC;

namespace WebCore {

ASSERT_CLASS_FITS_IN_CELL(JSEventTarget)

/* Hash table for prototype */

static const HashTableValue JSEventTargetPrototypeTableValues[4] =
{
    { "addEventListener", (intptr_t)jsEventTargetPrototypeFunctionAddEventListener, DontDelete|Function, 3 },
    { "removeEventListener", (intptr_t)jsEventTargetPrototypeFunctionRemoveEventListener, DontDelete|Function, 3 },
    { "dispatchEvent", (intptr_t)jsEventTargetPrototypeFunctionDispatchEvent, DontDelete|Function, 1 },
    { 0, 0, 0, 0 }
};

static const HashTable JSEventTargetPrototypeTable = { 3, JSEventTargetPrototypeTableValues, 0 };

const ClassInfo JSEventTargetPrototype::s_info = { "EventTargetPrototype", 0, &JSEventTargetPrototypeTable, 0 };

JSObject* JSEventTargetPrototype::self(ExecState* exec)
{
    static const Identifier* prototypeIdentifier = new Identifier(exec, "[[JSEventTarget.prototype]]");
    return JSC::cacheGlobalObject<JSEventTargetPrototype>(exec, *prototypeIdentifier);
}

bool JSEventTargetPrototype::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticFunctionSlot<JSObject>(exec, &JSEventTargetPrototypeTable, this, propertyName, slot);
}

const ClassInfo JSEventTarget::s_info = { "EventTarget", 0, 0 , 0 };

JSEventTarget::JSEventTarget(JSObject* prototype, EventTarget* impl)
    : DOMObject(prototype)
    , m_impl(impl)
{
}

JSEventTarget::~JSEventTarget()
{
    ScriptInterpreter::forgetDOMObject(m_impl.get());

}

JSValue* jsEventTargetPrototypeFunctionAddEventListener(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSEventTarget::s_info))
        return throwError(exec, TypeError);
    JSEventTarget* castedThisObj = static_cast<JSEventTarget*>(thisValue);
    EventTarget* imp = static_cast<EventTarget*>(castedThisObj->impl());
    const UString& type = args.at(exec, 0)->toString(exec);
    EventListener* listener = toEventListener(args.at(exec, 1));
    bool useCapture = args.at(exec, 2)->toBoolean(exec);

    imp->addEventListener(type, listener, useCapture);
    return jsUndefined();
}

JSValue* jsEventTargetPrototypeFunctionRemoveEventListener(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSEventTarget::s_info))
        return throwError(exec, TypeError);
    JSEventTarget* castedThisObj = static_cast<JSEventTarget*>(thisValue);
    EventTarget* imp = static_cast<EventTarget*>(castedThisObj->impl());
    const UString& type = args.at(exec, 0)->toString(exec);
    EventListener* listener = toEventListener(args.at(exec, 1));
    bool useCapture = args.at(exec, 2)->toBoolean(exec);

    imp->removeEventListener(type, listener, useCapture);
    return jsUndefined();
}

JSValue* jsEventTargetPrototypeFunctionDispatchEvent(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    if (!thisValue->isObject(&JSEventTarget::s_info))
        return throwError(exec, TypeError);
    JSEventTarget* castedThisObj = static_cast<JSEventTarget*>(thisValue);
    EventTarget* imp = static_cast<EventTarget*>(castedThisObj->impl());
    ExceptionCode ec = 0;
    Event* event = toEvent(args.at(exec, 0));


    JSC::JSValue* result = jsBoolean(imp->dispatchEvent(event, ec));
    setDOMException(exec, ec);
    return result;
}

JSC::JSValue* toJS(JSC::ExecState* exec, EventTarget* obj)
{
    return cacheDOMObject<EventTarget, JSEventTarget, JSEventTargetPrototype>(exec, obj);
}
EventTarget* toEventTarget(JSC::JSValue* val)
{
    return val->isObject(&JSEventTarget::s_info) ? static_cast<JSEventTarget*>(val)->impl() : 0;
}

}
