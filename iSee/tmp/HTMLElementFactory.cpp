/*
 * THIS FILE IS AUTOMATICALLY GENERATED, DO NOT EDIT.
 *
 *
 * Copyright (C) 2005 Apple Computer, Inc.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE COMPUTER, INC. ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE COMPUTER, INC. OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 */


#include "config.h"
#include "HTMLElementFactory.h"
#include "HTMLNames.h"
#include "Page.h"
#include "Settings.h"
#include "HTMLAnchorElement.h"
#include "HTMLAbbrElement.h"
#include "HTMLAcronymElement.h"
#include "HTMLAddressElement.h"
#include "HTMLAppletElement.h"
#include "HTMLAreaElement.h"
#include "HTMLBElement.h"
#include "HTMLBaseElement.h"
#include "HTMLBaseFontElement.h"
#include "HTMLBdoElement.h"
#include "HTMLBigElement.h"
#include "HTMLBlockquoteElement.h"
#include "HTMLBodyElement.h"
#include "HTMLBRElement.h"
#include "HTMLButtonElement.h"
#include "HTMLCanvasElement.h"
#include "HTMLTableCaptionElement.h"
#include "HTMLCenterElement.h"
#include "HTMLCiteElement.h"
#include "HTMLCodeElement.h"
#include "HTMLTableColElement.h"
#include "HTMLColgroupElement.h"
#include "HTMLDdElement.h"
#include "HTMLModElement.h"
#include "HTMLDfnElement.h"
#include "HTMLDirectoryElement.h"
#include "HTMLDivElement.h"
#include "HTMLDListElement.h"
#include "HTMLDtElement.h"
#include "HTMLEmElement.h"
#include "HTMLEmbedElement.h"
#include "HTMLFieldSetElement.h"
#include "HTMLFontElement.h"
#include "HTMLFormElement.h"
#include "HTMLFrameElement.h"
#include "HTMLFrameSetElement.h"
#include "HTMLHeadingElement.h"
#include "HTMLH2Element.h"
#include "HTMLH3Element.h"
#include "HTMLH4Element.h"
#include "HTMLH5Element.h"
#include "HTMLH6Element.h"
#include "HTMLHeadElement.h"
#include "HTMLHRElement.h"
#include "HTMLHtmlElement.h"
#include "HTMLIElement.h"
#include "HTMLIFrameElement.h"
#include "HTMLImageElement.h"
#include "HTMLImageElement.h"
#include "HTMLInputElement.h"
#include "HTMLInsElement.h"
#include "HTMLIsIndexElement.h"
#include "HTMLKbdElement.h"
#include "HTMLKeygenElement.h"
#include "HTMLLabelElement.h"
#include "HTMLLayerElement.h"
#include "HTMLLegendElement.h"
#include "HTMLLIElement.h"
#include "HTMLLinkElement.h"
#include "HTMLListingElement.h"
#include "HTMLMapElement.h"
#include "HTMLMarqueeElement.h"
#include "HTMLMenuElement.h"
#include "HTMLMetaElement.h"
#include "HTMLNobrElement.h"
#include "HTMLNoembedElement.h"
#include "HTMLNoframesElement.h"
#include "HTMLNolayerElement.h"
#include "HTMLNoscriptElement.h"
#include "HTMLObjectElement.h"
#include "HTMLOListElement.h"
#include "HTMLOptGroupElement.h"
#include "HTMLOptionElement.h"
#include "HTMLParagraphElement.h"
#include "HTMLParamElement.h"
#include "HTMLPlaintextElement.h"
#include "HTMLPreElement.h"
#include "HTMLQuoteElement.h"
#include "HTMLSElement.h"
#include "HTMLSampElement.h"
#include "HTMLScriptElement.h"
#include "HTMLSelectElement.h"
#include "HTMLSmallElement.h"
#include "HTMLSpanElement.h"
#include "HTMLStrikeElement.h"
#include "HTMLStrongElement.h"
#include "HTMLStyleElement.h"
#include "HTMLSubElement.h"
#include "HTMLSupElement.h"
#include "HTMLTableElement.h"
#include "HTMLTableSectionElement.h"
#include "HTMLTableCellElement.h"
#include "HTMLTextAreaElement.h"
#include "HTMLTfootElement.h"
#include "HTMLThElement.h"
#include "HTMLTheadElement.h"
#include "HTMLTitleElement.h"
#include "HTMLTableRowElement.h"
#include "HTMLTtElement.h"
#include "HTMLUElement.h"
#include "HTMLUListElement.h"
#include "HTMLVarElement.h"
#include "HTMLWbrElement.h"
#include "HTMLXmpElement.h"
#include <wtf/HashMap.h>

using namespace WebCore;

typedef  HTMLElement* (*ConstructorFunc)(Document* doc, bool createdByParser);
typedef WTF::HashMap<AtomicStringImpl*, ConstructorFunc> FunctionMap;

static FunctionMap* gFunctionMap = 0;

namespace  WebCore {

HTMLElement* aConstructor(Document* doc, bool createdByParser)
{
    return new HTMLAnchorElement(HTMLNames::aTag, doc);
}

HTMLElement* abbrConstructor(Document* doc, bool createdByParser)
{
    return new HTMLAbbrElement(HTMLNames::abbrTag, doc);
}

HTMLElement* acronymConstructor(Document* doc, bool createdByParser)
{
    return new HTMLAcronymElement(HTMLNames::acronymTag, doc);
}

HTMLElement* addressConstructor(Document* doc, bool createdByParser)
{
    return new HTMLAddressElement(HTMLNames::addressTag, doc);
}

HTMLElement* appletConstructor(Document* doc, bool createdByParser)
{
    return new HTMLAppletElement(HTMLNames::appletTag, doc);
}

HTMLElement* areaConstructor(Document* doc, bool createdByParser)
{
    return new HTMLAreaElement(HTMLNames::areaTag, doc);
}

HTMLElement* bConstructor(Document* doc, bool createdByParser)
{
    return new HTMLBElement(HTMLNames::bTag, doc);
}

HTMLElement* baseConstructor(Document* doc, bool createdByParser)
{
    return new HTMLBaseElement(HTMLNames::baseTag, doc);
}

HTMLElement* basefontConstructor(Document* doc, bool createdByParser)
{
    return new HTMLBaseFontElement(HTMLNames::basefontTag, doc);
}

HTMLElement* bdoConstructor(Document* doc, bool createdByParser)
{
    return new HTMLBdoElement(HTMLNames::bdoTag, doc);
}

HTMLElement* bigConstructor(Document* doc, bool createdByParser)
{
    return new HTMLBigElement(HTMLNames::bigTag, doc);
}

HTMLElement* blockquoteConstructor(Document* doc, bool createdByParser)
{
    return new HTMLBlockquoteElement(HTMLNames::blockquoteTag, doc);
}

HTMLElement* bodyConstructor(Document* doc, bool createdByParser)
{
    return new HTMLBodyElement(HTMLNames::bodyTag, doc);
}

HTMLElement* brConstructor(Document* doc, bool createdByParser)
{
    return new HTMLBRElement(HTMLNames::brTag, doc);
}

HTMLElement* buttonConstructor(Document* doc, bool createdByParser)
{
    return new HTMLButtonElement(HTMLNames::buttonTag, doc);
}

HTMLElement* canvasConstructor(Document* doc, bool createdByParser)
{
    return new HTMLCanvasElement(HTMLNames::canvasTag, doc);
}

HTMLElement* captionConstructor(Document* doc, bool createdByParser)
{
    return new HTMLTableCaptionElement(HTMLNames::captionTag, doc);
}

HTMLElement* centerConstructor(Document* doc, bool createdByParser)
{
    return new HTMLCenterElement(HTMLNames::centerTag, doc);
}

HTMLElement* citeConstructor(Document* doc, bool createdByParser)
{
    return new HTMLCiteElement(HTMLNames::citeTag, doc);
}

HTMLElement* codeConstructor(Document* doc, bool createdByParser)
{
    return new HTMLCodeElement(HTMLNames::codeTag, doc);
}

HTMLElement* colConstructor(Document* doc, bool createdByParser)
{
    return new HTMLTableColElement(HTMLNames::colTag, doc);
}

HTMLElement* colgroupConstructor(Document* doc, bool createdByParser)
{
    return new HTMLColgroupElement(HTMLNames::colgroupTag, doc);
}

HTMLElement* ddConstructor(Document* doc, bool createdByParser)
{
    return new HTMLDdElement(HTMLNames::ddTag, doc);
}

HTMLElement* delConstructor(Document* doc, bool createdByParser)
{
    return new HTMLModElement(HTMLNames::delTag, doc);
}

HTMLElement* dfnConstructor(Document* doc, bool createdByParser)
{
    return new HTMLDfnElement(HTMLNames::dfnTag, doc);
}

HTMLElement* dirConstructor(Document* doc, bool createdByParser)
{
    return new HTMLDirectoryElement(HTMLNames::dirTag, doc);
}

HTMLElement* divConstructor(Document* doc, bool createdByParser)
{
    return new HTMLDivElement(HTMLNames::divTag, doc);
}

HTMLElement* dlConstructor(Document* doc, bool createdByParser)
{
    return new HTMLDListElement(HTMLNames::dlTag, doc);
}

HTMLElement* dtConstructor(Document* doc, bool createdByParser)
{
    return new HTMLDtElement(HTMLNames::dtTag, doc);
}

HTMLElement* emConstructor(Document* doc, bool createdByParser)
{
    return new HTMLEmElement(HTMLNames::emTag, doc);
}

HTMLElement* embedConstructor(Document* doc, bool createdByParser)
{
    return new HTMLEmbedElement(HTMLNames::embedTag, doc);
}

HTMLElement* fieldsetConstructor(Document* doc, bool createdByParser)
{
    return new HTMLFieldSetElement(HTMLNames::fieldsetTag, doc);
}

HTMLElement* fontConstructor(Document* doc, bool createdByParser)
{
    return new HTMLFontElement(HTMLNames::fontTag, doc);
}

HTMLElement* formConstructor(Document* doc, bool createdByParser)
{
    return new HTMLFormElement(HTMLNames::formTag, doc);
}

HTMLElement* frameConstructor(Document* doc, bool createdByParser)
{
    return new HTMLFrameElement(HTMLNames::frameTag, doc);
}

HTMLElement* framesetConstructor(Document* doc, bool createdByParser)
{
    return new HTMLFrameSetElement(HTMLNames::framesetTag, doc);
}

HTMLElement* h1Constructor(Document* doc, bool createdByParser)
{
    return new HTMLHeadingElement(HTMLNames::h1Tag, doc);
}

HTMLElement* h2Constructor(Document* doc, bool createdByParser)
{
    return new HTMLH2Element(HTMLNames::h2Tag, doc);
}

HTMLElement* h3Constructor(Document* doc, bool createdByParser)
{
    return new HTMLH3Element(HTMLNames::h3Tag, doc);
}

HTMLElement* h4Constructor(Document* doc, bool createdByParser)
{
    return new HTMLH4Element(HTMLNames::h4Tag, doc);
}

HTMLElement* h5Constructor(Document* doc, bool createdByParser)
{
    return new HTMLH5Element(HTMLNames::h5Tag, doc);
}

HTMLElement* h6Constructor(Document* doc, bool createdByParser)
{
    return new HTMLH6Element(HTMLNames::h6Tag, doc);
}

HTMLElement* headConstructor(Document* doc, bool createdByParser)
{
    return new HTMLHeadElement(HTMLNames::headTag, doc);
}

HTMLElement* hrConstructor(Document* doc, bool createdByParser)
{
    return new HTMLHRElement(HTMLNames::hrTag, doc);
}

HTMLElement* htmlConstructor(Document* doc, bool createdByParser)
{
    return new HTMLHtmlElement(HTMLNames::htmlTag, doc);
}

HTMLElement* iConstructor(Document* doc, bool createdByParser)
{
    return new HTMLIElement(HTMLNames::iTag, doc);
}

HTMLElement* iframeConstructor(Document* doc, bool createdByParser)
{
    return new HTMLIFrameElement(HTMLNames::iframeTag, doc);
}

HTMLElement* imageConstructor(Document* doc, bool createdByParser)
{
    return new HTMLImageElement(HTMLNames::imageTag, doc);
}

HTMLElement* imgConstructor(Document* doc, bool createdByParser)
{
    return new HTMLImageElement(HTMLNames::imgTag, doc);
}

HTMLElement* inputConstructor(Document* doc, bool createdByParser)
{
    return new HTMLInputElement(HTMLNames::inputTag, doc);
}

HTMLElement* insConstructor(Document* doc, bool createdByParser)
{
    return new HTMLInsElement(HTMLNames::insTag, doc);
}

HTMLElement* isindexConstructor(Document* doc, bool createdByParser)
{
    return new HTMLIsIndexElement(HTMLNames::isindexTag, doc);
}

HTMLElement* kbdConstructor(Document* doc, bool createdByParser)
{
    return new HTMLKbdElement(HTMLNames::kbdTag, doc);
}

HTMLElement* keygenConstructor(Document* doc, bool createdByParser)
{
    return new HTMLKeygenElement(HTMLNames::keygenTag, doc);
}

HTMLElement* labelConstructor(Document* doc, bool createdByParser)
{
    return new HTMLLabelElement(HTMLNames::labelTag, doc);
}

HTMLElement* layerConstructor(Document* doc, bool createdByParser)
{
    return new HTMLLayerElement(HTMLNames::layerTag, doc);
}

HTMLElement* legendConstructor(Document* doc, bool createdByParser)
{
    return new HTMLLegendElement(HTMLNames::legendTag, doc);
}

HTMLElement* liConstructor(Document* doc, bool createdByParser)
{
    return new HTMLLIElement(HTMLNames::liTag, doc);
}

HTMLElement* linkConstructor(Document* doc, bool createdByParser)
{
    return new HTMLLinkElement(HTMLNames::linkTag, doc);
}

HTMLElement* listingConstructor(Document* doc, bool createdByParser)
{
    return new HTMLListingElement(HTMLNames::listingTag, doc);
}

HTMLElement* mapConstructor(Document* doc, bool createdByParser)
{
    return new HTMLMapElement(HTMLNames::mapTag, doc);
}

HTMLElement* marqueeConstructor(Document* doc, bool createdByParser)
{
    return new HTMLMarqueeElement(HTMLNames::marqueeTag, doc);
}

HTMLElement* menuConstructor(Document* doc, bool createdByParser)
{
    return new HTMLMenuElement(HTMLNames::menuTag, doc);
}

HTMLElement* metaConstructor(Document* doc, bool createdByParser)
{
    return new HTMLMetaElement(HTMLNames::metaTag, doc);
}

HTMLElement* nobrConstructor(Document* doc, bool createdByParser)
{
    return new HTMLNobrElement(HTMLNames::nobrTag, doc);
}

HTMLElement* noembedConstructor(Document* doc, bool createdByParser)
{
    return new HTMLNoembedElement(HTMLNames::noembedTag, doc);
}

HTMLElement* noframesConstructor(Document* doc, bool createdByParser)
{
    return new HTMLNoframesElement(HTMLNames::noframesTag, doc);
}

HTMLElement* nolayerConstructor(Document* doc, bool createdByParser)
{
    return new HTMLNolayerElement(HTMLNames::nolayerTag, doc);
}

HTMLElement* noscriptConstructor(Document* doc, bool createdByParser)
{
    return new HTMLNoscriptElement(HTMLNames::noscriptTag, doc);
}

HTMLElement* objectConstructor(Document* doc, bool createdByParser)
{
    return new HTMLObjectElement(HTMLNames::objectTag, doc);
}

HTMLElement* olConstructor(Document* doc, bool createdByParser)
{
    return new HTMLOListElement(HTMLNames::olTag, doc);
}

HTMLElement* optgroupConstructor(Document* doc, bool createdByParser)
{
    return new HTMLOptGroupElement(HTMLNames::optgroupTag, doc);
}

HTMLElement* optionConstructor(Document* doc, bool createdByParser)
{
    return new HTMLOptionElement(HTMLNames::optionTag, doc);
}

HTMLElement* pConstructor(Document* doc, bool createdByParser)
{
    return new HTMLParagraphElement(HTMLNames::pTag, doc);
}

HTMLElement* paramConstructor(Document* doc, bool createdByParser)
{
    return new HTMLParamElement(HTMLNames::paramTag, doc);
}

HTMLElement* plaintextConstructor(Document* doc, bool createdByParser)
{
    return new HTMLPlaintextElement(HTMLNames::plaintextTag, doc);
}

HTMLElement* preConstructor(Document* doc, bool createdByParser)
{
    return new HTMLPreElement(HTMLNames::preTag, doc);
}

HTMLElement* qConstructor(Document* doc, bool createdByParser)
{
    return new HTMLQuoteElement(HTMLNames::qTag, doc);
}

HTMLElement* sConstructor(Document* doc, bool createdByParser)
{
    return new HTMLSElement(HTMLNames::sTag, doc);
}

HTMLElement* sampConstructor(Document* doc, bool createdByParser)
{
    return new HTMLSampElement(HTMLNames::sampTag, doc);
}

HTMLElement* scriptConstructor(Document* doc, bool createdByParser)
{
    return new HTMLScriptElement(HTMLNames::scriptTag, doc);
}

HTMLElement* selectConstructor(Document* doc, bool createdByParser)
{
    return new HTMLSelectElement(HTMLNames::selectTag, doc);
}

HTMLElement* smallConstructor(Document* doc, bool createdByParser)
{
    return new HTMLSmallElement(HTMLNames::smallTag, doc);
}

HTMLElement* spanConstructor(Document* doc, bool createdByParser)
{
    return new HTMLSpanElement(HTMLNames::spanTag, doc);
}

HTMLElement* strikeConstructor(Document* doc, bool createdByParser)
{
    return new HTMLStrikeElement(HTMLNames::strikeTag, doc);
}

HTMLElement* strongConstructor(Document* doc, bool createdByParser)
{
    return new HTMLStrongElement(HTMLNames::strongTag, doc);
}

HTMLElement* styleConstructor(Document* doc, bool createdByParser)
{
    return new HTMLStyleElement(HTMLNames::styleTag, doc);
}

HTMLElement* subConstructor(Document* doc, bool createdByParser)
{
    return new HTMLSubElement(HTMLNames::subTag, doc);
}

HTMLElement* supConstructor(Document* doc, bool createdByParser)
{
    return new HTMLSupElement(HTMLNames::supTag, doc);
}

HTMLElement* tableConstructor(Document* doc, bool createdByParser)
{
    return new HTMLTableElement(HTMLNames::tableTag, doc);
}

HTMLElement* tbodyConstructor(Document* doc, bool createdByParser)
{
    return new HTMLTableSectionElement(HTMLNames::tbodyTag, doc);
}

HTMLElement* tdConstructor(Document* doc, bool createdByParser)
{
    return new HTMLTableCellElement(HTMLNames::tdTag, doc);
}

HTMLElement* textareaConstructor(Document* doc, bool createdByParser)
{
    return new HTMLTextAreaElement(HTMLNames::textareaTag, doc);
}

HTMLElement* tfootConstructor(Document* doc, bool createdByParser)
{
    return new HTMLTfootElement(HTMLNames::tfootTag, doc);
}

HTMLElement* thConstructor(Document* doc, bool createdByParser)
{
    return new HTMLThElement(HTMLNames::thTag, doc);
}

HTMLElement* theadConstructor(Document* doc, bool createdByParser)
{
    return new HTMLTheadElement(HTMLNames::theadTag, doc);
}

HTMLElement* titleConstructor(Document* doc, bool createdByParser)
{
    return new HTMLTitleElement(HTMLNames::titleTag, doc);
}

HTMLElement* trConstructor(Document* doc, bool createdByParser)
{
    return new HTMLTableRowElement(HTMLNames::trTag, doc);
}

HTMLElement* ttConstructor(Document* doc, bool createdByParser)
{
    return new HTMLTtElement(HTMLNames::ttTag, doc);
}

HTMLElement* uConstructor(Document* doc, bool createdByParser)
{
    return new HTMLUElement(HTMLNames::uTag, doc);
}

HTMLElement* ulConstructor(Document* doc, bool createdByParser)
{
    return new HTMLUListElement(HTMLNames::ulTag, doc);
}

HTMLElement* varConstructor(Document* doc, bool createdByParser)
{
    return new HTMLVarElement(HTMLNames::varTag, doc);
}

HTMLElement* wbrConstructor(Document* doc, bool createdByParser)
{
    return new HTMLWbrElement(HTMLNames::wbrTag, doc);
}

HTMLElement* xmpConstructor(Document* doc, bool createdByParser)
{
    return new HTMLXmpElement(HTMLNames::xmpTag, doc);
}

static inline void createFunctionMapIfNecessary()
{
    if (gFunctionMap)
        return;
    // Create the table.
    gFunctionMap = new FunctionMap;
    
    // Populate it with constructor functions.
    gFunctionMap->set(HTMLNames::aTag.localName().impl(), aConstructor);
    gFunctionMap->set(HTMLNames::abbrTag.localName().impl(), abbrConstructor);
    gFunctionMap->set(HTMLNames::acronymTag.localName().impl(), acronymConstructor);
    gFunctionMap->set(HTMLNames::addressTag.localName().impl(), addressConstructor);
    gFunctionMap->set(HTMLNames::appletTag.localName().impl(), appletConstructor);
    gFunctionMap->set(HTMLNames::areaTag.localName().impl(), areaConstructor);
    gFunctionMap->set(HTMLNames::bTag.localName().impl(), bConstructor);
    gFunctionMap->set(HTMLNames::baseTag.localName().impl(), baseConstructor);
    gFunctionMap->set(HTMLNames::basefontTag.localName().impl(), basefontConstructor);
    gFunctionMap->set(HTMLNames::bdoTag.localName().impl(), bdoConstructor);
    gFunctionMap->set(HTMLNames::bigTag.localName().impl(), bigConstructor);
    gFunctionMap->set(HTMLNames::blockquoteTag.localName().impl(), blockquoteConstructor);
    gFunctionMap->set(HTMLNames::bodyTag.localName().impl(), bodyConstructor);
    gFunctionMap->set(HTMLNames::brTag.localName().impl(), brConstructor);
    gFunctionMap->set(HTMLNames::buttonTag.localName().impl(), buttonConstructor);
    gFunctionMap->set(HTMLNames::canvasTag.localName().impl(), canvasConstructor);
    gFunctionMap->set(HTMLNames::captionTag.localName().impl(), captionConstructor);
    gFunctionMap->set(HTMLNames::centerTag.localName().impl(), centerConstructor);
    gFunctionMap->set(HTMLNames::citeTag.localName().impl(), citeConstructor);
    gFunctionMap->set(HTMLNames::codeTag.localName().impl(), codeConstructor);
    gFunctionMap->set(HTMLNames::colTag.localName().impl(), colConstructor);
    gFunctionMap->set(HTMLNames::colgroupTag.localName().impl(), colgroupConstructor);
    gFunctionMap->set(HTMLNames::ddTag.localName().impl(), ddConstructor);
    gFunctionMap->set(HTMLNames::delTag.localName().impl(), delConstructor);
    gFunctionMap->set(HTMLNames::dfnTag.localName().impl(), dfnConstructor);
    gFunctionMap->set(HTMLNames::dirTag.localName().impl(), dirConstructor);
    gFunctionMap->set(HTMLNames::divTag.localName().impl(), divConstructor);
    gFunctionMap->set(HTMLNames::dlTag.localName().impl(), dlConstructor);
    gFunctionMap->set(HTMLNames::dtTag.localName().impl(), dtConstructor);
    gFunctionMap->set(HTMLNames::emTag.localName().impl(), emConstructor);
    gFunctionMap->set(HTMLNames::embedTag.localName().impl(), embedConstructor);
    gFunctionMap->set(HTMLNames::fieldsetTag.localName().impl(), fieldsetConstructor);
    gFunctionMap->set(HTMLNames::fontTag.localName().impl(), fontConstructor);
    gFunctionMap->set(HTMLNames::formTag.localName().impl(), formConstructor);
    gFunctionMap->set(HTMLNames::frameTag.localName().impl(), frameConstructor);
    gFunctionMap->set(HTMLNames::framesetTag.localName().impl(), framesetConstructor);
    gFunctionMap->set(HTMLNames::h1Tag.localName().impl(), h1Constructor);
    gFunctionMap->set(HTMLNames::h2Tag.localName().impl(), h2Constructor);
    gFunctionMap->set(HTMLNames::h3Tag.localName().impl(), h3Constructor);
    gFunctionMap->set(HTMLNames::h4Tag.localName().impl(), h4Constructor);
    gFunctionMap->set(HTMLNames::h5Tag.localName().impl(), h5Constructor);
    gFunctionMap->set(HTMLNames::h6Tag.localName().impl(), h6Constructor);
    gFunctionMap->set(HTMLNames::headTag.localName().impl(), headConstructor);
    gFunctionMap->set(HTMLNames::hrTag.localName().impl(), hrConstructor);
    gFunctionMap->set(HTMLNames::htmlTag.localName().impl(), htmlConstructor);
    gFunctionMap->set(HTMLNames::iTag.localName().impl(), iConstructor);
    gFunctionMap->set(HTMLNames::iframeTag.localName().impl(), iframeConstructor);
    gFunctionMap->set(HTMLNames::imageTag.localName().impl(), imageConstructor);
    gFunctionMap->set(HTMLNames::imgTag.localName().impl(), imgConstructor);
    gFunctionMap->set(HTMLNames::inputTag.localName().impl(), inputConstructor);
    gFunctionMap->set(HTMLNames::insTag.localName().impl(), insConstructor);
    gFunctionMap->set(HTMLNames::isindexTag.localName().impl(), isindexConstructor);
    gFunctionMap->set(HTMLNames::kbdTag.localName().impl(), kbdConstructor);
    gFunctionMap->set(HTMLNames::keygenTag.localName().impl(), keygenConstructor);
    gFunctionMap->set(HTMLNames::labelTag.localName().impl(), labelConstructor);
    gFunctionMap->set(HTMLNames::layerTag.localName().impl(), layerConstructor);
    gFunctionMap->set(HTMLNames::legendTag.localName().impl(), legendConstructor);
    gFunctionMap->set(HTMLNames::liTag.localName().impl(), liConstructor);
    gFunctionMap->set(HTMLNames::linkTag.localName().impl(), linkConstructor);
    gFunctionMap->set(HTMLNames::listingTag.localName().impl(), listingConstructor);
    gFunctionMap->set(HTMLNames::mapTag.localName().impl(), mapConstructor);
    gFunctionMap->set(HTMLNames::marqueeTag.localName().impl(), marqueeConstructor);
    gFunctionMap->set(HTMLNames::menuTag.localName().impl(), menuConstructor);
    gFunctionMap->set(HTMLNames::metaTag.localName().impl(), metaConstructor);
    gFunctionMap->set(HTMLNames::nobrTag.localName().impl(), nobrConstructor);
    gFunctionMap->set(HTMLNames::noembedTag.localName().impl(), noembedConstructor);
    gFunctionMap->set(HTMLNames::noframesTag.localName().impl(), noframesConstructor);
    gFunctionMap->set(HTMLNames::nolayerTag.localName().impl(), nolayerConstructor);
    gFunctionMap->set(HTMLNames::noscriptTag.localName().impl(), noscriptConstructor);
    gFunctionMap->set(HTMLNames::objectTag.localName().impl(), objectConstructor);
    gFunctionMap->set(HTMLNames::olTag.localName().impl(), olConstructor);
    gFunctionMap->set(HTMLNames::optgroupTag.localName().impl(), optgroupConstructor);
    gFunctionMap->set(HTMLNames::optionTag.localName().impl(), optionConstructor);
    gFunctionMap->set(HTMLNames::pTag.localName().impl(), pConstructor);
    gFunctionMap->set(HTMLNames::paramTag.localName().impl(), paramConstructor);
    gFunctionMap->set(HTMLNames::plaintextTag.localName().impl(), plaintextConstructor);
    gFunctionMap->set(HTMLNames::preTag.localName().impl(), preConstructor);
    gFunctionMap->set(HTMLNames::qTag.localName().impl(), qConstructor);
    gFunctionMap->set(HTMLNames::sTag.localName().impl(), sConstructor);
    gFunctionMap->set(HTMLNames::sampTag.localName().impl(), sampConstructor);
    gFunctionMap->set(HTMLNames::scriptTag.localName().impl(), scriptConstructor);
    gFunctionMap->set(HTMLNames::selectTag.localName().impl(), selectConstructor);
    gFunctionMap->set(HTMLNames::smallTag.localName().impl(), smallConstructor);
    gFunctionMap->set(HTMLNames::spanTag.localName().impl(), spanConstructor);
    gFunctionMap->set(HTMLNames::strikeTag.localName().impl(), strikeConstructor);
    gFunctionMap->set(HTMLNames::strongTag.localName().impl(), strongConstructor);
    gFunctionMap->set(HTMLNames::styleTag.localName().impl(), styleConstructor);
    gFunctionMap->set(HTMLNames::subTag.localName().impl(), subConstructor);
    gFunctionMap->set(HTMLNames::supTag.localName().impl(), supConstructor);
    gFunctionMap->set(HTMLNames::tableTag.localName().impl(), tableConstructor);
    gFunctionMap->set(HTMLNames::tbodyTag.localName().impl(), tbodyConstructor);
    gFunctionMap->set(HTMLNames::tdTag.localName().impl(), tdConstructor);
    gFunctionMap->set(HTMLNames::textareaTag.localName().impl(), textareaConstructor);
    gFunctionMap->set(HTMLNames::tfootTag.localName().impl(), tfootConstructor);
    gFunctionMap->set(HTMLNames::thTag.localName().impl(), thConstructor);
    gFunctionMap->set(HTMLNames::theadTag.localName().impl(), theadConstructor);
    gFunctionMap->set(HTMLNames::titleTag.localName().impl(), titleConstructor);
    gFunctionMap->set(HTMLNames::trTag.localName().impl(), trConstructor);
    gFunctionMap->set(HTMLNames::ttTag.localName().impl(), ttConstructor);
    gFunctionMap->set(HTMLNames::uTag.localName().impl(), uConstructor);
    gFunctionMap->set(HTMLNames::ulTag.localName().impl(), ulConstructor);
    gFunctionMap->set(HTMLNames::varTag.localName().impl(), varConstructor);
    gFunctionMap->set(HTMLNames::wbrTag.localName().impl(), wbrConstructor);
    gFunctionMap->set(HTMLNames::xmpTag.localName().impl(), xmpConstructor);
}
HTMLElement* HTMLElementFactory::createHTMLElement(const QualifiedName& qName, Document* doc, bool createdByParser)
{
    // Don't make elements without a document
    if (!doc)
        return 0;

#if ENABLE(DASHBOARD_SUPPORT)
    Settings* settings = doc->settings();
    if (settings && settings->usesDashboardBackwardCompatibilityMode())
        return 0;
#endif

    createFunctionMapIfNecessary();
    ConstructorFunc func = gFunctionMap->get(qName.localName().impl());
    if (func)
        return func(doc, createdByParser);

    return new HTMLElement(qName, doc);
}

} // namespace

